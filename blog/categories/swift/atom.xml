<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Swift | Welcome to FutureAppLaboratory]]></title>
  <link href="http://zh-wang.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://zh-wang.github.io/"/>
  <updated>2014-09-05T18:00:40+09:00</updated>
  <id>http://zh-wang.github.io/</id>
  <author>
    <name><![CDATA[viennakanon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning-swift-part-3]]></title>
    <link href="http://zh-wang.github.io/blog/2014/09/05/learning-swift-part-3/"/>
    <updated>2014-09-05T17:59:28+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/09/05/learning-swift-part-3</id>
    <content type="html"><![CDATA[<p>Just some notes after reading Apple&rsquo;s official online guide.
Most code are from the guide, with some modification by me.</p>

<h2>===== Full Notes =====</h2>

<h3>Basic Operators</h3>

<ul>
<li><p>Terminology</p>

<pre><code>  - Unary
  - Binary
  - Ternary (There is only one in a ? b :c)
</code></pre></li>
<li><p>Assignment Operator</p>

<pre><code>  // Not a vaild assignment
  if x = y {

  }
</code></pre></li>
<li><p>Arithmetic Operators</p>

<ul>
<li>Not allow overflow.</li>
<li>You can opt in to value overflow behavior by using Swift&rsquo;s overflow operators (such as a &amp;+ b).</li>
<li><p>The addition operator is also supported for <strong>String</strong> concatenation.</p>

<p>  let dog: Character = &ldquo;üê∂&rdquo;
  let cow: Character = &ldquo;üêÆ&rdquo;
  let dogCow = dog + cow
  // dogCow is equal to &ldquo;üê∂üêÆ&rdquo;</p></li>
</ul>
</li>
<li><p>Remainder Operator</p>

<ul>
<li><code>9 % 4 // equals 1</code></li>
<li><code>-9 % 4 // equals -1</code></li>
<li><code>-9 % 4 // equals -9 % -4</code></li>
</ul>
</li>
</ul>


<!-- more -->


<p></p>

<ul>
<li><p>Floating-Point Remainder Calculations</p>

<ul>
<li><code>8 % 2.5 // equals 0.5</code></li>
</ul>
</li>
<li><p>Increment and Decrement Operators</p>

<ul>
<li><code>++</code> and <code>--</code> works the same as C</li>
</ul>
</li>
<li><p>Unary Minus Operator and Unary Plus Operator</p>

<ul>
<li><code>+</code> do <strong>NOT</strong> change the value</li>
</ul>
</li>
<li><p>Compound Assignment Operators</p>

<pre><code>  var a = 1
  a += 2
</code></pre></li>
<li><p>Comparison Operators</p>

<pre><code>  Equal to (a == b)
  Not equal to (a != b)
  Greater than (a &gt; b)
  Less than (a &lt; b)
  Greater than or equal to (a &gt;= b)
  Less than or equal to (a &lt;= b)
</code></pre></li>
<li><p>Nil Coalescing Operator</p>

<ul>
<li><p>The nil coalescing operator (a ?? b) unwraps an optional a if it contains a value, or returns a default value b if a is nil.</p>

<p>  let defaultColorName = &ldquo;red&rdquo;
  var userDefinedColorName: String?   // defaults to nil</p>

<p>  var colorNameToUse = userDefinedColorName ?? defaultColorName
  // userDefinedColorName is nil, so colorNameToUse is set to the default of &ldquo;red&rdquo;</p></li>
</ul>
</li>
<li><p>Range Operators</p>

<pre><code>  for index in 1...5 {
      println("\(index) times 5 is \(index * 5)")
  }
  // 1 times 5 is 5
  // 2 times 5 is 10
  // 3 times 5 is 15
  // 4 times 5 is 20
  // 5 times 5 is 25
</code></pre></li>
<li><p>Half-Open Range Operator</p>

<pre><code>  let names = ["Anna", "Alex", "Brian", "Jack"]
  let count = names.count
  for i in 0..&lt;count {
      println("Person \(i + 1) is called \(names[i])")
  }
  // Person 1 is called Anna
  // Person 2 is called Alex
  // Person 3 is called Brian
  // Person 4 is called Jack&gt;
</code></pre></li>
<li><p>Logical Operators</p>

<ul>
<li>Logical NOT (!a)</li>
<li>Logical AND (a &amp;&amp; b)</li>
<li>Logical OR (a || b)</li>
<li>Logical NOT (!a)</li>
</ul>
</li>
<li><p>Combining Logical Operators</p>

<pre><code>  if enteredDoorCode &amp;&amp; passedRetinaScan || hasDoorKey || knowsOverridePassword {
      println("Welcome!")
  } else {
      println("ACCESS DENIED")
  }
  // prints "Welcome!"
</code></pre></li>
<li><p>Explicit Parentheses</p>

<pre><code>  if (enteredDoorCode &amp;&amp; passedRetinaScan) || hasDoorKey || knowsOverridePassword {
      println("Welcome!")
  } else {
      println("ACCESS DENIED")
  }
  // prints "Welcome!"
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Swift Part 2]]></title>
    <link href="http://zh-wang.github.io/blog/2014/09/05/learning-swift-part-2/"/>
    <updated>2014-09-05T15:06:10+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/09/05/learning-swift-part-2</id>
    <content type="html"><![CDATA[<p>Just some notes after reading Apple&rsquo;s official online guide.
Most code are from the guide, with some modification by me.</p>

<h2>===== Full Notes =====</h2>

<h3>Basics</h3>

<ul>
<li><p>Declaring Constant and Variables</p>

<pre><code>  let maximumNumberOfLoginAttempts = 10
  var currentLoginAttempt = 0

  var x = 0.0, y = 0.0, z = 0.0
</code></pre></li>
<li><p>Type Annotations</p>

<pre><code>  var welcomeMessgae: String
  welcomeMessgae = "Hello"

  var red, green, blue: Double // Multiple variables defined
</code></pre></li>
<li><p>Naming Constants and Variables</p>

<pre><code>  let œÄ = 3.14159
  let ‰Ω†Â•Ω = "‰Ω†Â•Ω‰∏ñÁïå"
  let üê∂üêÆ = "dogcow"
</code></pre></li>
</ul>


<!-- more -->


<ul>
<li><p>Integers</p>

<ul>
<li><p>Integer Bounds</p>

<pre><code>  let minValue = UInt8.min  // minValue is equal to 0, and is of type UInt8
  let maxValue = UInt8.max  // maxValue is equal to 255, and is of type UInt8
</code></pre></li>
<li><p>Int</p>

<ul>
<li>On a 32-bit platform, Int is the same size as Int32.</li>
<li>On a 64-bit platform, Int is the same size as Int64.</li>
</ul>
</li>
<li><p>UInt</p>

<ul>
<li>On a 32-bit platform, UInt is the same size as UInt32.</li>
<li>On a 64-bit platform, UInt is the same size as UInt64.</li>
</ul>
</li>
<li><p>Floating-Point Numbers</p>

<ul>
<li>Double has a precision of at least 15 decimal digits, whereas the precision of Float can be as little as 6 decimal digits. T</li>
</ul>
</li>
<li><p>Type Safety and Type Inference</p></li>
<li><p>Numeric Literals</p>

<pre><code>  let decimalInteger = 17
  let binaryInteger = 0b10001       // 17 in binary notation
  let octalInteger = 0o21           // 17 in octal notation
  let hexadecimalInteger = 0x11     // 17 in hexadecimal notation

  1.25e2          // 125.0
  1.25e-2         // 0.0125
  0xFp2           // 60.0 = 15 x 2 x 2
  0xFp-2          // 3.75 = 15 x 0.5 x 0.5

  // Can have additional formatting literal (like Ruby)

  let paddedDouble = 000123.456
  let oneMillion = 1_000_000
  let justOverOneMillion = 1_000_000.000_000_1
</code></pre></li>
<li><p>Integer Conversion</p>

<pre><code>  let cannotBeNegative: UInt8 = -1
  // UInt8 cannot store negative numbers, and so this will report an error
  let tooBig: Int8 = Int8.max + 1
  // Int8 cannot store a number larger than its maximum value,
  // and so this will also report an error

  // conversion must be explicit

  let twoThousand: UInt16 = 2_000
  let one: UInt8 = 1
  let twoThousandAndOne = twoThousand + UInt16(one)
</code></pre></li>
<li><p>Integer and Floating-Point Conversion</p>

<pre><code>  let three = 3
  let pointOneFourOneFiveNine = 0.14159
  let pi = Double(three) + pointOneFourOneFiveNine
  // pi equals 3.14159, and is inferred to be of type Double

  let integerPi = Int(pi)
  // integerPi equals 3, and is inferred to be of type Int
</code></pre></li>
<li><p>Type Aliases</p>

<pre><code>  typealias AudioSample = UInt16
  var maxAmplitudeFound = AudioSample.min
  // maxAmplitudeFound is now 0
</code></pre></li>
</ul>
</li>
<li><p>Boolean</p>

<pre><code>  let orangesAreOrange = true
  let turnipsAreDelicious = false

  if turnipsAreDelicious {
      println("Mmm, tasty turnips!")
  } else {
      println("Eww, turnips are horrible.")
  }
  // prints "Eww, turnips are horrible."
</code></pre></li>
<li><p>Tuples</p>

<pre><code>  let http404Error = (404, "Not Found")
  // http404Error is of type (Int, String), and equals (404, "Not Found")
</code></pre>

<ul>
<li><p>Decompose a tuple</p>

<pre><code>  let (statusCode, statusMessage) = http404Error
  println("The status code is \(statusCode)")
  // prints "The status code is 404"
  println("The status message is \(statusMessage)")
  // prints "The status message is Not Found"
</code></pre></li>
<li><p>Ignore some value when decomposing</p>

<pre><code>  let (justTheStatusCode, _) = http404Error
  println("The status code is \(justTheStatusCode)")
  // prints "The status code is 404"
</code></pre></li>
<li><p>Access by index</p>

<pre><code>  println("The status code is \(http404Error.0)")
  // prints "The status code is 404"
  println("The status message is \(http404Error.1)")
  // prints "The status message is Not Found"
</code></pre></li>
</ul>
</li>
<li><p>Optionals</p>

<pre><code>  let possibleNumber = "123"
  let convertedNumber = possibleNumber.toInt()
  // convertedNumber is inferred to be of type "Int?", or "optional Int"
</code></pre></li>
<li><p>nil</p>

<pre><code>  var serverResponseCode: Int? = 404
  // serverResponseCode contains an actual Int value of 404
  serverResponseCode = nil
  // serverResponseCode now contains no value

  var surveyAnswer: String?
  // surveyAnswer is automatically set to nil
</code></pre></li>
<li><p>If Statements and Forced Unwrapping</p>

<pre><code>  if convertedNumber != nil {
      println("convertedNumber has an integer value of \(convertedNumber!).")
  }
  // prints "convertedNumber has an integer value of 123."
</code></pre></li>
<li><p>Optional Binding</p>

<pre><code>  if let constantName = someOptional {
      statements
  }

  if let actualNumber = possibleNumber.toInt() {
      println("\(possibleNumber) has an integer value of \(actualNumber)")
  } else {
      println("\(possibleNumber) could not be converted to an integer")
  }
  // prints "123 has an integer value of 123"
</code></pre></li>
<li><p>Implicitly Unwrapping Optionals (Accessing an implicitly unwrapped optional when it does not contain a value will trigger a RTE)</p>

<pre><code>  let possibleString: String? = "An optional string."
  let forcedString: String = possibleString! // requires an exclamation mark

  let assumedString: String! = "An implicitly unwrapped optional string."
  let implicitString: String = assumedString // no need for an exclamation mark

  if assumedString != nil {
      println(assumedString)
  }
  // prints "An implicitly unwrapped optional string."

  if let definiteString = assumedString {
      println(definiteString)
  }
  // prints "An implicitly unwrapped optional string."
</code></pre></li>
<li><p>Assertions</p></li>
<li><p>Debugging with Assertions</p>

<pre><code>  let age = -3
  assert(age &gt;= 0, "A person's age cannot be less than zero")
  // this causes the assertion to trigger, because age is not &gt;= 0
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Swift Part 1]]></title>
    <link href="http://zh-wang.github.io/blog/2014/09/02/learning-swift-part-1/"/>
    <updated>2014-09-02T18:28:36+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/09/02/learning-swift-part-1</id>
    <content type="html"><![CDATA[<p>Just some notes after reading Apple&rsquo;s official online guide.
Most code are from the guide, with some modification by me.</p>

<p>Modified some code in the following parts. Some better example or fixing in new Xcode.</p>

<ul>
<li><p>Function as parameter (like Comparator)
<code>java
  // Bubble sort with a custom comparator
  func sort(inout list: [Int], sorter: ((Int, Int) -&gt; Bool)) {
      var i : Int = 0
      while i &lt; list.count {
          var j : Int = i + 1
          if j &lt; list.count &amp;&amp; !sorter(list[i], list[j]) {
              var temp = list[i]
              list[i] = list[j]
              list[j] = temp
          }
          i++
      }
  }
  var list = [3, 2, 1]
  func sorter(a : Int, b : Int) -&gt; Bool {
      return a &lt; b
  }
  sort(&amp;list, sorter)
</code></p></li>
<li><p>Closure
<code>java
  numbers.map({
      (number: Int) -&gt; Int in
      let result = 3 * number
      return result
  })
  // can be simplied to
  numbers.map({ number in 3 * number })
  // sort a array
  var list = [3, 2, 1]
  sort(&amp;list) // NOT sort(list), this function only accept a reference
  var listSorted = sorted(list) // This is OK
</code></p></li>
</ul>


<!-- more -->


<h2>===== Full Notes =====</h2>

<h3>A Swift Tour</h3>

<ul>
<li><p>variable.</p>

<pre><code>  var myVariable = 42   // variable
  myVariable = 50       // variable
  let myConstant = 42   // Constant
</code></pre></li>
<li><p><strong>implicit</strong> vs <strong>explicit</strong>.</p>

<pre><code>  let implicitInteger = 70
  let implicitDouble = 70.0
  let explicitDouble: Double = 70  // Type is written right to variable
</code></pre></li>
<li><p>Values never implicitly converted.</p>

<pre><code>  let label = "The width is"
  let width = 94
  let withlabel = label + String(width)
</code></pre></li>
<li><p>Include values in strings.</p>

<pre><code>  let apples = 3
  let oranges = 5
  let appleSummary = "I have \(apples) apples."
  let fruitSummary = "I have \(apples + oranges) pieces of fruit."
</code></pre></li>
<li><p><strong>Arrays</strong> and <strong>Dictionaries</strong>.</p>

<pre><code>  var shopppingList = ["catfish", "water", "tulips", "blue paint"] // [] for empty array
  shoppingList[1] = "bottle of water"

  var occupations = [
      "Malcolm": "Captain",
      "Kaylee": "Mechanic",
  ] // [:] for empty dictionary
  occupations["Jayne"] = "Public Relations"
</code></pre></li>
<li><p>Control Flows</p>

<ul>
<li><p><strong>for-in</strong></p>

<pre><code>  let individualScores = [75, 43, 103, 87, 12]
  var teamScore = 0
  for score in individualScores {
      if score &gt; 50 {
          teamScore += 3
      } else {
          teamScore += 1
      }
  }
  teamScore
</code></pre></li>
<li><p>optional-value with <strong>if</strong></p>

<pre><code>  var optionalString: String? = "Hello"
  optionalString == nil

  var optionalName: String? = "John Appleseed"
  var greeting = "Hello!"
  if let name = optionalName {
      greeting = "Hello, \(name)"
  }
</code></pre></li>
<li><p><strong>switch</strong></p>

<pre><code>  let vegetable = "red pepper"
  switch vegetable {
      case "celery":
          let vegetableComment = "Add some raisins and make ants on a log."
      case "cucumber", "watercress":
          let vegetableComment = "That would make a good tea sandwich."
      case let x where x.hasSuffix("pepper"):
          let vegetableComment = "Is it a spicy \(x)?"
      default:
          let vegetableComment = "Everything tastes good in soup."
  }
</code></pre></li>
<li><p><strong>for-in</strong> in <em>dictionary</em></p>

<pre><code>  let interestingNumbers = [
      "Prime": [2, 3, 5, 7, 11, 13],
      "Fibonacci": [1, 1, 2, 3, 5, 8],
      "Square": [1, 4, 9, 16, 25],
  ]
  var largest = 0
  for (kind, numbers) in interestingNumbers {
      for number in numbers {
          if number &gt; largest {
              largest = number
          }
      }
  }
  largest
</code></pre></li>
<li><p><strong>while</strong> and <strong>do-while</strong></p>

<pre><code>  var n = 2
  while n &lt; 100 {
      n = n * 2
  }
  n

  var m = 2
  do {
      m = m * 2
  } while m &lt; 100
  m
</code></pre></li>
<li><p>range operators</p>

<pre><code>  for i in 0..&lt;3 {
      // do something, for 0, 1, 2
  }

  for i in 0...3 {
      // do something, for 0, 1, 2, 3
  }
</code></pre></li>
</ul>
</li>
<li><p><strong>Functions</strong> and <strong>Closures</strong></p>

<ul>
<li><p>A classic one</p>

<pre><code>  func greet(name: String, day: String) -&gt; String {
      return "Hello \(name), today is \(day)."
  }
  greet("Bob", "Tuesday")
</code></pre></li>
<li><p>Use a <strong>tuple</strong> as return value</p>

<pre><code>  func getGasPrices() -&gt; (Double, Double, Double) {
      return (3.59, 3.69, 3.79)
  }
  getGasPrices()
</code></pre></li>
<li><p>Variable Arguments (varargs)</p>

<pre><code>  func sumOf(numbers: Int...) -&gt; Int {
      var sum = 0
      for number in numbers {
              sum += number
          }
      return sum
  }
  sumOf()
  sumOf(42, 597, 12)
</code></pre></li>
<li><p>Nested functions</p>

<pre><code>  func returnFifteen() -&gt; Int { // Wrapper function
      var y = 10
      func add() { // Nested function
          y += 5
      }
      add()
      return y
  }
  returnFifteen()
</code></pre></li>
<li><p>Function as return value (like pointer of function)</p>

<pre><code>  func makeIncrementer() -&gt; (Int -&gt; Int) {
      func addOne(number: Int) -&gt; Int {
              return 1 + number
          }
      return addOne
  }
  var increment = makeIncrementer()
  increment(7)
</code></pre></li>
<li><p>Function as parameter (like Comparator)</p>

<pre><code>  // Bubble sort with a custom comparator
  func sort(inout list: [Int], sorter: ((Int, Int) -&gt; Bool)) {
      var i : Int = 0
      while i &lt; list.count {
          var j : Int = i + 1
          if j &lt; list.count &amp;&amp; !sorter(list[i], list[j]) {
              var temp = list[i]
              list[i] = list[j]
              list[j] = temp
          }
          i++
      }
  }
  var list = [3, 2, 1]
  func sorter(a : Int, b : Int) -&gt; Bool {
      return a &lt; b
  }
  sort(&amp;list, sorter)
</code></pre></li>
<li><p>Closure</p>

<pre><code>  numbers.map({
      (number: Int) -&gt; Int in
      let result = 3 * number
      return result
  })
  // can be simplied to
  numbers.map({ number in 3 * number })
  // sort a array
  var list = [3, 2, 1]
  sort(&amp;list) // NOT sort(list), this function only accept a reference
  var listSorted = sorted(list) // This is OK
</code></pre></li>
</ul>
</li>
<li><p><strong>Objects</strong> and <strong>Classes</strong></p>

<ul>
<li><p>A simple class</p>

<pre><code>  class Shape {
      var numberOfSides = 0
      func simpleDescription() -&gt; String {
              return "A shape with \(numberOfSides) sides."
          }
  }

  var shape = Shape()
  shape.numberOfSides = 7
  var shapeDescription = shape.simpleDescription()
</code></pre></li>
<li><p>Initializer and its opposite</p>

<pre><code>  class NamedShape {
      var numberOfSides: Int = 0
      var name: String

      init(name: String) {
          self.name = name
      }

      deinit {

      }

      func simpleDescription() -&gt; String {
          return "A shape with \(numberOfSides) sides."
      }
  }
</code></pre></li>
<li><p>Subclass</p>

<pre><code>  class Square: NamedShape {
      var sideLength: Double

      init(sideLength: Double, name: String) {
          self.sideLength = sideLength
          super.init(name: name)
          numberOfSides = 4
      }

      func area() -&gt;  Double {
          return sideLength * sideLength
      }

      override func simpleDescription() -&gt; String {
          return "A square with sides of length \(sideLength)."
      }
  }
  let test = Square(sideLength: 5.2, name: "my test square")
  test.area()
  test.simpleDescription()
</code></pre></li>
<li><p>Setter and Getter on properties</p>

<pre><code>  class EquilateralTriangle: NamedShape {
      var sideLength: Double = 0.0

      init(sideLength: Double, name: String) {
          self.sideLength = sideLength
          super.init(name: name)
          numberOfSides = 3
      }

      var perimeter: Double {
      get {
              return 3.0 * sideLength
          }
      set {
              sideLength = newValue / 3.0
          }
      }

      override func simpleDescription() -&gt; String {
          return "An equilateral triagle with sides of length \(sideLength)."
      }
  }
  var triangle = EquilateralTriangle(sideLength: 3.1, name: "a triangle")
  triangle.perimeter
  triangle.perimeter = 9.9
  triangle.sideLength
</code></pre></li>
<li><p>Provide code after before or after setting properties</p>

<pre><code>  class TriangleAndSquare {
      var triangle: EquilateralTriangle {
          willSet {                                    // Do something after before setting properties
              square.sideLength = newValue.sideLength
          }
      }
      var square: Square {
          willSet {                                    // Do something after before setting properties
              triangle.sideLength = newValue.sideLength
          }
      }
      init(size: Double, name: String) {
          square = Square(sideLength: size, name: name)
          triangle = EquilateralTriangle(sideLength: size, name: name)
      }
  }
  var triangleAndSquare = TriangleAndSquare(size: 10, name: "another test shape")
  triangleAndSquare.square.sideLength
  triangleAndSquare.triangle.sideLength
  triangleAndSquare.square = Square(sideLength: 50, name: "larger square")
  triangleAndSquare.triangle.sideLength
</code></pre></li>
</ul>
</li>
<li><p><strong>Enumerations</strong> and <strong>Structures</strong></p>

<ul>
<li><p><strong>Enumerations</strong> can have methods</p>

<pre><code>  enum Rank: Int {
      case Ace = 1
      case Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten
      case Jack, Queen, King
      func simpleDescription() -&gt; String {
          switch self {
          case .Ace:
              return "ace"
          case .Jack:
              return "jack"
          case .Queen:
              return "queen"
          case .King:
              return "king"
          default:
              return String(self.toRaw())
          }
      }
  }
  let ace = Rank.Ace
  let aceRawValue = ace.toRaw()
</code></pre></li>
<li><p>Convert <em>enum</em> between raw values</p>

<pre><code>  let ace = Rank.Ace
  let aceRawValue = ace.toRaw()
  let aceString = ace.simpleDescription()

  if let convertedRank = Rank.fromRaw(3) {
      let threeDescription = convertedRank.simpleDescription()
  }
</code></pre></li>
<li><p><strong>Structure</strong> is similar to <strong>Class</strong>, but when structures are always copied when they are passed around, while classes are passed by reference.</p>

<pre><code>  struct Card {
      var rank: Rank
      var suit: Suit
      func simpleDescription() -&gt; String {
          return "The \(rank.simpleDescription()) of \(suit.simpleDescription())"
      }
  }
  let threeOfSpades = Card(rank: .Three, suit: .Spades)
  let threeOfSpadesDescription = threeOfSpades.simpleDescription()
</code></pre></li>
<li><p><strong>Structure</strong> with associated values.</p>

<pre><code>  enum ServerResponse {
      case Result(String, String)
      case Error(String)
  }

  let success = ServerResponse.Result("6:00 am", "8:09 pm")
  let failure = ServerResponse.Error("Out of cheese.")

  switch success {
  case let .Result(sunrise, sunset):
      let serverResponse = "Sunrise is at \(sunrise) and sunset is at \(sunset)."
  case let .Error(error):
      let serverResponse = "Failure...  \(error)"
  }
</code></pre></li>
</ul>
</li>
<li><p><strong>Protocols</strong> and <strong>Extendsions</strong></p>

<ul>
<li><p>A classic <strong>Protocol</strong>.</p>

<pre><code>  protocol ExampleProtocol {
      var simpleDescription: String { get }
      mutating func adjust()  // "mutating" is needed when a protocol need to modify a structure
  }
</code></pre></li>
<li><p><strong>Classes</strong>, enumerations and structures can all adopt protocols.</p>

<pre><code>  class SimpleClass: ExampleProtocol {
      var simpleDescription: String = "A very simple class."
      var anotherProperty: Int = 69105
      func adjust() {
          simpleDescription += "  Now 100% adjusted."
      }
  }
  var a = SimpleClass()
  a.adjust()
  let aDescription = a.simpleDescription

  struct SimpleStructure: ExampleProtocol {
      var simpleDescription: String = "A simple structure"
      mutating func adjust() {
          simpleDescription += " (adjusted)"
      }
  }
  var b = SimpleStructure()
  b.adjust()
  let bDescription = b.simpleDescription
</code></pre></li>
<li><p><strong>Extension</strong> to add functionality to an existing type.</p>

<pre><code>  extension Int: ExampleProtocol {
      var simpleDescription: String {
      return "The number \(self)"
      }
      mutating func adjust() {
          self += 42
      }
  }
  7.simpleDescription
</code></pre></li>
<li><p>Use <strong>Protocol</strong> as a variable. (Abstracting)</p>

<pre><code>  let protocolValue: ExampleProtocol = a
  protocolValue.simpleDescription
  // protocolValue.anotherProperty  // Though a is an instance of 'SimpleClass', we cannot access its member not defined in 'ExampleProtocol'
</code></pre></li>
</ul>
</li>
<li><p><strong>Generics</strong></p>

<ul>
<li><p>A classic generic sample.</p>

<pre><code>  func repeat&lt;ItemType&gt;(item: ItemType, times: Int) -&gt; [ItemType] {
      var result = [ItemType]()
      for i in 0..&lt;times {
          result += [item]   // operands of Array need to be wrapped in []
      }
      return result
  }
  repeat("knock", 4)
</code></pre></li>
<li><p>Generic can also be used on functions and methods, as well as classes, enumerations, and structures.</p>

<pre><code>  // Reimplement the Swift standard library's optional type
  enum OptionalValue&lt;T&gt; {
      case None
      case Some(T)
  }
  var possibleInteger: OptionalValue&lt;Int&gt; = .None
  possibleInteger = .Some(100)‚Äù
</code></pre></li>
<li><p>Add requirements in <strong>Generic</strong></p>

<pre><code>  func anyCommonElements &lt;T, U where T: SequenceType, U: SequenceType, T.Generator.Element: Equatable, T.Generator.Element == U.Generator.Element&gt; (lhs: T, rhs: U) -&gt; Bool {
      for lhsItem in lhs {
          for rhsItem in rhs {
              if lhsItem == rhsItem {
                  return true
              }
          }
      }
      return false
  }
  anyCommonElements([1, 2, 3], [3])
</code></pre></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
