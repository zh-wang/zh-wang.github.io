<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Swift | Welcome to FutureAppLaboratory]]></title>
  <link href="http://zh-wang.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://zh-wang.github.io/"/>
  <updated>2014-10-21T12:27:39+09:00</updated>
  <id>http://zh-wang.github.io/</id>
  <author>
    <name><![CDATA[viennakanon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Swift Part 6 - Functions]]></title>
    <link href="http://zh-wang.github.io/blog/2014/09/25/learning-swift-part-6/"/>
    <updated>2014-09-25T18:54:45+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/09/25/learning-swift-part-6</id>
    <content type="html"><![CDATA[<p>Just some notes after reading Apple&rsquo;s official online guide.
Most code are from the guide, with some modification by me.</p>

<p>Tuple in switch statement is interesting.</p>

<h2>===== Full Notes =====</h2>

<h3>Functions</h3>

<ul>
<li>Defining and Calling Functions
<code>swift
      func sayHello(personName: String) -&gt; String {
          let greeting = "Hello, " + personName + "!"
          return greeting
      }
</code></li>
<li>Function Parameters and Return Values</li>
<li>Multiple Input Parameters
<code>
      func halfOpenRangeLength(start: Int, end: Int) -&gt; Int {
          return end - start
      }
      println(halfOpenRangeLength(1, 10))
      // prints "9"
</code></li>
<li>Functions Without Parameters
<code>
      func sayHelloWorld() -&gt; String {
          return "hello, world"
      }
      println(sayHelloWorld())
      // prints "hello, world"
</code></li>
<li>Function Without Return Values
<code>
      func sayGoodbye(personName: String) {
          println("Goodbye, \(personName)!")
      }
      sayGoodbye("Dave")
      // prints "Goodbye, Dave!"
</code></li>
</ul>


<!-- more -->


<ul>
<li><p>Functions with Multiple Return Values
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  func minMax(array: [Int]) -&gt; (min: Int, max: Int) {
</span><span class='line'>      var currentMin = array[0]
</span><span class='line'>      var currentMax = array[0]
</span><span class='line'>      for value in array[1..&lt;array.count] {
</span><span class='line'>          if value &lt; currentMin {
</span><span class='line'>              currentMin = value
</span><span class='line'>          } else if value &gt; currentMax {
</span><span class='line'>              currentMax = value
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>      return (currentMin, currentMax)
</span><span class='line'>  }&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  let bounds = minMax([8, -6, 2, 109, 3, 71])
</span><span class='line'>  println("min is \(bounds.min) and max is \(bounds.max)")
</span><span class='line'>  // prints "min is -6 and max is 109"
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;Optional Tuple Return Types</span></code></pre></td></tr></table></div></figure>
      func minMax(array: [Int]) -> (min: Int, max: Int)? {
          if array.isEmpty { return nil }
          var currentMin = array[0]
          var currentMax = array[0]
          for value in array[1..&lt;array.count] {
              if value &lt; currentMin {
                  currentMin = value
              } else if value > currentMax {
                  currentMax = value
              }
          }
          return (currentMin, currentMax)
      }</p>

<pre><code>  if let bounds = minMax([8, -6, 2, 109, 3, 71]) {
      println("min is \(bounds.min) and max is \(bounds.max)")
  }
  // prints "min is -6 and max is 109"
</code></pre>

<p>&#8220;`</p></li>
<li><p>External parameter Names
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  func someFunction(externalParameterName localParameterName: Int) {
</span><span class='line'>      // function body goes here, and can use localParameterName
</span><span class='line'>      // to refer to the argument value for that parameter
</span><span class='line'>  }&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  func join(string s1: String, toString s2: String, withJoiner joiner: String)
</span><span class='line'>  -&gt; String {
</span><span class='line'>      return s1 + joiner + s2
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  join(string: "hello", toString: "world", withJoiner: ", ")
</span><span class='line'>  // returns "hello, world"
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;Shorthand External Parameter Names</span></code></pre></td></tr></table></div></figure>
      func containsCharacter(#string: String, #characterToFind: Character) -> Bool {
          for character in string {
              if character == characterToFind {
                  return true
              }
          }
          return false
      }</p>

<pre><code>  let containsAVee = containsCharacter(string: "aardvark", characterToFind: "v")
  // containsAVee equals true, because "aardvark" contains a "v"
</code></pre>

<p>&#8220;`</p></li>
<li><p>Default Parameter Values
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  func join(string s1: String, toString s2: String,
</span><span class='line'>      withJoiner joiner: String = &ldquo; &rdquo;) -&gt; String {
</span><span class='line'>          return s1 + joiner + s2
</span><span class='line'>  }&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  join(string: "hello", toString: "world", withJoiner: "-")
</span><span class='line'>  // returns "hello-world"
</span><span class='line'>
</span><span class='line'>  join(string: "hello", toString: "world")
</span><span class='line'>  // returns "hello world"
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;External Names for Parameters with Default Values (automatically generated)</span></code></pre></td></tr></table></div></figure>
      func join(s1: String, s2: String, joiner: String = &ldquo; &rdquo;) -> String {
          return s1 + joiner + s2
      }</p>

<pre><code>  join("hello", "world", joiner: "-")
  // returns "hello-world"
</code></pre>

<p>&#8220;`</p></li>
<li><p>Variadic Parameters (varargs)
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  // Note that Double&hellip; is different from [Double]&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  func arithmeticMean(numbers: Double...) -&gt; Double {
</span><span class='line'>  var total: Double = 0
</span><span class='line'>  for number in numbers {
</span><span class='line'>      total += number
</span><span class='line'>  }
</span><span class='line'>  return total / Double(numbers.count)
</span><span class='line'>  }
</span><span class='line'>  arithmeticMean(1, 2, 3, 4, 5)
</span><span class='line'>  // returns 3.0, which is the arithmetic mean of these five numbers
</span><span class='line'>  arithmeticMean(3, 8.25, 18.75)
</span><span class='line'>  // returns 10.0, which is the arithmetic mean of these three numbers
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;Constant and Variable Parameters
</span><span class='line'>&lt;code&gt;
</span><span class='line'>  func alignRight(var string: String, count: Int, pad: Character) -&gt; String {
</span><span class='line'>      let amountToPad = count - countElements(string)
</span><span class='line'>      if amountToPad &lt; 1 {
</span><span class='line'>          return string
</span><span class='line'>      }
</span><span class='line'>      let padString = String(pad)
</span><span class='line'>      for _ in 1...amountToPad {
</span><span class='line'>          string = padString + string
</span><span class='line'>      }
</span><span class='line'>      return string
</span><span class='line'>  }
</span><span class='line'>  let originalString = "hello"
</span><span class='line'>  let paddedString = alignRight(originalString, 10, "-")
</span><span class='line'>  // paddedString is equal to "-----hello"
</span><span class='line'>  // originalString is still equal to "hello"
</span><span class='line'>&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;In-Out Parameters</span></code></pre></td></tr></table></div></figure>
      // Variable parameters, as described above, can only be changed within the function itself. If you want a function to modify a parameter’s value, and you want those changes to persist after the function call has ended, define that parameter as an in-out parameter instead.</p>

<pre><code>  func swapTwoInts(inout a: Int, inout b: Int) {
      let temporaryA = a
      a = b
      b = temporaryA
  }

  var someInt = 3
  var anotherInt = 107
  swapTwoInts(&amp;someInt, &amp;anotherInt)
  println("someInt is now \(someInt), and anotherInt is now \(anotherInt)")
  // prints "someInt is now 107, and anotherInt is now 3"
</code></pre>

<p>&#8220;`</p></li>
<li><p>Function Type
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  func addTwoInts(a: Int, b: Int) -&gt; Int {
</span><span class='line'>      return a + b
</span><span class='line'>  }
</span><span class='line'>  func multiplyTwoInts(a: Int, b: Int) -&gt; Int {
</span><span class='line'>      return a * b
</span><span class='line'>  }&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  var mathFunction: (Int, Int) -&gt; Int = addTwoInts
</span><span class='line'>
</span><span class='line'>  println("Result: \(mathFunction(2, 3))")
</span><span class='line'>  // prints "Result: 5"
</span><span class='line'>
</span><span class='line'>  mathFunction = multiplyTwoInts
</span><span class='line'>  println("Result: \(mathFunction(2, 3))")
</span><span class='line'>  // prints "Result: 6"
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;Function Types as Parameter Types
</span><span class='line'>&lt;code&gt;
</span><span class='line'>  func printMathResult(mathFunction: (Int, Int) -&gt; Int, a: Int, b: Int) {
</span><span class='line'>      println("Result: \(mathFunction(a, b))")
</span><span class='line'>  }
</span><span class='line'>  printMathResult(addTwoInts, 3, 5)
</span><span class='line'>  // prints "Result: 8"
</span><span class='line'>&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;Function Type as Return Types</span></code></pre></td></tr></table></div></figure>
      func stepForward(input: Int) -> Int {
          return input + 1
      }
      func stepBackward(input: Int) -> Int {
          return input - 1
      }</p>

<pre><code>  func chooseStepFunction(backwards: Bool) -&gt; (Int) -&gt; Int {
      return backwards ? stepBackward : stepForward
  }

  var currentValue = 3
  let moveNearerToZero = chooseStepFunction(currentValue &gt; 0)
  // moveNearerToZero now refers to the stepBackward() function

  println("Counting to zero:")
  // Counting to zero:
  while currentValue != 0 {
      println("\(currentValue)... ")
      currentValue = moveNearerToZero(currentValue)
  }
  println("zero!")
  // 3...
  // 2...
  // 1...
  // zero!
</code></pre>

<p>&#8220;`</p></li>
<li>Nested Functions
<code>
      func chooseStepFunction(backwards: Bool) -&gt; (Int) -&gt; Int {
          func stepForward(input: Int) -&gt; Int { return input + 1 }
          func stepBackward(input: Int) -&gt; Int { return input - 1 }
          return backwards ? stepBackward : stepForward
      }
      var currentValue = -4
      let moveNearerToZero = chooseStepFunction(currentValue &gt; 0)
      // moveNearerToZero now refers to the nested stepForward() function
      while currentValue != 0 {
          println("\(currentValue)... ")
          currentValue = moveNearerToZero(currentValue)
      }
      println("zero!")
      // -4...
      // -3...
      // -2...
      // -1...
      // zero!
</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Swift Part 5 - Control Flow]]></title>
    <link href="http://zh-wang.github.io/blog/2014/09/19/learning-swift-part-5/"/>
    <updated>2014-09-19T15:14:08+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/09/19/learning-swift-part-5</id>
    <content type="html"><![CDATA[<p>Just some notes after reading Apple&rsquo;s official online guide.
Most code are from the guide, with some modification by me.</p>

<p>Tuple in switch statement is interesting.</p>

<h2>===== Full Notes =====</h2>

<h3>Control Flow</h3>

<p><figure class='code'><figcaption><span>Time to be Awesome - awesome.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Awesome</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">unless</span> <span class="n">lame</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>For-In</h3>

<ul>
<li>Sample
<code>swift
      for index in 1...5 {
          println("\(index) times 5 is \(index * 5)")
      }
      // 1 times 5 is 5
      // 2 times 5 is 10
      // 3 times 5 is 15
      // 4 times 5 is 20
      // 5 times 5 is 25
</code></li>
<li>if no need of value from the range
<code>
      let base = 3
      let power = 10
      var answer = 1
      for _ in 1...power {
          answer *= base
      }
      println("\(base) to the power of \(power) is \(answer)")
      // prints "3 to the power of 10 is 59049"
</code></li>
<li>Use in array
<code>
      let names = ["Anna", "Alex", "Brian", "Jack"]
      for name in names {
          println("Hello, \(name)!")
      }
      // Hello, Anna!
      // Hello, Alex!
      // Hello, Brian!
      // Hello, Jack!
</code></li>
<li>Use in dictionary
<code>
      let numberOfLegs = ["spider": 8, "ant": 6, "cat": 4]
      for (animalName, legCount) in numberOfLegs {
          println("\(animalName)s have \(legCount) legs")
      }
      // spiders have 8 legs
      // cats have 4 legs
      // ants have 6 legs
</code></li>
<li>Use in string
<code>
      for character in "Hello" {
          println(character)
      }
      // H
      // e
      // l
      // l
      // o
</code></li>
</ul>


<!-- more -->


<ul>
<li>For

<ul>
<li>Sample
<code>
      for var index = 0; index &lt; 3; ++index {
          println("index is \(index)")
      }
      // index is 0
      // index is 1
      // index is 2
</code></li>
<li>Index is only accessible in the loop
<code>
      var index: Int
      for index = 0; index &lt; 3; ++index {
          println("index is \(index)")
      }
      // index is 0
      // index is 1
      // index is 2
      println("The loop statements were executed \(index) times")
      // prints "The loop statements were executed 3 times"
</code></li>
</ul>
</li>
<li>While Loops

<ul>
<li><p>Snakes and Ladders
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  let finalSquare = 25
</span><span class='line'>  var board = &lt;a href="count:%20finalSquare%20+%201,%20repeatedValue:%200"&gt;Int&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
</span><span class='line'>  board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08
</span><span class='line'>
</span><span class='line'>  var square = 0
</span><span class='line'>  var diceRoll = 0
</span><span class='line'>  while square &lt; finalSquare {
</span><span class='line'>  // roll the dice
</span><span class='line'>  if ++diceRoll == 7 { diceRoll = 1 }
</span><span class='line'>  // move by the rolled amount
</span><span class='line'>  square += diceRoll
</span><span class='line'>  if square &lt; board.count {
</span><span class='line'>      // if we're still on the board, move up or down for a snake or a ladder
</span><span class='line'>      square += board[square]
</span><span class='line'>  }
</span><span class='line'>  }
</span><span class='line'>  println("Game over!")
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;Do-While
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;Snakes and Ladders</span></code></pre></td></tr></table></div></figure>
      let finalSquare = 25
      var board = <a href="count:%20finalSquare%20+%201,%20repeatedValue:%200">Int</a>
      board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
      board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08
      var square = 0
      var diceRoll = 0</p>

<pre><code>  do {
      // move up or down for a snake or ladder
      square += board[square]
      // roll the dice
      if ++diceRoll == 7 { diceRoll = 1 }
      // move by the rolled amount
      square += diceRoll
  } while square &lt; finalSquare
  println("Game over!")
</code></pre>

<p>&#8220;`</p></li>
</ul>
</li>
<li>If

<ul>
<li><p>Sample
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  var temperatureInFahrenheit = 30
</span><span class='line'>  if temperatureInFahrenheit &lt;= 32 {
</span><span class='line'>      println(&ldquo;It&rsquo;s very cold. Consider wearing a scarf.&rdquo;)
</span><span class='line'>  }
</span><span class='line'>  // prints &ldquo;It&rsquo;s very cold. Consider wearing a scarf.&rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  temperatureInFahrenheit = 40
</span><span class='line'>  if temperatureInFahrenheit &lt;= 32 {
</span><span class='line'>  println("It's very cold. Consider wearing a scarf.")
</span><span class='line'>  } else {
</span><span class='line'>  println("It's not that cold. Wear a t-shirt.")
</span><span class='line'>  }
</span><span class='line'>  // prints "It's not that cold. Wear a t-shirt."
</span><span class='line'>
</span><span class='line'>  temperatureInFahrenheit = 90
</span><span class='line'>  if temperatureInFahrenheit &lt;= 32 {
</span><span class='line'>  println("It's very cold. Consider wearing a scarf.")
</span><span class='line'>  } else if temperatureInFahrenheit &gt;= 86 {
</span><span class='line'>  println("It's really warm. Don't forget to wear sunscreen.")
</span><span class='line'>  } else {
</span><span class='line'>  println("It's not that cold. Wear a t-shirt.")
</span><span class='line'>  }
</span><span class='line'>  // prints "It's really warm. Don't forget to wear sunscreen."
</span><span class='line'>
</span><span class='line'>  temperatureInFahrenheit = 72
</span><span class='line'>  if temperatureInFahrenheit &lt;= 32 {
</span><span class='line'>  println("It's very cold. Consider wearing a scarf.")
</span><span class='line'>  } else if temperatureInFahrenheit &gt;= 86 {
</span><span class='line'>  println("It's really warm. Don't forget to wear sunscreen.")
</span><span class='line'>  }
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;Switch
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;Sample
</span><span class='line'>&lt;code&gt;
</span><span class='line'>  switch some value to consider {
</span><span class='line'>  case value 1:
</span><span class='line'>      respond to value 1
</span><span class='line'>  case value 2,
</span><span class='line'>  value 3:
</span><span class='line'>      respond to value 2 or 3
</span><span class='line'>  default:
</span><span class='line'>      otherwise, do something else
</span><span class='line'>  }
</span><span class='line'>&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;Use with char
</span><span class='line'>&lt;code&gt;
</span><span class='line'>  let someCharacter: Character = "e"
</span><span class='line'>  switch someCharacter {
</span><span class='line'>  case "a", "e", "i", "o", "u":
</span><span class='line'>      println("\(someCharacter) is a vowel")
</span><span class='line'>  case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m",
</span><span class='line'>  "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z":
</span><span class='line'>      println("\(someCharacter) is a consonant")
</span><span class='line'>  default:
</span><span class='line'>      println("\(someCharacter) is not a vowel or a consonant")
</span><span class='line'>  }
</span><span class='line'>  // prints "e is a vowel"
</span><span class='line'>&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;No Implicit Fallthrough&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  In contrast with switch statements in C and Objective-C, switch statements in Swift do not fall through the bottom of each case and into the next one by default. Instead, the entire switch statement finishes its execution as soon as the first matching switch case is completed, without requiring an explicit break statement. This makes the switch statement safer and easier to use than in C, and avoids executing more than one switch case by mistake.&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;Bad case
</span><span class='line'>&lt;code&gt;
</span><span class='line'>  let anotherCharacter: Character = "a"
</span><span class='line'>  switch anotherCharacter {
</span><span class='line'>  case "a":                       // Each case must contain at least one executable statement.
</span><span class='line'>  case "A":
</span><span class='line'>      println("The letter A")
</span><span class='line'>  default:
</span><span class='line'>      println("Not the letter A")
</span><span class='line'>  }
</span><span class='line'>  // this will report a compile-time error
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;Range Matching
</span><span class='line'>&lt;code&gt;
</span><span class='line'>  let count = 3_000_000_000_000
</span><span class='line'>  let countedThings = "stars in the Milky Way"
</span><span class='line'>  var naturalCount: String
</span><span class='line'>  switch count {
</span><span class='line'>  case 0:
</span><span class='line'>      naturalCount = "no"
</span><span class='line'>  case 1...3:
</span><span class='line'>      naturalCount = "a few"
</span><span class='line'>  case 4...9:
</span><span class='line'>      naturalCount = "several"
</span><span class='line'>  case 10...99:
</span><span class='line'>      naturalCount = "tens of"
</span><span class='line'>  case 100...999:
</span><span class='line'>      naturalCount = "hundreds of"
</span><span class='line'>  case 1000...999_999:
</span><span class='line'>      naturalCount = "thousands of"
</span><span class='line'>  default:
</span><span class='line'>      naturalCount = "millions and millions of"
</span><span class='line'>  }
</span><span class='line'>&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;Tuple
</span><span class='line'>&lt;code&gt;
</span><span class='line'>  let somePoint = (1, 1)
</span><span class='line'>  switch somePoint {
</span><span class='line'>  case (0, 0):
</span><span class='line'>      println("(0, 0) is at the origin")
</span><span class='line'>  case (_, 0):
</span><span class='line'>      println("(\(somePoint.0), 0) is on the x-axis")
</span><span class='line'>  case (0, _):
</span><span class='line'>      println("(0, \(somePoint.1)) is on the y-axis")
</span><span class='line'>  case (-2...2, -2...2):
</span><span class='line'>      println("(\(somePoint.0), \(somePoint.1)) is inside the box")
</span><span class='line'>  default:
</span><span class='line'>      println("(\(somePoint.0), \(somePoint.1)) is outside of the box")
</span><span class='line'>  }
</span><span class='line'>  // prints "(1, 1) is inside the box"
</span><span class='line'>&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;Value Bindings
</span><span class='line'>&lt;code&gt;
</span><span class='line'>  let anotherPoint = (2, 0)
</span><span class='line'>  switch anotherPoint {
</span><span class='line'>  case (let x, 0):
</span><span class='line'>      println("on the x-axis with an x value of \(x)")
</span><span class='line'>  case (0, let y):
</span><span class='line'>      println("on the y-axis with a y value of \(y)")
</span><span class='line'>  case let (x, y):
</span><span class='line'>      println("somewhere else at (\(x), \(y))")
</span><span class='line'>  }
</span><span class='line'>  // prints "on the x-axis with an x value of 2"
</span><span class='line'>&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;Where
</span><span class='line'>&lt;code&gt;
</span><span class='line'>  let yetAnotherPoint = (1, -1)
</span><span class='line'>  switch yetAnotherPoint {
</span><span class='line'>  case let (x, y) where x == y:
</span><span class='line'>      println("(\(x), \(y)) is on the line x == y")
</span><span class='line'>  case let (x, y) where x == -y:
</span><span class='line'>      println("(\(x), \(y)) is on the line x == -y")
</span><span class='line'>  case let (x, y):
</span><span class='line'>      println("(\(x), \(y)) is just some arbitrary point")
</span><span class='line'>  }
</span><span class='line'>  // prints "(1, -1) is on the line x == -y"
</span><span class='line'>&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;Control Transfer Statements
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;Continue&lt;br/&gt;
</span><span class='line'>The continue statement tells a loop to stop what it is doing and start again at the beginning of the next iteration through the loop. It says “I am done with the current loop iteration” without leaving the loop altogether.
</span><span class='line'>&lt;code&gt;
</span><span class='line'>  let puzzleInput = "great minds think alike"
</span><span class='line'>  var puzzleOutput = ""
</span><span class='line'>  for character in puzzleInput {
</span><span class='line'>      switch character {
</span><span class='line'>      case "a", "e", "i", "o", "u", " ":
</span><span class='line'>          continue
</span><span class='line'>      default:
</span><span class='line'>          puzzleOutput.append(character)
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>  println(puzzleOutput)
</span><span class='line'>  // prints "grtmndsthnklk"
</span><span class='line'>&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;Break
</span><span class='line'>&lt;code&gt;
</span><span class='line'>  let numberSymbol: Character = "三"  // Simplified Chinese for the number 3
</span><span class='line'>  var possibleIntegerValue: Int?
</span><span class='line'>  switch numberSymbol {
</span><span class='line'>  case "1", "١", "一", "๑":
</span><span class='line'>      possibleIntegerValue = 1
</span><span class='line'>  case "2", "٢", "二", "๒":
</span><span class='line'>      possibleIntegerValue = 2
</span><span class='line'>  case "3", "٣", "三", "๓":
</span><span class='line'>      possibleIntegerValue = 3
</span><span class='line'>  case "4", "٤", "四", "๔":
</span><span class='line'>      possibleIntegerValue = 4
</span><span class='line'>  default:
</span><span class='line'>      break
</span><span class='line'>  }
</span><span class='line'>  if let integerValue = possibleIntegerValue {
</span><span class='line'>      println("The integer value of \(numberSymbol) is \(integerValue).")
</span><span class='line'>  } else {
</span><span class='line'>      println("An integer value could not be found for \(numberSymbol).")
</span><span class='line'>  }
</span><span class='line'>  // prints "The integer value of 三 is 3."
</span><span class='line'>&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;Explicit Fallthrough&lt;br/&gt;
</span><span class='line'>The fallthrough keyword does not check the case conditions for the switch case that it causes execution to fall into. The fallthrough keyword simply causes code execution to move directly to the statements inside the next case (or default case) block, as in C’s standard switch statement behavior.
</span><span class='line'>&lt;code&gt;
</span><span class='line'>  let integerToDescribe = 5
</span><span class='line'>  var description = "The number \(integerToDescribe) is"
</span><span class='line'>  switch integerToDescribe {
</span><span class='line'>  case 2, 3, 5, 7, 11, 13, 17, 19:
</span><span class='line'>      description += " a prime number, and also"
</span><span class='line'>      fallthrough
</span><span class='line'>  default:
</span><span class='line'>      description += " an integer."
</span><span class='line'>  }
</span><span class='line'>  println(description)
</span><span class='line'>  // prints "The number 5 is a prime number, and also an integer."
</span><span class='line'>&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;Labeled Statements
</span><span class='line'>&lt;code&gt;
</span><span class='line'>  gameLoop: while square != finalSquare {
</span><span class='line'>      if ++diceRoll == 7 { diceRoll = 1 }
</span><span class='line'>      switch square + diceRoll {
</span><span class='line'>      case finalSquare:
</span><span class='line'>          // diceRoll will move us to the final square, so the game is over
</span><span class='line'>          break gameLoop
</span><span class='line'>      case let newSquare where newSquare &gt; finalSquare:
</span><span class='line'>          // diceRoll will move us beyond the final square, so roll again
</span><span class='line'>          continue gameLoop
</span><span class='line'>      default:
</span><span class='line'>          // this is a valid move, so find out its effect
</span><span class='line'>          square += diceRoll
</span><span class='line'>          square += board[square]
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>  println("Game over!")
</span><span class='line'>&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[Learning Swift Part 4 - Strings and Characters]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://zh-wang.github.io/blog/2014/09/08/learning-swift-part-4/"/&gt;
</span><span class='line'>&lt;updated&gt;2014-09-08T18:03:31+09:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://zh-wang.github.io/blog/2014/09/08/learning-swift-part-4&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;Just some notes after reading Apple&rsquo;s official online guide.
</span><span class='line'>Most code are from the guide, with some modification by me.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;===== Full Notes =====&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;Strings and Characters&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;String Literals
</span><span class='line'>&lt;code&gt;swift
</span><span class='line'>  let someString = "..."
</span><span class='line'>&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;Initializing an Empty String</span></code></pre></td></tr></table></div></figure>
      var emptyString = &ldquo;&rdquo;               // empty string literal
      var anotherEmptyString = String()  // initializer syntax
      // these two strings are both empty, and are equivalent to each other</p>

<pre><code>  if emptyString.isEmpty {
      println("Nothing to see here")
  }
</code></pre>

<p>&#8220;`</p></li>
<li><p>String Mutability
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  var variableString = &ldquo;Horse&rdquo;
</span><span class='line'>  variableString += &ldquo; and carriage&rdquo;
</span><span class='line'>  // variableString is now &ldquo;Horse and carriage&rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  let constantString = "Highlander"
</span><span class='line'>  constantString += " and another Highlander"
</span><span class='line'>  // this reports a compile-time error - a constant string cannot be modified
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;Strings Are Value Types&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;Swift’s String type is a value type. If you create a new String value, that String value is copied when it is passed to a function or method, or when it is assigned to a constant or variable. In each case, a new copy of the existing String value is created, and the new copy is passed or assigned, not the original version.&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;NSString in obj-c is NOT value type.&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;!-- more --&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;Working with Characters</span></code></pre></td></tr></table></div></figure>
      for character in &ldquo;Dog!🐶&rdquo; {
          println(character)
      }</p>

<pre><code>  // a single character
  let yenSign: Character = "¥"
</code></pre>

<p>&#8220;`</p></li>
<li><p>Concatenating Strings and Characters
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  let string1 = &ldquo;hello&rdquo;
</span><span class='line'>  let string2 = &ldquo; there&rdquo;
</span><span class='line'>  var welcome = string1 + string2
</span><span class='line'>  // welcome now equals &ldquo;hello there&rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  var instruction = "look over"
</span><span class='line'>  instruction += string2
</span><span class='line'>  // instruction now equals "look over there"
</span><span class='line'>
</span><span class='line'>  let exclamationMark: Character = "!"
</span><span class='line'>  welcome.append(exclamationMark)
</span><span class='line'>  // welcome now equals "hello there!"
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;String Interpolation
</span><span class='line'>&lt;code&gt;
</span><span class='line'>  let multiplier = 3
</span><span class='line'>  let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"
</span><span class='line'>  // message is "3 times 2.5 is 7.5"
</span><span class='line'>&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;Unicode Scalars&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;Special Unicode Characters in String Literals
</span><span class='line'>&lt;code&gt;
</span><span class='line'>  let wiseWords = "\"Imagination is more important than knowledge\" - Einstein"
</span><span class='line'>  // "Imagination is more important than knowledge" - Einstein
</span><span class='line'>  let dollarSign = "\u{24}"        // $,  Unicode scalar U+0024
</span><span class='line'>  let blackHeart = "\u{2665}"      // ♥,  Unicode scalar U+2665
</span><span class='line'>  let sparklingHeart = "\u{1F496}" // 💖, Unicode scalar U+1F496
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;Extended Grapheme Clusters</span></code></pre></td></tr></table></div></figure>
      let eAcute: Character = &ldquo;\u{E9}&rdquo;                         // é
      let combinedEAcute: Character = &ldquo;\u{65}\u{301}&rdquo;          // e followed by ́
      // eAcute is é, combinedEAcute is é</p>

<pre><code>  let precomposed: Character = "\u{D55C}"                  // 한
  let decomposed: Character = "\u{1112}\u{1161}\u{11AB}"   // ᄒ, ᅡ, ᆫ
  // precomposed is 한, decomposed is 한

  let enclosedEAcute: Character = "\u{E9}\u{20DD}"
  // enclosedEAcute is é⃝
</code></pre>

<p>&#8220;`</p></li>
<li><p>Counting Characters
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  let unusualMenagerie = &ldquo;Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪&rdquo;
</span><span class='line'>  println(&ldquo;unusualMenagerie has (countElements(unusualMenagerie)) characters&rdquo;)
</span><span class='line'>  // prints &ldquo;unusualMenagerie has 40 characters&rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  var word = "cafe"
</span><span class='line'>  println("the number of characters in \(word) is \(countElements(word))
</span><span class='line'>  // prints "the number of characters in cafe is 4"
</span><span class='line'>
</span><span class='line'>  word += "\u{301}"    // COMBINING ACUTE ACCENT, U+0301
</span><span class='line'>
</span><span class='line'>  println("the number of characters in \(word) is \(countElements(word))
</span><span class='line'>  // prints "the number of characters in café is 4"
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;String and Character Equality&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;        let quotation = "We're a lot alike, you and I."
</span><span class='line'>    let sameQuotation = "We're a lot alike, you and I."
</span><span class='line'>    if quotation == sameQuotation {
</span><span class='line'>        println("These two strings are considered equal")
</span><span class='line'>    }
</span><span class='line'>    // prints "These two strings are considered equal"
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;Two String values (or two Character values) are considered equal if their extended grapheme clusters are canonically equivalent.&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;        // "Voulez-vous un café?" using LATIN SMALL LETTER E WITH ACUTE
</span><span class='line'>    let eAcuteQuestion = "Voulez-vous un caf\u{E9}?"
</span><span class='line'>
</span><span class='line'>    // "Voulez-vous un café?" using LATIN SMALL LETTER E and COMBINING ACUTE ACCENT
</span><span class='line'>    let combinedEAcuteQuestion = "Voulez-vous un caf\u{65}\u{301}?"
</span><span class='line'>
</span><span class='line'>    if eAcuteQuestion == combinedEAcuteQuestion {
</span><span class='line'>        println("These two strings are considered equal")
</span><span class='line'>    }
</span><span class='line'>    // prints "These two strings are considered equal"
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;Conversely, LATIN CAPITAL LETTER A (U+0041, or &ldquo;A&rdquo;), as used in English, is not equivalent to CYRILLIC CAPITAL LETTER A (U+0410, or &ldquo;А&rdquo;).</span></code></pre></td></tr></table></div></figure>
      let latinCapitalLetterA: Character = &ldquo;\u{41}&rdquo;</p>

<pre><code>  let cyrillicCapitalLetterA: Character = "\u{0410}"

  if latinCapitalLetterA != cyrillicCapitalLetterA {
      println("These two characters are not equivalent")
  }
  // prints "These two characters are not equivalent"
</code></pre>

<p>&#8220;`</p></li>
<li><p>Prefix and Suffix Equality
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  let romeoAndJuliet = [
</span><span class='line'>      &ldquo;Act 1 Scene 1: Verona, A public place&rdquo;,
</span><span class='line'>      &ldquo;Act 1 Scene 2: Capulet&rsquo;s mansion&rdquo;,
</span><span class='line'>      &ldquo;Act 1 Scene 3: A room in Capulet&rsquo;s mansion&rdquo;,
</span><span class='line'>      &ldquo;Act 1 Scene 4: A street outside Capulet&rsquo;s mansion&rdquo;,
</span><span class='line'>      &ldquo;Act 1 Scene 5: The Great Hall in Capulet&rsquo;s mansion&rdquo;,
</span><span class='line'>      &ldquo;Act 2 Scene 1: Outside Capulet&rsquo;s mansion&rdquo;,
</span><span class='line'>      &ldquo;Act 2 Scene 2: Capulet&rsquo;s orchard&rdquo;,
</span><span class='line'>      &ldquo;Act 2 Scene 3: Outside Friar Lawrence&rsquo;s cell&rdquo;,
</span><span class='line'>      &ldquo;Act 2 Scene 4: A street in Verona&rdquo;,
</span><span class='line'>      &ldquo;Act 2 Scene 5: Capulet&rsquo;s mansion&rdquo;,
</span><span class='line'>      &ldquo;Act 2 Scene 6: Friar Lawrence&rsquo;s cell&rdquo;
</span><span class='line'>  ]&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  var act1SceneCount = 0
</span><span class='line'>  for scene in romeoAndJuliet {
</span><span class='line'>  if scene.hasPrefix("Act 1 ") {
</span><span class='line'>      ++act1SceneCount
</span><span class='line'>  }
</span><span class='line'>  }
</span><span class='line'>  println("There are \(act1SceneCount) scenes in Act 1")
</span><span class='line'>  // prints "There are 5 scenes in Act 1"
</span><span class='line'>
</span><span class='line'>  var mansionCount = 0
</span><span class='line'>  var cellCount = 0
</span><span class='line'>  for scene in romeoAndJuliet {
</span><span class='line'>  if scene.hasSuffix("Capulet's mansion") {
</span><span class='line'>      ++mansionCount
</span><span class='line'>  } else if scene.hasSuffix("Friar Lawrence's cell") {
</span><span class='line'>      ++cellCount
</span><span class='line'>  }
</span><span class='line'>  }
</span><span class='line'>  println("\(mansionCount) mansion scenes; \(cellCount) cell scenes")
</span><span class='line'>  // prints "6 mansion scenes; 2 cell scenes"
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;A collection of UTF-8 code units (accessed with the string’s utf8 property)&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;A collection of UTF-16 code units (accessed with the string’s utf16 property)&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;A collection of 21-bit Unicode scalar values, equivalent to the string’s UTF-32 encoding form (accessed with the string’s unicodeScalars property)&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;UTF-8 Representation</span></code></pre></td></tr></table></div></figure>
      let dogString = &ldquo;Dog‼🐶&rdquo;</p>

<pre><code>  for codeUnit in dogString.utf8 {
      print("\(codeUnit) ")
  }
  print("\n")
  // 68 111 103 226 128 188 240 159 144 182
</code></pre>

<p>&#8220;`</p></li>
<li>UTF-16 Representation
<code>
      for codeUnit in dogString.utf16 {
          print("\(codeUnit) ")
      }
      print("\n")
      // 68 111 103 8252 55357 56374
</code></li>
<li><p>Unicode Scalar Representation
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  for scalar in dogString.unicodeScalars {
</span><span class='line'>      print(&ldquo;(scalar.value) &rdquo;)
</span><span class='line'>  }
</span><span class='line'>  print(&ldquo;\n&rdquo;)
</span><span class='line'>  // 68 111 103 8252 128054&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  for scalar in dogString.unicodeScalars {
</span><span class='line'>  println("\(scalar) ")
</span><span class='line'>  }
</span><span class='line'>  // D
</span><span class='line'>  // o
</span><span class='line'>  // g
</span><span class='line'>  // ‼
</span><span class='line'>  // 🐶
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[Learning Swift Part 3 - Basic Operators]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://zh-wang.github.io/blog/2014/09/05/learning-swift-part-3/"/&gt;
</span><span class='line'>&lt;updated&gt;2014-09-05T17:59:28+09:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://zh-wang.github.io/blog/2014/09/05/learning-swift-part-3&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;Just some notes after reading Apple&rsquo;s official online guide.
</span><span class='line'>Most code are from the guide, with some modification by me.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;===== Full Notes =====&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;Basic Operators&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;Terminology</span></code></pre></td></tr></table></div></figure>swift

<pre><code>  - Unary
  - Binary
  - Ternary (There is only one in a ? b :c)
</code></pre>

<p>&#8220;`</p></li>
<li><p>Assignment Operator
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>  <span class="c1">// Not a vaild assignment</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Arithmetic</span> <span class="n">Operators</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Not</span> <span class="n">allow</span> <span class="n">overflow</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">You</span> <span class="n">can</span> <span class="n">opt</span> <span class="k">in</span> <span class="n">to</span> <span class="n">value</span> <span class="n">overflow</span> <span class="n">behavior</span> <span class="n">by</span> <span class="n">using</span> <span class="n">Swift</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">overflow</span> <span class="n">operators</span> <span class="p">(</span><span class="n">such</span> <span class="kt">as</span> <span class="n">a</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">+</span> <span class="n">b</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">addition</span> <span class="kr">operator</span> <span class="kt">is</span> <span class="n">also</span> <span class="n">supported</span> <span class="k">for</span> <span class="o">&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="n">String</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;</span> <span class="n">concatenation</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">let</span> <span class="nl">dog</span><span class="p">:</span> <span class="n">Character</span> <span class="o">=</span> <span class="s">&quot;🐶&quot;</span>
</span><span class='line'>  <span class="k">let</span> <span class="nl">cow</span><span class="p">:</span> <span class="n">Character</span> <span class="o">=</span> <span class="s">&quot;🐮&quot;</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">dogCow</span> <span class="o">=</span> <span class="n">dog</span> <span class="o">+</span> <span class="n">cow</span>
</span><span class='line'>  <span class="c1">// dogCow is equal to &quot;🐶🐮&quot;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Remainder</span> <span class="n">Operator</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="mi">9</span> <span class="o">%</span> <span class="mi">4</span> <span class="c1">// equals 1</span>
</span><span class='line'>  <span class="o">-</span><span class="mi">9</span> <span class="o">%</span> <span class="mi">4</span> <span class="c1">// equals -1</span>
</span><span class='line'>  <span class="o">-</span><span class="mi">9</span> <span class="o">%</span> <span class="mi">4</span> <span class="c1">// equals -9 % -4</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span> <span class="n">more</span> <span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Floating</span><span class="o">-</span><span class="n">Point</span> <span class="n">Remainder</span> <span class="n">Calculations</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="mi">8</span> <span class="o">%</span> <span class="mf">2.5</span> <span class="c1">// equals 0.5</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Increment</span> <span class="n">and</span> <span class="n">Decrement</span> <span class="n">Operators</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="o">++</span><span class="n">a</span>
</span><span class='line'>  <span class="c1">// a and b are now both equal to 1</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="o">++</span>
</span><span class='line'>  <span class="c1">// a is now equal to 2, but c has been set to the pre-increment value of 1</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Unary</span> <span class="n">Minus</span> <span class="n">Operator</span> <span class="n">and</span> <span class="n">Unary</span> <span class="n">Plus</span> <span class="n">Operator</span>
</span></code></pre></td></tr></table></div></figure>
      let three = 3
      let minusThree = -three       // minusThree equals -3
      let plusThree = -minusThree   // plusThree equals 3, or &ldquo;minus minus three&rdquo;</p>

<pre><code>  let minusSix = -6
  let alsoMinusSix = +minusSix  // alsoMinusSix equals -6
</code></pre>

<p>&#8220;`</p></li>
<li>Compound Assignment Operators
<code>
      var a = 1
      a += 2
</code></li>
<li>Comparison Operators
<code>
      Equal to (a == b)
      Not equal to (a != b)
      Greater than (a &gt; b)
      Less than (a &lt; b)
      Greater than or equal to (a &gt;= b)
      Less than or equal to (a &lt;= b)
</code></li>
<li><p>Nil Coalescing Operator</p>

<p>  The nil coalescing operator (a ?? b) unwraps an optional a if it contains a value, or returns a default value b if a is nil.</p></li>
</ul>


<pre><code>        let defaultColorName = "red"
        var userDefinedColorName: String?   // defaults to nil

        var colorNameToUse = userDefinedColorName ?? defaultColorName
        // userDefinedColorName is nil, so colorNameToUse is set to the default of "red"
</code></pre>

<ul>
<li>Range Operators
<code>
      for index in 1...5 {
          println("\(index) times 5 is \(index * 5)")
      }
      // 1 times 5 is 5
      // 2 times 5 is 10
      // 3 times 5 is 15
      // 4 times 5 is 20
      // 5 times 5 is 25
</code></li>
<li>Half-Open Range Operator
<code>
      let names = ["Anna", "Alex", "Brian", "Jack"]
      let count = names.count
      for i in 0..&lt;count {
          println("Person \(i + 1) is called \(names[i])")
      }
      // Person 1 is called Anna
      // Person 2 is called Alex
      // Person 3 is called Brian
      // Person 4 is called Jack&gt;
</code></li>
<li>Logical Operators
<code>
      Logical NOT (!a)
      Logical AND (a &amp;&amp; b)
      Logical OR (a || b)
      Logical NOT (!a)
</code></li>
<li>Combining Logical Operators
<code>
      if enteredDoorCode &amp;&amp; passedRetinaScan || hasDoorKey || knowsOverridePassword {
          println("Welcome!")
      } else {
          println("ACCESS DENIED")
      }
      // prints "Welcome!"
</code></li>
<li>Explicit Parentheses
<code>
      if (enteredDoorCode &amp;&amp; passedRetinaScan) || hasDoorKey || knowsOverridePassword {
          println("Welcome!")
      } else {
          println("ACCESS DENIED")
      }
      // prints "Welcome!"
</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Swift Part 2 - Basics]]></title>
    <link href="http://zh-wang.github.io/blog/2014/09/05/learning-swift-part-2/"/>
    <updated>2014-09-05T15:06:10+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/09/05/learning-swift-part-2</id>
    <content type="html"><![CDATA[<p>Just some notes after reading Apple&rsquo;s official online guide.
Most code are from the guide, with some modification by me.</p>

<h2>===== Full Notes =====</h2>

<h3>Basics</h3>

<ul>
<li><p>Declaring Constant and Variables
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>  <span class="k">let</span> <span class="n">maximumNumberOfLoginAttempts</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">currentLoginAttempt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">Type</span> <span class="n">Annotations</span>
</span></code></pre></td></tr></table></div></figure>
      var welcomeMessgae: String
      welcomeMessgae = &ldquo;Hello&rdquo;</p>

<pre><code>  var red, green, blue: Double // Multiple variables defined
</code></pre>

<p>&#8220;`</p></li>
<li>Naming Constants and Variables
<code>
      let π = 3.14159
      let 你好 = "你好世界"
      let 🐶🐮 = "dogcow"
</code></li>
</ul>


<!-- more -->


<h3>Integers</h3>

<ul>
<li>Integer Bounds
<code>
      let minValue = UInt8.min  // minValue is equal to 0, and is of type UInt8
      let maxValue = UInt8.max  // maxValue is equal to 255, and is of type UInt8
</code></li>
<li><p>Int</p>

<ul>
<li><p>On a 32-bit platform, Int is the same size as Int32.</p></li>
<li><p>On a 64-bit platform, Int is the same size as Int64.</p></li>
</ul>
</li>
<li><p>UInt</p>

<ul>
<li><p>On a 32-bit platform, UInt is the same size as UInt32.</p></li>
<li><p>On a 64-bit platform, UInt is the same size as UInt64.</p></li>
</ul>
</li>
<li><p>Floating-Point Numbers</p>

<ul>
<li>Double has a precision of at least 15 decimal digits, whereas the precision of Float can be as little as 6 decimal digits. T</li>
</ul>
</li>
<li><p>Type Safety and Type Inference</p></li>
<li><p>Numeric Literals
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>  <span class="k">let</span> <span class="n">decimalInteger</span> <span class="o">=</span> <span class="mi">17</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">binaryInteger</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b10001</span>       <span class="c1">// 17 in binary notation</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">octalInteger</span> <span class="o">=</span> <span class="mi">0</span><span class="n">o21</span>           <span class="c1">// 17 in octal notation</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">hexadecimalInteger</span> <span class="o">=</span> <span class="mh">0x11</span>     <span class="c1">// 17 in hexadecimal notation&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="mf">1.25e2</span>          <span class="c1">// 125.0</span>
</span><span class='line'>  <span class="mf">1.25e-2</span>         <span class="c1">// 0.0125</span>
</span><span class='line'>  <span class="mh">0xF</span><span class="n">p2</span>           <span class="c1">// 60.0 = 15 x 2 x 2</span>
</span><span class='line'>  <span class="mh">0xF</span><span class="n">p</span><span class="o">-</span><span class="mi">2</span>          <span class="c1">// 3.75 = 15 x 0.5 x 0.5</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Can have additional formatting literal (like Ruby)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">paddedDouble</span> <span class="o">=</span> <span class="mf">000123.456</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">oneMillion</span> <span class="o">=</span> <span class="mi">1</span><span class="n">_000_000</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">justOverOneMillion</span> <span class="o">=</span> <span class="mi">1</span><span class="n">_000_000</span><span class="mf">.000</span><span class="n">_000_1</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Integer</span> <span class="n">Conversion</span>
</span></code></pre></td></tr></table></div></figure>
      let cannotBeNegative: UInt8 = -1
      // UInt8 cannot store negative numbers, and so this will report an error
      let tooBig: Int8 = Int8.max + 1
      // Int8 cannot store a number larger than its maximum value,
      // and so this will also report an error</p>

<pre><code>  // conversion must be explicit

  let twoThousand: UInt16 = 2_000
  let one: UInt8 = 1
  let twoThousandAndOne = twoThousand + UInt16(one)
</code></pre>

<p>&#8220;`</p></li>
<li><p>Integer and Floating-Point Conversion
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>  <span class="k">let</span> <span class="n">three</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">pointOneFourOneFiveNine</span> <span class="o">=</span> <span class="mf">0.14159</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">pi</span> <span class="o">=</span> <span class="n">Double</span><span class="p">(</span><span class="n">three</span><span class="p">)</span> <span class="o">+</span> <span class="n">pointOneFourOneFiveNine</span>
</span><span class='line'>  <span class="c1">// pi equals 3.14159, and is inferred to be of type Double&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">let</span> <span class="n">integerPi</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="n">pi</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// integerPi equals 3, and is inferred to be of type Int</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="kt">Type</span> <span class="n">Aliases</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">typealias</span> <span class="n">AudioSample</span> <span class="o">=</span> <span class="kt">UInt16</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">maxAmplitudeFound</span> <span class="o">=</span> <span class="n">AudioSample</span><span class="p">.</span><span class="n">min</span>
</span><span class='line'>  <span class="c1">// maxAmplitudeFound is now 0</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">Boolean</span>
</span></code></pre></td></tr></table></div></figure>
      let orangesAreOrange = true
      let turnipsAreDelicious = false</p>

<pre><code>  if turnipsAreDelicious {
      println("Mmm, tasty turnips!")
  } else {
      println("Eww, turnips are horrible.")
  }
  // prints "Eww, turnips are horrible."
</code></pre>

<p>&#8220;`</p></li>
</ul>


<h3>Tuples</h3>

<ul>
<li>Sample
<code>
      let http404Error = (404, "Not Found")
      // http404Error is of type (Int, String), and equals (404, "Not Found")
</code></li>
<li>Decompose a tuple
<code>
      let (statusCode, statusMessage) = http404Error
      println("The status code is \(statusCode)")
      // prints "The status code is 404"
      println("The status message is \(statusMessage)")
      // prints "The status message is Not Found"
</code></li>
<li>Ignore some value when decomposing
<code>
      let (justTheStatusCode, _) = http404Error
      println("The status code is \(justTheStatusCode)")
      // prints "The status code is 404"
</code></li>
<li>Access by index
<code>
      println("The status code is \(http404Error.0)")
      // prints "The status code is 404"
      println("The status message is \(http404Error.1)")
      // prints "The status message is Not Found"
</code>

<h3>Optionals</h3></li>
<li>Sample
<code>
      let possibleNumber = "123"
      let convertedNumber = possibleNumber.toInt()
      // convertedNumber is inferred to be of type "Int?", or "optional Int"
</code></li>
<li><p>nil
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>  <span class="k">var</span> <span class="nl">serverResponseCode</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="mi">404</span>
</span><span class='line'>  <span class="c1">// serverResponseCode contains an actual Int value of 404</span>
</span><span class='line'>  <span class="n">serverResponseCode</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'>  <span class="c1">// serverResponseCode now contains no value&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">var</span> <span class="nl">surveyAnswer</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>  <span class="c1">// surveyAnswer is automatically set to nil</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">If</span> <span class="n">Statements</span> <span class="n">and</span> <span class="n">Forced</span> <span class="n">Unwrapping</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">convertedNumber</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">println</span><span class="p">(</span><span class="s">&quot;convertedNumber has an integer value of \(convertedNumber!).&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// prints &quot;convertedNumber has an integer value of 123.&quot;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Optional</span> <span class="n">Binding</span>
</span></code></pre></td></tr></table></div></figure>
      if let constantName = someOptional {
          statements
      }</p>

<pre><code>  if let actualNumber = possibleNumber.toInt() {
      println("\(possibleNumber) has an integer value of \(actualNumber)")
  } else {
      println("\(possibleNumber) could not be converted to an integer")
  }
  // prints "123 has an integer value of 123"
</code></pre>

<p>&#8220;`</p></li>
<li><p>Implicitly Unwrapping Optionals (Accessing an implicitly unwrapped optional when it does not contain a value will trigger a RTE)
&#8220;`
      let possibleString: String? = &ldquo;An optional string.&rdquo;
      let forcedString: String = possibleString! // requires an exclamation mark</p>

<pre><code>  let assumedString: String! = "An implicitly unwrapped optional string."
  let implicitString: String = assumedString // no need for an exclamation mark

  if assumedString != nil {
      println(assumedString)
  }
  // prints "An implicitly unwrapped optional string."

  if let definiteString = assumedString {
      println(definiteString)
  }
  // prints "An implicitly unwrapped optional string."
</code></pre>

<p>&#8220;`</p></li>
<li><p>Assertions</p></li>
<li><p>Debugging with Assertions
<code>
      let age = -3
      assert(age &gt;= 0, "A person's age cannot be less than zero")
      // this causes the assertion to trigger, because age is not &gt;= 0
</code></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
