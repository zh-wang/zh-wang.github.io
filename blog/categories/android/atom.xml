<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Welcome to FutureAppLaboratory]]></title>
  <link href="http://zh-wang.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://zh-wang.github.io/"/>
  <updated>2015-10-28T18:36:10+09:00</updated>
  <id>http://zh-wang.github.io/</id>
  <author>
    <name><![CDATA[viennakanon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Update UI With Observer]]></title>
    <link href="http://zh-wang.github.io/blog/2015/10/23/update-ui-with-observer/"/>
    <updated>2015-10-23T12:36:43+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/10/23/update-ui-with-observer</id>
    <content type="html"><![CDATA[<p>Sometimes I need to update UI from different <code>Fragment</code>s. But it seems that writing update method in each <code>Fragment</code> is absurd if I have a lot of <code>Fragment</code> to handle with.</p>

<p>Here is a better solution by using <code>Observer</code> pattern, IMO.</p>

<h3>Sample</h3>

<ol>
<li>Define an <code>EventObject</code>, which is a event(or message) will be passed to <code>Observer</code>.</li>
</ol>


<pre><code class="java">    public class ViewPagerTabsUIEventObject extends EventObject {

        public enum EventType {
            LABEL_ON,
            LABEL_OFF,
        }

        private EventType mEventType;

        public ViewPagerTabsUIEventObject(Object source, EventType eventType) {
            super(source);
            mEventType = eventType;
        }

        public static final String TAG = "ViewPagerTabsUIEventObject";

        public EventType getEventType() {
            return this.mEventType;
        }
    }
</code></pre>

<ol>
<li>Define an <code>Observable</code>, which will dispatch event or message to <code>Observer</code>.</li>
</ol>


<pre><code class="java">    public class ViewPagerTabsObservable extends Observable {

        public static final String TAG = "ViewPagerTabsObservable";

        public static ViewPagerTabsObservable sInstance = new ViewPagerTabsObservable();

        public ViewPagerTabsObservable() { }

        public void notice(ViewPagerTabsUIEventObject eventObject) {
            setChanged();
            notifyObservers(eventObject);
        }
    }
</code></pre>

<ol>
<li>Caller. Use a shared instance of <code>Observable</code> to dispatch event to <code>Observer</code>.</li>
</ol>


<pre><code class="java">    ViewPagerTabsUIEventObject eventObject = new ViewPagerTabsUIEventObject(this, EventType.LABEL_OFF);
    ViewPagerTabsObservable.sInstance.notice(eventObject);
</code></pre>

<ol>
<li>Receiver, which implements <code>Observer</code> interface.</li>
</ol>


<pre><code class="java">    public class ViewPagerTabs extends LinearLayout implements Observer {

        /* ... */

        @Override
        public void update(Observable observable, Object data) {
            // TODO Auto-generated method stub
            ViewPagerTabsUIEventObject eventObject = (ViewPagerTabsUIEventObject) data;
            switch (eventObject.getEventType()) {
            case LABEL_OFF:
                // do something
                break;
            case LABEL_ON:
                // do something else
                break;
            default:
                break;
            }
        }

    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove Border From Android Dialog]]></title>
    <link href="http://zh-wang.github.io/blog/2015/09/25/remove-border-from-android-dialog/"/>
    <updated>2015-09-25T12:53:24+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/09/25/remove-border-from-android-dialog</id>
    <content type="html"><![CDATA[<p>In android development, <code>Dialog</code> are <code>DialogFragment</code> are very common UI parts. They come with a default border, with black or white background depending on android system version.</p>

<p><img src="/images/2015_09_25_image02.png" title="dialog with border" alt="IMAGE_A" /></p>

<p>The default border, which is actually a <code>drawable</code>, is defined in android themes file.</p>

<pre><code>    &lt;style name="Theme.Dialog"&gt;
        &lt;item name="windowFrame"&gt;@null&lt;/item&gt;
        &lt;item name="windowTitleStyle"&gt;@style/DialogWindowTitle&lt;/item&gt;
        &lt;item name="windowBackground"&gt;@drawable/panel_background&lt;/item&gt;
        &lt;item name="windowIsFloating"&gt;true&lt;/item&gt;
        &lt;item name="windowContentOverlay"&gt;@null&lt;/item&gt;
        &lt;item name="windowAnimationStyle"&gt;@style/Animation.Dialog&lt;/item&gt;
        &lt;item name="windowSoftInputMode"&gt;stateUnspecified|adjustPan&lt;/item&gt;
        &lt;item name="windowCloseOnTouchOutside"&gt;@bool/config_closeDialogWhenTouchOutside&lt;/item&gt;
        &lt;item name="windowActionModeOverlay"&gt;true&lt;/item&gt;
        &lt;item name="colorBackgroundCacheHint"&gt;@null&lt;/item&gt;
        &lt;item name="textAppearance"&gt;@style/TextAppearance&lt;/item&gt;
        &lt;item name="textAppearanceInverse"&gt;@style/TextAppearance.Inverse&lt;/item&gt;
        &lt;item name="textColorPrimary"&gt;@color/primary_text_dark&lt;/item&gt;
        &lt;item name="textColorSecondary"&gt;@color/secondary_text_dark&lt;/item&gt;
        &lt;item name="textColorTertiary"&gt;@color/tertiary_text_dark&lt;/item&gt;
        &lt;item name="textColorPrimaryInverse"&gt;@color/primary_text_light&lt;/item&gt;
        &lt;item name="textColorSecondaryInverse"&gt;@color/secondary_text_light&lt;/item&gt;
        &lt;item name="textColorTertiaryInverse"&gt;@color/tertiary_text_light&lt;/item&gt;
        &lt;item name="textColorPrimaryDisableOnly"&gt;@color/primary_text_dark_disable_only&lt;/item&gt;
        &lt;item name="textColorPrimaryInverseDisableOnly"&gt;@color/primary_text_light_disable_only&lt;/item&gt;
        &lt;item name="textColorPrimaryNoDisable"&gt;@color/primary_text_dark_nodisable&lt;/item&gt;
        &lt;item name="textColorSecondaryNoDisable"&gt;@color/secondary_text_dark_nodisable&lt;/item&gt;
        &lt;item name="textColorPrimaryInverseNoDisable"&gt;@color/primary_text_light_nodisable&lt;/item&gt;
        &lt;item name="textColorSecondaryInverseNoDisable"&gt;@color/secondary_text_light_nodisable&lt;/item&gt;
        &lt;item name="textColorHint"&gt;@color/hint_foreground_dark&lt;/item&gt;
        &lt;item name="textColorHintInverse"&gt;@color/hint_foreground_light&lt;/item&gt;
        &lt;item name="textColorSearchUrl"&gt;@color/search_url_text&lt;/item&gt;
        &lt;item name="textAppearanceLarge"&gt;@style/TextAppearance.Large&lt;/item&gt;
        &lt;item name="textAppearanceMedium"&gt;@style/TextAppearance.Medium&lt;/item&gt;
        &lt;item name="textAppearanceSmall"&gt;@style/TextAppearance.Small&lt;/item&gt;
        &lt;item name="textAppearanceLargeInverse"&gt;@style/TextAppearance.Large.Inverse&lt;/item&gt;
        &lt;item name="textAppearanceMediumInverse"&gt;@style/TextAppearance.Medium.Inverse&lt;/item&gt;
        &lt;item name="textAppearanceSmallInverse"&gt;@style/TextAppearance.Small.Inverse&lt;/item&gt;
        &lt;item name="listPreferredItemPaddingLeft"&gt;10dip&lt;/item&gt;
        &lt;item name="listPreferredItemPaddingRight"&gt;10dip&lt;/item&gt;
        &lt;item name="listPreferredItemPaddingStart"&gt;10dip&lt;/item&gt;
        &lt;item name="listPreferredItemPaddingEnd"&gt;10dip&lt;/item&gt;
        &lt;item name="preferencePanelStyle"&gt;@style/PreferencePanel.Dialog&lt;/item&gt;
    &lt;/style&gt;
</code></pre>

<p><code>panel_background</code> in <code>&lt;item name="windowBackground"&gt;@drawable/panel_background&lt;/item&gt;</code> is a 9-patch image file.</p>

<p><img src="/images/2015_09_25_image03.png" title="border image file" alt="IMAGE_B" /></p>

<p>We can remove the border by defining <code>windowBackground</code> property, in our own custom style file, to replace the default one.</p>

<p>&#8220;`</p>



<pre><code>
Or, use the following one-line code solution.
</code></pre>

<p>dialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);
&#8220;`</p>

<p>Also, there are other dialog styles defined in android themes file.</p>

<pre><code>    &lt;!-- Variant of {@link Theme_Dialog} that does not include a frame (or background).
         The view hierarchy of the dialog is responsible for drawing all of
         its pixels. --&gt;
    &lt;style name="Theme.Dialog.NoFrame"&gt;
        &lt;item name="windowBackground"&gt;@color/transparent&lt;/item&gt;
        &lt;item name="windowFrame"&gt;@null&lt;/item&gt;
        &lt;item name="windowContentOverlay"&gt;@null&lt;/item&gt;
        &lt;item name="windowAnimationStyle"&gt;@null&lt;/item&gt;
        &lt;item name="backgroundDimEnabled"&gt;false&lt;/item&gt;
        &lt;item name="windowIsTranslucent"&gt;true&lt;/item&gt;
        &lt;item name="windowNoTitle"&gt;true&lt;/item&gt;
        &lt;item name="windowCloseOnTouchOutside"&gt;false&lt;/item&gt;
    &lt;/style&gt;

    &lt;!-- Default theme for alert dialog windows (on API level 10 and lower), which is used by the
         {@link android.app.AlertDialog} class.  This is basically a dialog
         but sets the background to empty so it can do two-tone backgrounds. --&gt;
    &lt;style name="Theme.Dialog.Alert"&gt;
        &lt;item name="windowBackground"&gt;@color/transparent&lt;/item&gt;
        &lt;item name="windowTitleStyle"&gt;@style/DialogWindowTitle&lt;/item&gt;
        &lt;item name="windowContentOverlay"&gt;@null&lt;/item&gt;
        &lt;item name="itemTextAppearance"&gt;@style/TextAppearance.Large.Inverse&lt;/item&gt;
        &lt;item name="textAppearanceListItem"&gt;@style/TextAppearance.Large.Inverse&lt;/item&gt;
        &lt;item name="textAppearanceListItemSmall"&gt;@style/TextAppearance.Large.Inverse&lt;/item&gt;
        &lt;item name="textAppearanceListItemSecondary"&gt;@style/TextAppearance.Small.Inverse&lt;/item&gt;
    &lt;/style&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enable Hide and Internal Classes in Android SDK]]></title>
    <link href="http://zh-wang.github.io/blog/2015/03/23/enable-hide-and-internal-classes-in-android-sdk/"/>
    <updated>2015-03-23T14:36:26+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/03/23/enable-hide-and-internal-classes-in-android-sdk</id>
    <content type="html"><![CDATA[<h2>Hide and Internal Classes</h2>

<p>During android development, you may need to access some method or classes which is not contained in official SDK.<br/>
For example, <code>dalvik.system.VMRuntime</code>, <code>com.android.internal.app.AlertController</code>, etc.<br/>
Although you can done with Java&rsquo;s reflection, it is not developer friendly.<br/>
Here is a more friendly way to do this.</p>

<h2>Preparation</h2>

<p>(I&rsquo;m working on a Mac. But I think procedure is similar if working on other OS.)</p>

<ol>
<li>Android&rsquo;s official SDK. We use android-17(4.2.2) here.</li>
<li>Android emulator.</li>
<li>Can run ruby.</li>
</ol>


<h2>Steps</h2>

<ol>
<li>Create an emulator for 4.2.2 OS. Name it as &ldquo;android422&rdquo;. (by command line or Eclipse)</li>
<li><p>Pull all framework libraries to working machine, which contains all hide and internal classes.</p>

<pre><code> emulator -avd android422
 adb pull /system/framework/* framework
</code></pre></li>
<li><p>Get decompiling tools for odex. Download <code>smali-2.0.3.jar</code> and <code>baksmali-2.0.3.jar</code>. <a href="https://code.google.com/p/smali/">https://code.google.com/p/smali/</a></p></li>
<li>Put them in same directory, run <code>./create_custom_sdk.rb</code></li>
<li>Then you use choose the created custom sdk from Eclipse.</li>
</ol>


<p><img src="/images/2015_03_23_image01.png" title="Choose custom sdk" alt="Image A" /></p>

<h2>Source</h2>

<pre><code class="ruby">
# -- create_custom_sdk.rb --

#!/usr/bin/env ruby
# encoding: utf-8

# clear 'out' directory
system("rm -rf out")
system("mkdir out")
Dir.chdir("out")

# core.odex(optimized dex) file -&gt; dex file
system("java -jar ../baksmali-2.0.3.jar -a 17 -d ../framework -x ../framework/core.odex -o internal_core_smali")
system("java -jar ../smali-2.0.3.jar -x -o core.dex internal_core_smali")
# framework.odex(optimized dex) file -&gt; dex file
system("java -jar ../baksmali-2.0.3.jar -a 17 -d ../framework -x ../framework/framework.odex -o internal_framework_smali")
system("java -jar ../smali-2.0.3.jar -x -o framework.dex internal_framework_smali")

# .dex -&gt; .class, which contains all symbols including hide and internal
system("dex2jar core.dex")
system("unzip core_dex2jar.jar -d full-symbol-android")
system("dex2jar framework.dex")
system("unzip framework_dex2jar.jar -d full-symbol-android")

# copy offical sdk here
system("cp -r ~/sdk/android-sdk-macosx/platforms/android-17 android422")

# unzip offical android.jar, merge full-symbol-android into it
system("unzip android422/android.jar -d custom-android")
system("cp -r full-symbol-android/* custom-android")
Dir.chdir("custom-android")
system("zip -r9 internal-android.zip *")
Dir.chdir("..")
system("mv custom-android/internal-android.zip android422/android.jar")

# Fix some properties to enable custom sdk shown in Eclipse
filename = "android422/build.prop"
text = File.read(filename)
puts = text.gsub(/ro\.build\.id=.*/, "ro.build.id=Custom422")
  .gsub(/ro\.build\.version\.sdk=17/, "ro.build.version.sdk=422")
  .gsub(/ro\.build\.version\.release=.*/, "ro.build.version.release=4.2.2.c")
File.open(filename, "w") { |file| file &lt;&lt; puts }

filename = "android422/source.properties"
text = File.read(filename)
puts = text.gsub(/AndroidVersion\.ApiLevel=17/, "AndroidVersion.ApiLevel=422")
  .gsub(/Pkg\.Desc=Android SDK Platform 4\.2\.2/, "Pkg.Desc=Android SDK Platform Custom422")
File.open(filename, "w") { |file| file &lt;&lt; puts }

# Copy custom sdk to offical sdk's directory
system("cp -r android422 ~/sdk/android-sdk-macosx/platforms")

puts "Done"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIF View for Android]]></title>
    <link href="http://zh-wang.github.io/blog/2015/03/10/gif-view-for-android/"/>
    <updated>2015-03-10T23:25:52+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/03/10/gif-view-for-android</id>
    <content type="html"><![CDATA[<h2>Movie view does not work sometimes</h2>

<p>There are several ways to decode and show GIF format image on android.<br/>
I tried using framework&rsquo;s <code>Movie</code> class to decode GIF, but it crashes on device which runs 4.1 or later.<br/>
Don&rsquo;t know why that occurs but I need to show animated GIF on all OS version.<br/>
So I write a custom view to do that, and in a simple way.</p>

<p>Source can be found on <a href="https://github.com/zh-wang/AndroidGifView">Github</a>.</p>

<h2>Something Wired</h2>

<p>GIF&rsquo;s document says that it is encoded in little-endian<a href="http://www.w3.org/Graphics/GIF/spec-gif89a.txt">GIF Specification</a>.<br/>
But sometimes the HEADER part is in big-endian, like this.</p>

<p><img src="/images/2015_03_10_image01.png" title="GIF image bytes in hex" alt="Image 01" /></p>

<p>The first 6 bytes <code>47 49 46 38 39 61</code> is <code>GIF89a</code>, in big-endian. But sometimes in little-endian.(Not confirmed but I found some open source libraries read them by little-endian).<br/>
Note that, the following image size sector <code>7c02 fa00</code> (width: 636, height: 250) is little-endian.<br/>
So I should read bytes first in <code>BIG_ENDIAN</code>, then turn byte order into <code>LITTLE_ENDIAN</code>.</p>

<pre><code class="java">    /**
     * Reads GIF file header information.
     */
    protected void readHeader() {
        String id = "";
        rawData.order(ByteOrder.BIG_ENDIAN);
        for (int i = 0; i &lt; 6; i++) {
            id += (char) read();
        }
        rawData.order(ByteOrder.LITTLE_ENDIAN);
        if (!id.startsWith("GIF")) {
            status = STATUS_FORMAT_ERROR;
            return;
        }
        readLSD();
        if (gctFlag &amp;&amp; !err()) {
            gct = readColorTable(gctSize);
            bgColor = gct[bgIndex];
        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upload Pics by Imgur Api on Android]]></title>
    <link href="http://zh-wang.github.io/blog/2015/01/28/upload-image-with-imgur-api-on-android/"/>
    <updated>2015-01-28T16:29:13+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/01/28/upload-image-with-imgur-api-on-android</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This an example android application which use Imgur&rsquo;s api to upload image, with OAuth2 authorization.</p>

<h2>Steps</h2>

<ol>
<li>You need an account on Imgur. Then create an app from &ldquo;Settings -> Applications&rdquo;. The redirect link should set to <code>YOUR_APP_IDENTIFIER://callback</code> or something else you like, but must match <code>scheme</code> in step 5.</li>
<li>Get your app&rsquo;s client id.</li>
<li>Replace it with <code>CLIENT_ID</code> in the source code.</li>
<li>Create an sample android project with an activity with the source code below.</li>
<li><p>Add following lines to <code>AndroidManifest.xml</code>, under Activity <code>OAuthTestActivity</code>. This allows transition from authorization page to your android app.</p>

<pre><code> &lt;intent-filter&gt;
     &lt;action android:name="android.intent.action.VIEW" /&gt;
     &lt;category android:name="android.intent.category.DEFAULT" /&gt;
     &lt;category android:name="android.intent.category.BROWSABLE" /&gt;
     &lt;data android:scheme="YOUR_APP_IDENTIFIER" android:host="callback" /&gt;
 &lt;/intent-filter&gt;
</code></pre></li>
<li><p>Build and Run.</p></li>
<li>Authorize with your imgur&rsquo;s account with your web browser.
<img src="/images/2015_01_28_image04.png" title="Authorize with your imgur's account" alt="Image A" /></li>
<li>Choose an image to upload.
<img src="/images/2015_01_28_image01.png" title="Choose an image" alt="Image B" /></li>
<li>Upload.
<img src="/images/2015_01_28_image02.png" title="Upload" alt="Image C" /></li>
<li>Check the uploaded image in your web browser.
<img src="/images/2015_01_28_image03.png" title="Open browser" alt="Image D" /></li>
</ol>


<h2>Source Code</h2>

<!-- more -->


<pre><code class="java">
public class OAuthTestActivity extends Activity {

    public static final int REQUEST_CODE_PICK_IMAGE = 1001;

    private static final String AUTHORIZATION_URL = "https://api.imgur.com/oauth2/authorize";
    private static final String CLIENT_ID = "CLIENT_ID";

    private LinearLayout rootView;

    private String accessToken;
    private String refreshToken;

    private String picturePath = "";
    private Button send;

    private String uploadedImageUrl = "";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        rootView = new LinearLayout(this);
        rootView.setOrientation(LinearLayout.VERTICAL);
        TextView tv = new TextView(this);
        LinearLayout.LayoutParams llp = new LinearLayout.LayoutParams(
                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        tv.setLayoutParams(llp);
        rootView.addView(tv);
        setContentView(rootView);

        String action = getIntent().getAction();

        if (action == null || !action.equals(Intent.ACTION_VIEW)) { // We need access token to use Imgur's api

            tv.setText("Start OAuth Authorization");

            Uri uri = Uri.parse(AUTHORIZATION_URL).buildUpon()
                    .appendQueryParameter("client_id", CLIENT_ID)
                    .appendQueryParameter("response_type", "token")
                    .appendQueryParameter("state", "init")
                    .build();

            Intent intent = new Intent();
            intent.setData(uri);
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            startActivity(intent);
            finish();

        } else { // Now we have the token, can do the upload

            tv.setText("Got Access Token");

            Uri uri = getIntent().getData();
            Log.d("Got imgur's access token", uri.toString());
            String uriString = uri.toString();
            String paramsString = "http://callback?" + uriString.substring(uriString.indexOf("#") + 1);
            Log.d("tag", paramsString);
            List&lt;NameValuePair&gt; params = URLEncodedUtils.parse(URI.create(paramsString), "utf-8");
            Log.d("tag", Arrays.toString(params.toArray(new NameValuePair[0])));

            for (NameValuePair pair : params) {
                if (pair.getName().equals("access_token")) {
                    accessToken = pair.getValue();
                } else if (pair.getName().equals("refresh_token")) {
                    refreshToken = pair.getValue();
                }
            }

            Log.d("tag", "access_token = " + accessToken);
            Log.d("tag", "refresh_token = " + refreshToken);

            Button chooseImage = new Button(this);
            rootView.addView(chooseImage);
            chooseImage.setText("Choose an image");
            chooseImage.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                    startActivityForResult(intent, REQUEST_CODE_PICK_IMAGE);
                }
            });

            send = new Button(this);
            rootView.addView(send);
            send.setText("send to imgur");
            send.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (picturePath != null &amp;&amp; picturePath.length() &gt; 0 &amp;&amp;
                            accessToken != null &amp;&amp; accessToken.length() &gt; 0) {
                        (new UploadToImgurTask()).execute(picturePath);
                    }
                }
            });
        }

    }

    @Override
    protected void onResume() {
        super.onResume();
        if (send == null) return;
        if (picturePath == null || picturePath.length() == 0) {
            send.setVisibility(View.GONE);
        } else {
            send.setVisibility(View.VISIBLE);
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        Log.d("tag", "request code : " + requestCode + ", result code : " + resultCode);
        if (data == null) {
            Log.d("tag" , "data is null");
        }
        if (resultCode == Activity.RESULT_OK &amp;&amp; requestCode == REQUEST_CODE_PICK_IMAGE &amp;&amp; null != data) {
            Uri selectedImage = data.getData();
            String[] filePathColumn = { MediaStore.Images.Media.DATA };

            Cursor cursor = getContentResolver().query(selectedImage,
                    filePathColumn, null, null, null);
            cursor.moveToFirst();

            int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
            picturePath = cursor.getString(columnIndex);
            Log.d("tag", "image path : " + picturePath);
            cursor.close();
        }
        super.onActivityResult(requestCode, resultCode, data);
    }

    // Here is the upload task
    class UploadToImgurTask extends AsyncTask&lt;String, Void, Boolean&gt; {

        @Override
        protected Boolean doInBackground(String... params) {
            final String upload_to = "https://api.imgur.com/3/upload";

            HttpClient httpClient = new DefaultHttpClient();
            HttpContext localContext = new BasicHttpContext();
            HttpPost httpPost = new HttpPost(upload_to);

            try {
                HttpEntity entity = MultipartEntityBuilder.create()
                        .addPart("image", new FileBody(new File(params[0])))
                        .build();

                httpPost.setHeader("Authorization", "Bearer " + accessToken);
                httpPost.setEntity(entity);

                final HttpResponse response = httpClient.execute(httpPost,
                        localContext);

                final String response_string = EntityUtils.toString(response
                        .getEntity());

                final JSONObject json = new JSONObject(response_string);

                Log.d("tag", json.toString());

                JSONObject data = json.optJSONObject("data");
                uploadedImageUrl = data.optString("link");
                Log.d("tag", "uploaded image url : " + uploadedImageUrl);

                return true;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return false;
        }

        @Override
        protected void onPostExecute(Boolean aBoolean) {
            super.onPostExecute(aBoolean);
            if (aBoolean.booleanValue()) { // after sucessful uploading, show the image in web browser
                Button openBrowser = new Button(OAuthTestActivity.this);
                rootView.addView(openBrowser);
                openBrowser.setText("Open Browser");
                openBrowser.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent intent = new Intent();
                        intent.setData(Uri.parse(uploadedImageUrl));
                        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                        startActivity(intent);
                    }
                });
            }
        }
    }

}
</code></pre>
]]></content>
  </entry>
  
</feed>
