<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Welcome to FutureAppLaboratory]]></title>
  <link href="http://zh-wang.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://zh-wang.github.io/"/>
  <updated>2014-11-28T12:09:01+09:00</updated>
  <id>http://zh-wang.github.io/</id>
  <author>
    <name><![CDATA[viennakanon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mozc完全解説02]]></title>
    <link href="http://zh-wang.github.io/blog/2014/05/01/mozc-analysis-02/"/>
    <updated>2014-05-01T15:18:39+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/05/01/mozc-analysis-02</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p><a href="/blog/2014/04/22/mozc-analysis-01/">前回</a>では、android側からタッチ反応を発生してから、jniを通して変換エンジンのnative側が候補を返すまでを説明した。<br/>
今回ではjni部分のコードを少し説明する。</p>

<h2>What is jni?</h2>

<p>言わばjavaとc, cppとの間のインターフェイスですね。cやcppを使って、java側とデータのやり取りができる。<br/>
<a href="http://ja.wikipedia.org/wiki/Java_Native_Interface">Java Native Interface</a></p>

<h2>mozcに使われているjni</h2>

<p>java側ではMozcJNI.javaというラッパーがある。メソッドはこの通り。</p>

<ul>
<li><code>load(String, Buffer, Buffer, String)</code><br/>
  初期化用のメソッド、apkの中に入っている辞書データなどをnative側に渡す</li>
<li><code>evalCommand(byte[])</code><br/>
  native側と通信するメソッド、jniで実装</li>
<li><code>onPostLoad(String, Buffer, Buffer)</code><br/>
  loadメソッドに使われている、jniで実装</li>
<li><code>getVersion()</code><br/>
  native側のバージョン情報をjava側に渡す。loadメソッドに使われている、jniで実装</li>
</ul>


<p>jniの実装ファイルはjni/mozcjni.cc。では、<code>evalCommand(byte[])</code>を詳しく見てみよう。</p>

<!-- more -->


<pre><code class="cpp">// ------&gt; この矢印のあたりは、私の追加したコメントです
jbyteArray JNICALL evalCommand(JNIEnv *env, jclass clazz, jbyteArray in_bytes_array) {
  jboolean is_copy = false;
  jbyte *in_bytes = env-&gt;GetByteArrayElements(in_bytes_array, &amp;is_copy);
  const jsize in_size = env-&gt;GetArrayLength(in_bytes_array);

  // ------&gt; commandにパースする。session/commands.protoにはcommandの定義が書かれいる。
  // ------&gt; protobuf(Protocol Buffers)というライブラリを使っています。
  mozc::commands::Command command;
  command.ParseFromArray(in_bytes, in_size);

  // ------&gt; native側でcommandを処理する。結果はcommandの中に格納する。
  mozc::Singleton&lt;SessionHandlerSingletonAdapter&gt;::get()-&gt;getHandler()
      -&gt;EvalCommand(&amp;command);

  // Use JNI_ABORT because in_bytes is read only.
  // ------&gt; JNI_ABORT: 要素列をJava配列に反映させず、要素列バッファを解放する。
  env-&gt;ReleaseByteArrayElements(in_bytes_array, in_bytes, JNI_ABORT);

  // 変換結果はjbyteArrayとしてjava側に返す
  const int out_size = command.ByteSize();
  jbyteArray out_bytes_array = env-&gt;NewByteArray(out_size);


  // ------&gt; is_copy: 0の場合、生成された配列(out_bytes)を変更すると、java側にも変更される。
  //                  1の場合、変更してもjava側には変更されない。
  jbyte *out_bytes = env-&gt;GetByteArrayElements(out_bytes_array, &amp;is_copy);
  command.SerializeToArray(out_bytes, out_size);

  // Use 0 to copy out_bytes to out_bytes_array.
  // ------&gt; 0の場合、要素列をJava配列に反映させ、要素列バッファを解放する。
  env-&gt;ReleaseByteArrayElements(out_bytes_array, out_bytes, 0);

  return out_bytes_array;
}
</code></pre>

<p><code>in_bytes_array</code>には、タッチされたキーの情報などが入っている。<br/>
<code>out_bytes_array</code>には、変換候補などが入っている。<br/>
<a href="/blog/2014/04/22/mozc-analysis-01/">前回</a>最後のlog部分を参考してくだい。</p>

<h2>終わりに</h2>

<p>jni側の実装に関する説明はここまで。<br/>
次回では<code>evalCommand</code>メソッドをもっと細かく説明する。</p>

<script language="javaScript">
$(document).ready( function () { $("a[href^='http']:not([href*='" + location.hostname + "'])").attr('target', '_blank'); })
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mozc完全解説01]]></title>
    <link href="http://zh-wang.github.io/blog/2014/04/22/mozc-analysis-01/"/>
    <updated>2014-04-22T12:20:06+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/04/22/mozc-analysis-01</id>
    <content type="html"><![CDATA[<h2>What is mozc?</h2>

<blockquote><p>Mozc is a Japanese Input Method Editor (IME) designed for multi-platform such
as Chromium OS, Android, Windows, Mac and Linux. This open-source project
originates from Google Japanese Input.</p></blockquote>

<h2>(1) ソースを手に入れよう</h2>

<p>ここからダウンロード　<a href="https://code.google.com/p/mozc/">mozc project from google code</a></p>

<p>今回使うmozcのバージョンは
<code>
MAJOR=1
MINOR=10
BUILD=1390
REVISION=103
ANDROID_VERSION_CODE=1794
FLAG=RELEASE
TARGET_PLATFORM=Android
ANDROID_APPLICATION_ID=org.mozc.android.inputmethod.japanese
ANDROID_SERVICE_NAME=org.mozc.android.inputmethod.japanese.MozcService
</code></p>

<p>android版のビルドはMac非対応なので、vagrantを通してVMのubuntuでビルドします。<br/>
こちらのリポジトリを使えば楽です。
<a href="https://github.com/niw/mozc">https://github.com/niw/mozc</a></p>

<p>デフォルトでビルドすると、eclipseで開けるプロジェクトは作ってくれないので、手動で作りました。こちらからダウンロードできます。<br/>
<a href="https://dl.dropboxusercontent.com/u/40868784/mozc_android.zip  ">https://dl.dropboxusercontent.com/u/40868784/mozc_android.zip  </a>
フォルダ自体とその中のprotobuff, resources_ossをeclipseにインポートすればOK。後はMozcProxyPreferenceActivityというプロジェクトを実行するだけ。</p>

<p>※ ビルドする際に、&#8221;SDK does not have any Build Tools installed.&ldquo;が表示されたら、Build Toolsをダウンロードする必要があります。<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /usr/bin/curl -L -O &lsquo;&lt;a href="http://dl.google.com/android/repository/build-tools_r19-linux.zip"&gt;http://dl.google.com/android/repository/build-tools_r19-linux.zip&lt;/a&gt;&rsquo; &amp;&amp; unzip build-tools_r19-linux.zip -d /opt/android/android-sdk-linux/build-tools/
</span><span class='line'>$ mv /opt/android/android-sdk-linux/build-tools/android-4.4 /opt/android/android-sdk-linux/build-tools/19.0.0&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;or&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ /opt/android/android-sdk-linux/tools/android update sdk -u -t build-tools-20.0.0</span></code></pre></td></tr></table></div></figure></p>

<h2>(2) キーのタッチから、変換候補がもらうまで、簡単な解析をやります</h2>

<!-- more -->


<p>android側のフリックキーボードで「あ」を押し、タッチイベントが発生する。そうすると、以下のコードが順番的に実行されます。</p>

<p>org.mozc.android.inputmethod.japanese.ViewManager:260:onKey<br/>
ここでViewのタッチエベントをキャッチする。<br/>
↓<br/>
org.mozc.android.inputmethod.japanese.MozcService:245:onKeyEvent  <br/>
メーンサービスでKeyEventを処理する。</p>

<pre><code class="java">    @Override
    public void onKeyEvent( ProtoCommands.KeyEvent mozcKeyEvent, KeyEventInterface keyEvent, KeyboardSpecification keyboardSpecification, List&lt;? extends TouchEvent&gt; touchEventList) {

    ...

      sendKeyWithKeyboardSpecification(mozcKeyEvent, keyEvent,
                                       keyboardSpecification, getResources().getConfiguration(),
                                       touchEventList);
    }
</code></pre>

<p>↓<br/>
org.mozc.android.inputmethod.japanese.MozcService:968:sendKeyWithKeyboardSpecification</p>

<pre><code class="java">  /**
   * Sends mozcKeyEvent and/or Request to mozc server.
   *
   * This skips to send request if the given keyboard specification is
   * same as before.
   */
  boolean sendKeyWithKeyboardSpecification( ... 
</code></pre>

<p>↓<br/>
org.mozc.android.inputmethod.japanese.session.SessionExecutor:626:sendKey</p>

<pre><code class="java">  /**
   * Sends {@code SEND_KEY} command to the server asynchronously.
   */
  public void sendKey(ProtoCommands.KeyEvent mozcKeyEvent, KeyEventInterface triggeringKeyEvent, List&lt;? extends TouchEvent&gt; touchEventList, EvaluationCallback callback) {

    ...

    evaluateAsynchronously(inputBuilder, triggeringKeyEvent, callback);
  }
</code></pre>

<p>↓<br/>
org.mozc.android.inputmethod.japanese.session.SessionExecutor:612:evaluateAsynchronously<br/>
asyncなので、handlerに渡します。<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kt">void</span> <span class="nf">evaluateAsynchronously</span><span class="o">(</span><span class="n">Input</span><span class="o">.</span><span class="na">Builder</span> <span class="n">inputBuilder</span><span class="o">,</span> <span class="n">KeyEventInterface</span> <span class="n">triggeringKeyEvent</span><span class="o">,</span> <span class="n">EvaluationCallback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;...</span>
</span><span class='line'>
</span><span class='line'><span class="n">handler</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">handler</span><span class="o">.</span><span class="na">obtainMessage</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="n">context</span><span class="o">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>↓<br/>
org.mozc.android.inputmethod.japanese.session.SessionExecutor:300:handlerMessage<br/>
SessionExecutorの中のExecutorMainCallbackがmessageを取り、処理する。<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">A</span> <span class="n">core</span> <span class="n">implementation</span> <span class="n">of</span> <span class="n">evaluation</span> <span class="n">executing</span> <span class="n">process</span><span class="o">.</span>
</span><span class='line'>   <span class="o">*</span>
</span><span class='line'>   <span class="o">*</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">This</span> <span class="kd">class</span> <span class="nc">takes</span> <span class="n">messages</span> <span class="n">from</span> <span class="n">the</span> <span class="n">UI</span> <span class="n">thread</span><span class="o">.</span> <span class="n">By</span> <span class="n">using</span> <span class="o">{</span><span class="nd">@link</span> <span class="n">SessionHandler</span><span class="o">},</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">it</span> <span class="n">evaluates</span> <span class="n">the</span> <span class="o">{</span><span class="nd">@link</span> <span class="n">Input</span><span class="o">}</span> <span class="n">in</span> <span class="n">a</span> <span class="n">message</span><span class="o">,</span> <span class="n">and</span> <span class="n">then</span> <span class="n">returns</span> <span class="n">the</span> <span class="n">result</span> <span class="n">with</span> <span class="n">notifying</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">the</span> <span class="n">UI</span> <span class="n">thread</span> <span class="k">if</span> <span class="n">necessary</span><span class="o">.</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">All</span> <span class="n">evaluations</span> <span class="n">should</span> <span class="n">be</span> <span class="n">done</span> <span class="n">with</span> <span class="k">this</span> <span class="kd">class</span> <span class="nc">in</span> <span class="n">order</span> <span class="n">to</span> <span class="n">keep</span> <span class="n">evaluation</span> <span class="n">in</span> <span class="n">the</span> <span class="n">incoming</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">order</span><span class="o">.</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Package</span> <span class="kd">private</span> <span class="k">for</span> <span class="n">testing</span> <span class="n">purpose</span><span class="o">.</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ExecutorMainCallback</span> <span class="kd">implements</span> <span class="n">Handler</span><span class="o">.</span><span class="na">Callback</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;...</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Dispatch the message.</span>
</span><span class='line'>  <span class="k">switch</span> <span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">what</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">INITIALIZE_SESSION_HANDLER:</span>
</span><span class='line'>      <span class="n">sessionHandler</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">cast</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">obj</span><span class="o">));</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">DELETE_SESSION:</span>
</span><span class='line'>      <span class="n">deleteSession</span><span class="o">();</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">EVALUATE_ASYNCHRONOUSLY:</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">EVALUATE_KEYEVENT_ASYNCHRONOUSLY:</span>
</span><span class='line'>      <span class="n">evaluateAsynchronously</span><span class="o">(</span>
</span><span class='line'>          <span class="n">AsynchronousEvaluationContext</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">cast</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">obj</span><span class="o">),</span> <span class="n">message</span><span class="o">.</span><span class="na">getTarget</span><span class="o">());</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">↓</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">mozc</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">inputmethod</span><span class="o">.</span><span class="na">japanese</span><span class="o">.</span><span class="na">session</span><span class="o">.</span><span class="na">SessionExecutor</span><span class="o">:</span><span class="mi">459</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">context</span><span class="o">.</span><span class="na">outCommand</span> <span class="o">=</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">inputBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">↓</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">mozc</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">inputmethod</span><span class="o">.</span><span class="na">japanese</span><span class="o">.</span><span class="na">session</span><span class="o">.</span><span class="na">SessionExecutor</span><span class="o">:</span><span class="mi">333</span>
</span><span class='line'><span class="n">ここで</span><span class="err">、</span><span class="n">JNIを通してnative変換エンジンと通信する</span><span class="err">。（</span><span class="n">同期で</span><span class="err">）</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">Command</span> <span class="nf">evaluate</span><span class="o">(</span><span class="n">Input</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">Command</span> <span class="n">outCommand</span> <span class="o">=</span> <span class="n">sessionHandler</span><span class="o">.</span><span class="na">evalCommand</span><span class="o">(</span><span class="n">inCommand</span><span class="o">);</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">↓</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">mozc</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">inputmethod</span><span class="o">.</span><span class="na">japanese</span><span class="o">.</span><span class="na">session</span><span class="o">.</span><span class="na">LocalSessionHandler</span><span class="o">:</span><span class="mi">100</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Command</span> <span class="nf">evalCommand</span><span class="o">(</span><span class="n">Command</span> <span class="n">command</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">inBytes</span> <span class="o">=</span> <span class="n">command</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">outBytes</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">outBytes</span> <span class="o">=</span> <span class="n">MozcJNI</span><span class="o">.</span><span class="na">evalCommand</span><span class="o">(</span><span class="n">inBytes</span><span class="o">);</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Command</span><span class="o">.</span><span class="na">parseFrom</span><span class="o">(</span><span class="n">outBytes</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidProtocolBufferException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">MozcLog</span><span class="o">.</span><span class="na">w</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">InvalidProtocolBufferException</span> <span class="n">is</span> <span class="n">thrown</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;</span>
</span><span class='line'>          <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">We</span> <span class="n">can</span> <span class="k">do</span> <span class="n">nothing</span> <span class="n">so</span> <span class="n">just</span> <span class="k">return</span> <span class="k">default</span> <span class="n">instance</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'>      <span class="n">MozcLog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Command</span><span class="o">.</span><span class="na">getDefaultInstance</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>ここでのCommand.parseFrom(outBytes)をデーバッグすると、以下の入力、出力、変換候補リストが分かります。</p>

<pre><code class="ruby">  input {
    type: SEND_KEY
    id: 6381052470309579002
    key {
        key_code: 49
      }
    touch_events {
        source_id: 2
        stroke {
              action: TOUCH_DOWN
              x: 0.30168644
              y: 0.16023746
              timestamp: 0
            }
        stroke {
              action: TOUCH_UP
              x: 0.30168644
              y: 0.16023746
              timestamp: 25
            }
      }
  }   
  output {
    id: 6381052470309579002
    mode: HIRAGANA
    consumed: true
    preedit {
      cursor: 1
      Segment {
            annotation: UNDERLINE
            value: "\343\201\204"
            value_length: 1
            key: "\343\201\204"
          }
     }
     candidates {
      size: 151
      Candidate {
            index: 0
            value: "\343\201\204\343\202\215"
            annotation {
                    description: "Suffix"
                  }
            id: 0
          }
      Candidate {
            index: 1
            value: "\343\201\204"
            annotation {
                    description: "Realtime"
                  }
            id: 1
          }
      Candidate {
            index: 2
            value: "\350\203\203"
            annotation {
                    description: "Realtime"
                  }
            id: 2
          }
      Candidate {
            index: 3
            value: "\343\201\203"
            annotation {
                    description:
                "\346\215\250\343\201\246\344\273\256\345\220\215
                    \345\260\217\346\233\270\343\201\215\346\226\207\345\255\227"
                  }
            id: 3
          }

      ... // 省略

      Candidate {
            index: 8
            value: "\344\275\215"
            annotation {
                    description: "Realtime"
                  }
            id: 8
          }
      position: 0
      category: SUGGESTION
      display_type: MAIN
      footer {
            label:
          "Tab\343\202\255\343\203\274\343\201\247\351\201\270\346\212\236"
          }
    }
  status {
      activated: true
      mode: HIRAGANA
      comeback_mode: HIRAGANA
    }
  all_candidate_words {
      candidates {
            id: 0
            index: 0
            key: "\343\201\204\343\202\215"
            value: "\343\201\204\343\202\215"
            annotation {
                    description: "Suffix"
                  }
          }
      candidates {
            id: 1
            index: 1
            value: "\343\201\204"
            annotation {
                    description: "Realtime"
                  }
          }
      candidates {
            id: 2
            index: 2
            value: "\350\203\203"
            annotation {
                    description: "Realtime"
                  }
          }
      candidates {
            id: 3
            index: 3
            key: "\343\201\203"
            value: "\343\201\203"
            annotation {
                    description:
                "\346\215\250\343\201\246\344\273\256\345\220\215
                    \345\260\217\346\233\270\343\201\215\346\226\207\345\255\227"
                  }
          }

      ... // 省略
</code></pre>

<p>第一回目はここまで。(^O^)／</p>

<script language="javaScript">
$(document).ready( function () { $("a[href^='http']:not([href*='" + location.hostname + "'])").attr('target', '_blank'); })
</script>



]]></content>
  </entry>
  
</feed>
