<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Codility | Welcome to FutureAppLaboratory]]></title>
  <link href="http://zh-wang.github.io/blog/categories/codility/atom.xml" rel="self"/>
  <link href="http://zh-wang.github.io/"/>
  <updated>2014-06-30T18:08:19+09:00</updated>
  <id>http://zh-wang.github.io/</id>
  <author>
    <name><![CDATA[viennakanon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codility - Aluminium 2014 - Part 2]]></title>
    <link href="http://zh-wang.github.io/blog/2014/06/20/codility-aluminium-2014-p2/"/>
    <updated>2014-06-20T11:17:21+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/06/20/codility-aluminium-2014-p2</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This is an analysis of <a href="https://codility.com/programmers/challenges/">Codility &ndash; Aluminium 2014 Challenge</a>, Part 2.</p>

<p>In <a href="http://zh-wang.github.io/blog/2014/06/18/codility-aluminium-2014/">Part 1</a>, we introduced a solution for CLASSIC maximal subarray problem.<br/>
Now we&rsquo;ll make a solution for the <strong>a single swapping</strong> version.</p>

<!-- more -->


<h2>Analysis</h2>

<p>We still can split the whole given array $a_0, a_1, \cdots, a_n-1$ by index $i$.<br/>
Now we have subarray $L_1 = \{a_0, a_1, \cdots, a_i\}$ and $L-2 = \{a_i+1, a_i+2, \cdots, a_n-1\}$.</p>

<ul>
<li>We only consider that <strong>forward</strong> swapping of $a_j$ and $a_k$ only occurs in the former subarray, $a_0, a_1, \cdots, a_i$, for $0 \leq j &lt; k &lt; i$. For the case of <strong>backward</strong> swapping in the latter subarray, we do the same calculation on reversed given array. Note that, any element swapped forward will <strong>NOT</strong> be considered into maximal subarray. (Why?)</li>
<li>As we argued in Part 1, we want to minimize sum of $L_1$ and sum of $L_2$. Because we don&rsquo;t consider swap in $L_2$, we can do the same calculation as in Part 1.</li>
<li>How can we minimize the sum of $L_1$ after a single swap within it? Obviously, swapping an element with the largest element before it yields a largest decrease, by <strong>sum of subarray minus largest</strong>, and this is saved in $sub$ array in decreasing order.</li>
<li>let the element which swaps with the largest element before it to be $a_x$, for each $0 \leq x \leq i$, we will calculate

<ul>
<li>Swap $a_x$ with the largest element. The subarray sum to index $x$ will be decreased again by value of $a_x$, based on $sub_x-1$.</li>
<li>Not swap with $a_x$. Let swap occurs before index $x$, just use the value of index $x-1$ minimal value.
We will choose the smaller. Then save results in an array.</li>
</ul>
</li>
<li>Calculate results of $L_2$.</li>
<li>Use the whole sum of given array to subtract results of $L_1$ and $L_2$. The largest one is the answer.</li>
<li>Because calculation above is on 1-d array, time and space complexity are O(n).</li>
</ul>


<p>Code
```java</p>

<pre><code>public int solution(int[] inputs) {

    List&lt;Integer&gt;data = new ArrayList&lt;Integer&gt;();
    List&lt;Integer&gt; rdata = new ArrayList&lt;Integer&gt;();
    for (int i = 0; i &lt; inputs.length; i++) data.add(inputs[i]);
    for (int i = 0; i &lt; inputs.length; i++) rdata.add(inputs[inputs.length - 1 - i]);

    int r1 = cal(data);
    int r2 = cal(rdata);

    int result = Math.max(r1, r2);
    // result equals 0 means no subarray have sum larger than 0,
    // we need to choose a largest negative element.
    if (result == 0) {
        return Collections.max(data);
    } else {
        return result;
    }
}

private int cal(List&lt;Integer&gt; data) {
    int n = data.size();
    int sum = 0;
    for (Integer integer : data) sum += integer;

    List&lt;Integer&gt; psum = partial_sum(data, compAdd);
    List&lt;Integer&gt; pmax = partial_sum(data, compMax);
    List&lt;Integer&gt; sub = new ArrayList&lt;Integer&gt;();
    for (int i = 0; i &lt; n; i++) {
        sub.add(psum.get(i) - pmax.get(i));
    }

    List&lt;Integer&gt; min_sub = partial_sum(sub, compMin);
    List&lt;Integer&gt; former = new ArrayList&lt;Integer&gt;();
    for (int i = 0; i &lt; n; i++) {
        former.add(
                Math.min(
                        (i - 1 &gt;= 0 ? min_sub.get(i - 1) : 0) + data.get(i), 
                        (i - 1 &gt;= 0 ? former.get(i - 1) : 0)
                        )
                );
    }

    Collections.reverse(data);
    List&lt;Integer&gt; r_psum = partial_sum(data, compAdd);
    List&lt;Integer&gt; min_r_psum = partial_sum(r_psum, compMin);
    Collections.reverse(min_r_psum);

    List&lt;Integer&gt; latter = new ArrayList&lt;Integer&gt;();
    for (int i = 0; i &lt; n; i++) {
        latter.add(sum - former.get(i) - (i + 1 &gt;= n ? 0 : min_r_psum.get(i+1)) );
    }
    return Collections.max(latter);
}

private List&lt;Integer&gt; partial_sum(List&lt;Integer&gt; data, Comparator&lt;Integer&gt; comparator) {
    List&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();
    if (data.size() == 0) {
        return null;
    }
    res.add(data.get(0));
    for (int i = 1; i &lt; data.size(); i++) {
        Integer lastValue = res.get(i - 1);
        Integer currentValue = data.get(i);
        res.add(comparator.compare(lastValue, currentValue));
    }
    return res;
}

Comparator&lt;Integer&gt; compAdd = new Comparator&lt;Integer&gt;() {
    @Override
    public int compare(Integer o1, Integer o2) {
        return o1 + o2;
    }
};

Comparator&lt;Integer&gt; compMax = new Comparator&lt;Integer&gt;() {
    @Override
    public int compare(Integer o1, Integer o2) {
        return Math.max(o1, o2);
    }
};

Comparator&lt;Integer&gt; compMin = new Comparator&lt;Integer&gt;() {
    @Override
    public int compare(Integer o1, Integer o2) {
        return Math.min(o1, o2);
    }
};
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codility - Aluminium 2014 - Part 1]]></title>
    <link href="http://zh-wang.github.io/blog/2014/06/18/codility-aluminium-2014/"/>
    <updated>2014-06-18T15:54:12+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/06/18/codility-aluminium-2014</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This is an analysis of <a href="https://codility.com/programmers/challenges/">Codility &ndash; Aluminium 2014 Challenge</a>, Part 1.</p>

<ul>
<li>The problem is, finding the maximum sum of a compact subsequence of array elements after performing a single swap operation. It&rsquo;s a little tricky <a href="http://en.wikipedia.org/wiki/Maximum_subarray_problem">maximal subarray</a> problem.</li>
<li>For example, given an array {3, -10, 4, 5}, we can swap 3 and -10 to get a compact subsequence {3, 4, 5}, which has the maximum sum 12</li>
<li>Time bound and space bound are both O(n)</li>
<li>There exists many algorithms to solve maximal subarray problems, but they cannot directly applied to this problem.</li>
</ul>


<!-- more -->


<h2>Analysis</h2>

<ul>
<li>First, we should take a look at the solution of a CLASSIC maximal subarray problem, which means <strong>swapping is not allowed</strong>.</li>
</ul>


<p>For a given array $a_0, a_1, \cdots, a_n-1$,</p>

<p><p>
The maximum sum of a compact subsequence can be expressed by the following formula.</p>

<p>$$ \max \{ \sum_{k=i}^j a_k, 0 \leq i &lt; j \leq n &ndash; 1 \} $$
</p></p>

<p><p>
Because we want the maximal part from $i$ to $j$, by thinking reversely, we can calculate the minimal <a href="http://mathworld.wolfram.com/PartialSum.html">partial sum</a> of sub array $a_0, a_1, \cdots, a_x-1$ as $f(x)$, minimal partial sum of sub array $a_x+1, a_x+2, \cdots, a_n-1$ as $g(x)$. Then use the whole sum to subtract them if them are minus values.</p>

<p>let S to be the accumulation of the given array.</p>

<p>let $$
  f(x) = \min \{ \min \{ partial_sum(p), 0 \leq p \leq x &ndash; 1 \} , 0 \}
$$ to be the minimal partial sum of sub array $a_0, a_1, \cdots, a_x-1$.</p>

<p>let $$
g(x) = \min \{ \min \{ partial_sum(q), x + 1 \leq q \leq n &ndash; 1 \} , 0 \}
$$ to be the minimal partial sum of sub array $a_x+1, a_x+2, \cdots, a_n-w$.</p>

<p>then we calculate the following formula. $$ \max \{ S &ndash; f(x) &ndash; g(x), 0 \leq x \leq n &ndash; 1 \} $$
</p></p>

<ul>
<li>OK, then write above thought into Java, we get the following codes</li>
</ul>


<p>```java</p>

<pre><code>public int solution(int[] inputs) {
    List&lt;Integer&gt;data = new ArrayList&lt;Integer&gt;();
    for (int i = 0; i &lt; inputs.length; i++) data.add(inputs[i]);
    return cal(data);
}

private int cal(List&lt;Integer&gt; A) {
    int n = A.size();
    int S = 0;
    for (Integer integer : A) S += integer;
    List&lt;Integer&gt; B = partial_sum(A, compAdd);
    List&lt;Integer&gt; F = partial_sum(B, compMin);

    Collections.reverse(A);
    List&lt;Integer&gt; D = partial_sum(A, compAdd);
    List&lt;Integer&gt; G = partial_sum(D, compMin);
    Collections.reverse(A);
    Collections.reverse(G);

    int res = 0;
    for (int i = 0; i &lt; n; i++) {
        int f = i - 1 &lt; 0 ? 0 : F.get(i - 1); 
        int g = (i + 1 &gt;= n ? 0 : G.get(i + 1));
        res = Math.max(res, S - (f &lt; 0 ? f : 0) - (g &lt; 0 ? g :0));
    }
    return res;
}

private List&lt;Integer&gt; partial_sum(List&lt;Integer&gt; data, Comparator&lt;Integer&gt; comparator) {
    List&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();
    if (data.size() == 0) {
        return res;
    }
    res.add(data.get(0));
    for (int i = 1; i &lt; data.size(); i++) {
        Integer lastValue = res.get(i - 1);
        Integer currentValue = data.get(i);
        res.add(comparator.compare(lastValue, currentValue));
    }
    return res;
}

Comparator&lt;Integer&gt; compAdd = new Comparator&lt;Integer&gt;() {
    @Override
    public int compare(Integer o1, Integer o2) {
        return o1 + o2;
    }
};

Comparator&lt;Integer&gt; compMax = new Comparator&lt;Integer&gt;() {
    @Override
    public int compare(Integer o1, Integer o2) {
        return Math.max(o1, o2);
    }
};

Comparator&lt;Integer&gt; compMin = new Comparator&lt;Integer&gt;() {
    @Override
    public int compare(Integer o1, Integer o2) {
        return Math.min(o1, o2);
    }
};
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codility - Magnesium 2014]]></title>
    <link href="http://zh-wang.github.io/blog/2014/05/27/codility-magnesium-2014-challenge-report/"/>
    <updated>2014-05-27T19:05:37+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/05/27/codility-magnesium-2014-challenge-report</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This is an analysis of <a href="https://codility.com/programmers/challenges/">Codility &ndash; Magnesium 2014 Challenge</a>.</p>

<ul>
<li>The problem is that, finding the longest path in a weighted graph in which the weights are ascending. Vertices can be visited multiple times.</li>
<li>Here, <strong>length of a path</strong> means the number of vertices the path visits, not the weight sum of all edges that compose the path.</li>
<li>Therefore, <strong>longest path</strong> means a path that visits more vertices than any other paths for the given graph.</li>
<li>Time bound is O(V+E*log(E)).</li>
</ul>


<!-- more -->


<h2>Analysis</h2>

<ul>
<li>A classic DFS search on every vertex can do this job, despite its worst time complexity is O(VE), which cause timeout.</li>
<li>Let&rsquo;s make an O(V+E*log(E)) approach.</li>
<li>Because we do <strong>NOT</strong> need to trace the whole path, we just need to store a {<em>w</em>, <em>l</em>} pair for each vertex of the graph.</li>
<li>This pair of data means that for a vertex <em>V</em>, the longest path ends with <em>V</em> has a length <em>l</em> path, and, the largest weight of the path is <em>w</em>.</li>
<li>Then we pick edges one by one in ascending order, do some comparison and update the paired data for node which the edge connects.</li>
</ul>


<h2>Why this algorithm works?</h2>

<ul>
<li>For any <em>w_1</em> >= <em>w_2</em> and <em>l_1</em> >= <em>l_2</em>, we can always say that {<em>w_1</em>, <em>l_1</em>} is a better answer that {<em>w_2</em>, <em>l_2</em>}. Therefore, we only store the former answer. Note that, this only goes right when edges are picked by ascending order. That&rsquo;s the <strong>GREEDY</strong> algorithm works.</li>
<li>Sorting edges costs O(E*log(E)). Updating paired data costs O(V). The whole time cost is O(V+E*log(E)).</li>
</ul>


<h2>Source</h2>

<p>```java</p>

<pre><code>int result = 0;
Node root;
Edge[] edges;
Node[] nodes;

public int solution(int N, int[] A, int[] B, int[] C) {
    edges = new Edge[A.length];
    for (int i = 0; i &lt; A.length; i++) {
        edges[i] = new Edge(A[i], B[i], C[i]);
    }
    Arrays.sort(edges, new Comparator&lt;Edge&gt;() {
        @Override
        public int compare(Edge o1, Edge o2) {
            // TODO Auto-generated method stub
            return o1.c - o2.c;
        }
    });

    int n = edges.length;

    nodes = new Node[200000];
    for (int i = 0; i &lt; 200000; i++) {
        nodes[i] = new Node(0, 0);
    }

    for (int i = 0; i &lt; n; i++) {
        // get start node
        int start = edges[i].a;
        int end = edges[i].b;

        Node cnodefront = nodes[start];
        Node cnodeend = nodes[end];

        Node nextEndNode = nodes[end];
        Node nextStartNode = nodes[start];

        if (cnodefront.value &lt; edges[i].c) {
            nextEndNode = createNextNode(i, end, cnodefront.depth + 1); 
        }

        if (cnodeend.value &lt; edges[i].c) {
            nextStartNode = createNextNode(i, start, cnodeend.depth + 1);
        }

        nodes[end] = nextEndNode;
        nodes[start] = nextStartNode;

    }

    return result;
}

private Node createNextNode(int i, int end, int depth) {
    Node node = new Node(edges[i].c, depth);
    Node cnode = nodes[end];

    if (depth &gt; cnode.depth) {
        result = Math.max(result, depth);
        return node;
    } else {
        return cnode;
    }
}

private class Edge {
    int a, b, c;
    public Edge(int a, int b, int c) {
        this.a = a;
        this.b = b;
        this.c = c;
    }
}

private class Node {
    int value;
    int depth;
    public Node(int value, int depth) {
        this.value = value;
        this.depth = depth;
    }
}
</code></pre>

<p>```</p>

<script language="javaScript">
$(document).ready( function () { $("a[href^='http']:not([href*='" + location.hostname + "'])").attr('target', '_blank'); })
</script>

]]></content>
  </entry>
  
</feed>
