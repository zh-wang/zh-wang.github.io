<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithm | Welcome to FutureAppLaboratory]]></title>
  <link href="http://zh-wang.github.io/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://zh-wang.github.io/"/>
  <updated>2015-11-13T18:47:07+09:00</updated>
  <id>http://zh-wang.github.io/</id>
  <author>
    <name><![CDATA[viennakanon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codility Calcium 2015]]></title>
    <link href="http://zh-wang.github.io/blog/2015/09/14/codility-calcium-2015/"/>
    <updated>2015-09-14T11:37:59+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/09/14/codility-calcium-2015</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This is an solution in java of Codility Calcium 2015.</p>

<p>You can find problem definition here. <a href="https://codility.com/programmers/challenges/">https://codility.com/programmers/challenges/</a></p>

<p>The key logic is using binary search to limit the answer area.</p>

<p>For each iteration of binary search, detail steps are written in the following code.</p>

<h2>Optimization for 100% solution</h2>

<p>This problem is very time strict for java.</p>

<p>For large data set, my old answer which use many <code>Collections</code> always runs for 6+ seconds, but time limit is only 4 seconds.</p>

<p>So I replace almost all of them with array in heavy calculation part, to reduce time consuming of GC.</p>

<p>This results an 3+ seconds for each iteration of binary search.</p>

<p><a href="https://codility.com/cert/view/certTC8BGX-RJA53D2WHXPHGD5A/details">https://codility.com/cert/view/certTC8BGX-RJA53D2WHXPHGD5A/details</a></p>

<pre><code class="java">
import java.util.*;

public class TrafficCamera {

    private int rootIndex = 0;
    private int largestId = 0;
    private int sortedSubtreeDiameters[] = new int[50001];
    private Node nodeMap[] = new Node[50001];
    private boolean visited[] = new boolean[50001];
    private int diameter[] = new int[50001];

    static class Node {
        public int id;
        public List&lt;Integer&gt; edgeList;
        public Node(int v) {
            this.id = v;
            edgeList = new ArrayList&lt;Integer&gt;();
        }
        public void addEdge(Integer t) {
            edgeList.add(t);
        }
    }

    public int solution(int[] A, int[] B, int K) {
        int n = A.length;
        for (int i = 0; i &lt; n; i++) {
            if (nodeMap[A[i]] == null) {
                nodeMap[A[i]] = new Node(A[i]);
            }
            if (nodeMap[B[i]] == null) {
                nodeMap[B[i]] = new Node(B[i]);
            }
            final Node na = nodeMap[A[i]];
            final Node nb = nodeMap[B[i]];
            na.addEdge(B[i]);
            nb.addEdge(A[i]);
            largestId = Math.max(largestId, A[i]);
            largestId = Math.max(largestId, B[i]);
        }

        rootIndex = A[0];
        int res = Integer.MAX_VALUE;

        int low = 0, high = Math.min(900, largestId);
        while (low &lt;= high) {
            int mid = (low + high) / 2;
            if (isAvailabel(K, mid)) {
                res = Math.min(res, mid);
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return res;
    }

    public boolean isAvailabel(int cameraLimit, int notCoveredLength) {
        for (int i = 0; i &lt; visited.length; i++) visited[i] = false;
        for (int i = 0; i &lt; diameter.length; i++) diameter[i] = -1;
        if (dfs(nodeMap[rootIndex], notCoveredLength) &gt; cameraLimit) {
            return false;
        }
        return true;
    }

    private int dfs(Node node, int limit) {
        if (node == null || visited[node.id]) {
            return 0;
        }

        visited[node.id] = true;

        int counter = 0;
        for (Integer id : node.edgeList) {
            counter += dfs(nodeMap[id], limit);
        }

        /*
                      @
                    /  \
                  @      @(current)
                / \    / \\\
               @  @    a b c d

         step 1: Sort diameters of subtrees in reverse order, store them in an array
         step 2: For each adjacent pair in the sorted array, e.g. [a, b], [b, c], [c, d].
            If a + b + 2 &gt; limit, we break the edge connecting current node to a, and counter plus 1.
            Do the same for [b, c] and [c, d]
         step 3: For last child d. or if current node has only one child.
            If d + 1 &gt; limit, we break the edge connecting current node to a, and counter plus 1.
         step 4: Set diameter of current node to the largest one of the remains(not broken ones).

         */

        /* step 1 */
        int n = 0;
        for (Integer id : node.edgeList) {
            if (diameter[id] != -1) {
                sortedSubtreeDiameters[n++] = (diameter[id]);
            }
        }

        Arrays.sort(sortedSubtreeDiameters, 0, n);
        for (int i = 0; i &lt; n / 2; i++) { // reverse order
            int temp = sortedSubtreeDiameters[i];
            sortedSubtreeDiameters[i] = sortedSubtreeDiameters[n - 1 - i];
            sortedSubtreeDiameters[n - 1 - i] = temp;
        }

        /* step 2 */
        int maxDiameterAfterRemoval = -1;
        for (int i = 0; i &lt; n - 1; i++) {
            if (sortedSubtreeDiameters[i] + sortedSubtreeDiameters[i+1] + 2 &gt; limit) {
                counter++;
            } else {
                maxDiameterAfterRemoval = Math.max(maxDiameterAfterRemoval, sortedSubtreeDiameters[i]);
            }
        }

        /* step 3 */
        if (n &gt;= 1) {
            int i = n - 1;
            if (sortedSubtreeDiameters[i] + 1 &gt; limit) {
                counter++;
            } else {
                maxDiameterAfterRemoval = Math.max(maxDiameterAfterRemoval, sortedSubtreeDiameters[i]);
            }
        }

        /* step 4 */
        // if subtrees are all removed, we can treat current node as a leaf, so diameter becomes 0
        if (maxDiameterAfterRemoval == -1) {
            diameter[node.id] = 0;
        } else { // if still some subtrees remain, then set current node's diameter as one plus the largest
            diameter[node.id] = maxDiameterAfterRemoval + 1;
        }

        return counter;
    }

}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Longest Increasing Subsequence]]></title>
    <link href="http://zh-wang.github.io/blog/2015/07/15/longest-increasing-subsequence/"/>
    <updated>2015-07-15T22:16:50+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/07/15/longest-increasing-subsequence</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>In computer science, the longest increasing subsequence problem is to find a subsequence of a given sequence in which the subsequence&rsquo;s elements are in sorted order, lowest to highest, and in which the subsequence is as long as possible.</p>

<p>For example, a longest increasing subsequence of <code>0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15</code> is <code>0, 2, 6, 9, 11, 15</code>.</p>

<h2>An O(N<sup>2</sup>) Solution</h2>

<p>We define a $dp$ table, which $dp[i]$ is the length of a longest subsequence which ends at $inputs[i]$.</p>

<p>For each $inputs[i]$, we search every inputs before it, and choose the longest possible $dp$ value from them, fill it in $dp[i]$.</p>

<pre><code class="java">    private int[] inputs = {0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15};
    private int[] dp = new int[128];

    public int solution() {
        for (int i = 0; i &lt; dp.length; i++) { dp[i] = 0; }
        dp[0] = 1;

        for (int i = 1; i &lt; inputs.length; i++) {
            int longest = 1;
            for (int j = 0; j &lt; i; j++) {
                if (inputs[i] &gt; inputs[j]) {
                    longest = Math.max(longest, dp[j] + 1);
                }
            }
            dp[i] = longest;
        }
        return dp[inputs.length - 1];
    }
</code></pre>

<h2>An O(N*Log(N)) Solution</h2>

<p>We define a $seq$ table, which $seq[i]$ is the ending number of subsequence whose length is $i$.</p>

<h4>Note that, $seq$ is always in increasing order.</h4>

<p>Because if these exist $i &lt; j$ and $seq[i] > seq[j]$, which means a longer subsequence end with a smaller number.</p>

<p>Then we could generate a new subsequence, which length is $i$, by removing $j - i$ numbers from tail of $j$-length subsequence. The ending number of the new subsequence will be smaller than $seq[i]$.</p>

<p>Therefore, we can use binary search in each iteration, to find the largest $seq[k]$ which is smaller than $inputs[i]$. If $k$ can be found ($k > -1$), then we update the number stored in $seq[k]$ with $inputs[i]$ if $inputs[i] &lt; seq[k]$.</p>

<p>This yields an <strong>O(N*Log(N))</strong> solution.</p>

<pre><code class="java">    private int[] seq = new int[128];

    public int solution2() {
        for (int i = 0; i &lt; seq.length; i++) { seq[i] = Integer.MAX_VALUE; }

        int res = Integer.MIN_VALUE;
        for (int i = 0; i &lt; inputs.length; i++) {
            int longest = 1;
            int bestSeqLength = binarySearch(seq, 0, i, inputs[i]);
            if (bestSeqLength &gt; -1) {
                longest = bestSeqLength + 1;
            }
            seq[longest] = Math.min(seq[longest], inputs[i]);
            res = Math.max(res, longest);
        }
        return res;
    }

    public int binarySearch(int[] array, int begin, int end, int target) {
        int s = begin;
        int t = end;
        int m = s;
        int result = -1; // !!!
        while (s &lt;= t) {
            m = (s + t) / 2;
            if (array[m] &lt; target) {
                s = m + 1;
                result = m; // result index, which array.get(result) is most close to &amp; less than target
            } else if (array[m] == target) {
                return m;
            } else {
                t = m - 1;
            }
        }
        return result;
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Popcount in Ruby]]></title>
    <link href="http://zh-wang.github.io/blog/2015/05/13/popcount-in-ruby/"/>
    <updated>2015-05-13T16:14:27+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/05/13/popcount-in-ruby</id>
    <content type="html"><![CDATA[<h3>Source</h3>

<pre><code class="ruby">    # Assume v is 32-bit long
    def popcount(v)
        v = v - ((v &gt;&gt; 1) &amp; 0x55555555)
        v = (v &amp; 0x33333333) + ((v &gt;&gt; 2) &amp; 0x33333333)
        ((v + (v &gt;&gt; 4) &amp; 0xF0F0F0F) * 0x1010101) &gt;&gt; 24
    end

    puts popcount(8)
</code></pre>

<h3>Analysis</h3>

<p>For example, let v = 01001110 (lowest 8 bits, others are all 0, in binary)</p>

<h4>Step 1</h4>

<pre><code>v = v - ((v &gt;&gt; 1) &amp; 0x55555555)
</code></pre>

<p>This step count 1&rsquo;s appearance in each 2bits.</p>

<pre><code>0x5 = 0101

In binary,
00 - 00 &amp; 01 = 00 (0 1s in 00)
01 - 00 &amp; 01 = 01 (1 1s in 01)
10 - 01 &amp; 01 = 01 (1 1s in 10)
11 - 01 &amp; 01 = 10 (2 1s in 11)

01001110 -&gt; 01001001
</code></pre>

<h4>Step 2</h4>

<pre><code>v = (v &amp; 0x33333333) + ((v &gt;&gt; 2) &amp; 0x33333333)
</code></pre>

<p>This step mask high 2 bits to 0 in each 4 bits, then add low 2 bits in each 4 bits.</p>

<pre><code>In binary,
0100 -&gt; 0000 + 0001 -&gt; 0001
1001 -&gt; 0001 + 0010 -&gt; 0011

01001110 -&gt; 00010011
</code></pre>

<h4>Step 3</h4>

<pre><code>((v + (v &gt;&gt; 4) &amp; 0xF0F0F0F) * 0x1010101) &gt;&gt; 24
</code></pre>

<p>This step <code>(v + (v &gt;&gt; 4) &amp; 0xF0F0F0F)</code> add high 4 bits to low 4 bits, then <code>&amp; 0xF0F0F0F</code> mask high 4 bit to 0 in each 8 bits.</p>

<p><code>* 0x1010101</code> can be treaded as <code>* (0x01000000 + 0x00010000 + 0x00000100 + 0x00000001)</code>.</p>

<p><code>* 0x0100000</code> means left shift 24 times.</p>

<p><code>* 0x0001000</code> means left shift 16 times.</p>

<p><code>* 0x0000010</code> means left shift 8 times.</p>

<p><code>* 0x0000000</code> do nothing.</p>

<p>Then we add them up. Now we have the sum of 1s&#8217; count in each 8 bits, stored in a 32-bits data&rsquo;s highest 8 bits.</p>

<p><code>&gt;&gt; 24</code> outputs the sum.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FB HackerCup 2015 R1 40:CorporateGifting]]></title>
    <link href="http://zh-wang.github.io/blog/2015/04/03/fb-hackcup-2015-r1-40-corporategifting/"/>
    <updated>2015-04-03T23:48:59+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/04/03/fb-hackcup-2015-r1-40-corporategifting</id>
    <content type="html"><![CDATA[<p>Problem definition can be found <a href="https://www.facebook.com/hackercup/problems.php?pid=759650454070547&amp;round=344496159068801">here</a>.<br/>
Need some tricks on recursion.<br/>
And if keep dp size for about $\sqrt{N}$ will cause the program run too LONG!</p>

<pre><code class="cpp">#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;cmath&gt;
#include &lt;climits&gt;
#include &lt;cassert&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;
#include &lt;sstream&gt;
#include &lt;numeric&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;utility&gt;
#include &lt;iomanip&gt;
#include &lt;stack&gt;
#include &lt;list&gt;
#include &lt;sstream&gt;
#include &lt;vector&gt;
using namespace std;
#define PB push_back
#define MP make_pair
#define REP(i, n) for (int i(0); i &lt; n; ++i)
#define REP1(i, n) for (int i(1); i &lt; n; ++i)
#define REP1N(i, n) for (int i(1); i &lt;= n; ++i)
#define FOR(i, a, b) for (int i(a); i &lt;= b; ++i)

typedef long long ll;
typedef vector&lt;ll&gt; vll;
typedef vector&lt;int&gt; vi;
typedef vector&lt;vi&gt; vvi;
typedef vector&lt;bool&gt; vb;
typedef vector&lt;vb&gt; vvb;
typedef pair&lt;int, int&gt; pii;

int tc;
int n;
int parentIndex;

struct node {
    node() {
        child = vector&lt;int&gt;();
    }
    vector&lt;int&gt; child;
};

node nodes[200001];
pii best1[200001];
pii best2[200001];

bool sort_bests(const pii&amp; left, const pii&amp; right) {
    if (left.second == right.second) {
        return left.first &lt; right.first;
    } else {
        return left.second &lt; right.second;
    }
}

void solve(int depth, int rootIndex) {
    node* root = &amp;nodes[rootIndex];
    int csize = root-&gt;child.size();
    REP(j, csize) {
        solve(++depth, root-&gt;child[j]);
    }

    int maxColor = ceil(sqrt(n));
    REP1N(rootColor, maxColor) { // find color should be choosen for root
        int _res = 0; // subtree sum of root, when picking rootColor
        REP(j, csize) { // for each child
            int childIndex = root-&gt;child[j];
            node* child = &amp;nodes[childIndex];
            int __res = 0;
            if (rootColor == best1[childIndex].first)
                __res += best2[childIndex].second;
            else
                __res += best1[childIndex].second;
            _res += __res;
        }
        _res += rootColor;
        pii new_best = MP(rootColor, _res);
        if (sort_bests(new_best, best1[rootIndex])) {
            best2[rootIndex] = best1[rootIndex];
            best1[rootIndex] = new_best;
        } else if (sort_bests(new_best, best2[rootIndex])) {
            best2[rootIndex] = new_best;
        }
    }
}

int main(int argc, char* argv[]) {
    cin &gt;&gt; tc;
    REP(i, tc) {
        cin &gt;&gt; n;
        REP(j, 200001) {
            nodes[j] = node();
            best1[j] = MP(INT_MAX, INT_MAX);
            best2[j] = MP(INT_MAX, INT_MAX);
        }
        REP(j, n) {
            cin &gt;&gt; parentIndex;
            nodes[parentIndex].child.PB(j + 1);
        }
        solve(1, 1);
        int res = best1[1].second &gt; best2[1].second ? best2[1].second : best1[1].second;
        cout &lt;&lt; res &lt;&lt; endl;
    }
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FB HackerCup 2015 R1 25:Autocomplete]]></title>
    <link href="http://zh-wang.github.io/blog/2015/04/02/fb-hackercup-2015-r1-25-autocomplete/"/>
    <updated>2015-04-02T18:16:03+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/04/02/fb-hackercup-2015-r1-25-autocomplete</id>
    <content type="html"><![CDATA[<p>Problem definition can be found <a href="https://www.facebook.com/hackercup/problems.php?pid=313229895540583&amp;round=344496159068801">here</a>.<br/>
This is a basic problem which can be solved directly by a Tri-tree.</p>

<pre><code class="cpp">#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;cmath&gt;
#include &lt;climits&gt;
#include &lt;cassert&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;
#include &lt;sstream&gt;
#include &lt;numeric&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;utility&gt;
#include &lt;iomanip&gt;
#include &lt;stack&gt;
#include &lt;list&gt;
#include &lt;sstream&gt;
using namespace std;
#define PB push_back
#define MP make_pair
#define REP(i, n) for (int i(0); i &lt; n; ++i)
#define REP1(i, n) for (int i(1); i &lt; n; ++i)
#define FOR(i, a, b) for (int i(a); i &lt;= b; ++i)

struct node {
    node() {
        childs = new node*[26];
        REP(i, 26) childs[i] = NULL;
    }
    node** childs;
};

int tc;
int n;
string word;

int findWordAndBuildTree(node* root, string word) {
    node* p = root;
    int i = 0;
    int res = 0;
    bool found = false;
    REP(i, word.length()) {
        if (p-&gt;childs[word[i]-'a'] == NULL) {
            if (!found) {
                res = i + 1;
                found = true;
            }
            p-&gt;childs[word[i]-'a'] = new node();
        }
        p = p-&gt;childs[word[i]-'a'];
    }
    return res;
}

int main(int argc, char* argv[]) {
    cin &gt;&gt; tc;
    REP(i, tc) {
        cin &gt;&gt; n;
        node* root = new node();
        int res = 0;
        REP(j, n) {
            cin &gt;&gt; word;
            res += findWordAndBuildTree(root, word);
        }
        cout &lt;&lt; res &lt;&lt; endl;
    }
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
