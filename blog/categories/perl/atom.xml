<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Perl | Welcome to FutureAppLaboratory]]></title>
  <link href="http://zh-wang.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://zh-wang.github.io/"/>
  <updated>2015-11-27T18:41:36+09:00</updated>
  <id>http://zh-wang.github.io/</id>
  <author>
    <name><![CDATA[viennakanon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[checkstack.plを遊んでみた]]></title>
    <link href="http://zh-wang.github.io/blog/2015/05/14/check-stack-usage-of-cpp-code/"/>
    <updated>2015-05-14T15:45:31+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/05/14/check-stack-usage-of-cpp-code</id>
    <content type="html"><![CDATA[<p>偶には再帰メソッドの消費メモリーが気になるので、</p>

<p>どうやって調べるのを調べたら、Linux OSに付いている<code>checkstack.pl</code>を見つけた。</p>

<p>ソースをgistに上げました。<a href="https://gist.github.com/zh-wang/64ff3e65dbcab0096f92">checkstack.pl</a></p>

<p>ちなみに、154行目の<code>next if ($size &lt; 100);</code>をコメントアウト済み。</p>

<p>そうすれば、スタックサイズが100以下のメソッドもリストアップしてくれた。</p>

<h3>テスト用のソース</h3>

<pre><code class="cpp">    using namespace std;

    struct Point {
        float px;
        float py;
        Point(float _x, float _y):px(_x),py(_y) {}
    };

    int func() {
        int i = 4;
        int j = 4;
        return i + j;
    }

    void func_arr_int_1() {
        int arr[1];
        arr[0] = 0xFFFFFFFF;
    }

    void func_arr_int_2() {
        int arr[2];
    }

    void func_arr_int_3() {
        int arr[3];
    }

    void func_arr_int_4() {
        int arr[4];
    }

    void func_point() {
        Point p = Point(0.0f, 0.0f);
    }

    int main(int argc, char* argv[]) {
        func();
        func_arr_int_1();
        func_arr_int_2();
        func_arr_int_3();
        func_arr_int_4();
        func_point();
        return 0;
    }
</code></pre>

<h3>使う</h3>

<p>macなのでobjdumpではなくgobjdumpを使う。homebrewでインストールすると便利</p>

<pre><code>g++ stack_test.cpp
gobjdump -d a.out | checkstack
</code></pre>

<h3>結果</h3>

<pre><code>0x000100000e14 __Z14func_arr_int_2v []:   16
0x000100000e33 __Z14func_arr_int_2v []:   16
0x000100000e44 __Z14func_arr_int_3v []:   32
0x000100000e63 __Z14func_arr_int_3v []:   32
0x000100000e74 __Z14func_arr_int_4v []:   32
0x000100000e93 __Z14func_arr_int_4v []:   32
0x000100000ea4 __Z10func_pointv []:   16
0x000100000ebe __Z10func_pointv []:   16
0x000100000ed4 _main []:    32
0x000100000f09 _main []:    32
0x000100000f14 __ZN5PointC1Eff []:   16
0x000100000f39 __ZN5PointC1Eff []:   16
</code></pre>

<p>今のコンパイラって結構やってくれるな。</p>

<p><code>func1</code>ではレジストで操作したからスタック消費はなし。</p>

<p><code>func_arr_int_1</code>がスタック消費がないのは驚いた。size = 1のarrayは最適化されてなくなったみたい。</p>

<p>x64マシンなので、メモリー最小単位は16byteになるのか？</p>

<p><code>func_arr_int_2</code>は16byte。<code>func_arr_int_3</code>は実際24byteだと思うが、スタックサイズは32byteになった。メモリーは２単位取ったね。</p>

<h3>checkstack.plの原理</h3>

<pre><code> elsif ($arch =~ /^x86(_64)?$/ || $arch =~ /^i[3456]86$/) {
    #c0105234:       81 ec ac 05 00 00       sub    $0x5ac,%esp
    # or
    #    2f60:    48 81 ec e8 05 00 00       sub    $0x5e8,%rsp
    $re = qr/^.*[as][du][db]    \$(0x$x{1,8}),\%(e|r)sp$/o;
    $dre = qr/^.*[as][du][db]    (%.*),\%(e|r)sp$/o;
}
</code></pre>

<p>逆コンパイルされたコードの中の<code>add</code>, <code>sub</code>, <code>esp</code>, <code>rsp</code>を探して、スタックサイズを計算するらしい。</p>

<p>参考：<a href="http://0xcc.net/blog/archives/000115.html">http://0xcc.net/blog/archives/000115.html</a></p>
]]></content>
  </entry>
  
</feed>
