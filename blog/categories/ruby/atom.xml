<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Welcome to FutureAppLaboratory]]></title>
  <link href="http://zh-wang.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://zh-wang.github.io/"/>
  <updated>2017-09-26T16:38:59+09:00</updated>
  <id>http://zh-wang.github.io/</id>
  <author>
    <name><![CDATA[viennakanon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Popcount in Ruby]]></title>
    <link href="http://zh-wang.github.io/blog/2015/05/13/popcount-in-ruby/"/>
    <updated>2015-05-13T16:14:27+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/05/13/popcount-in-ruby</id>
    <content type="html"><![CDATA[<h3>Source</h3>

<pre><code class="ruby">    # Assume v is 32-bit long
    def popcount(v)
        v = v - ((v &gt;&gt; 1) &amp; 0x55555555)
        v = (v &amp; 0x33333333) + ((v &gt;&gt; 2) &amp; 0x33333333)
        ((v + (v &gt;&gt; 4) &amp; 0xF0F0F0F) * 0x1010101) &gt;&gt; 24
    end

    puts popcount(8)
</code></pre>

<h3>Analysis</h3>

<p>For example, let v = 01001110 (lowest 8 bits, others are all 0, in binary)</p>

<h4>Step 1</h4>

<pre><code>v = v - ((v &gt;&gt; 1) &amp; 0x55555555)
</code></pre>

<p>This step count 1&rsquo;s appearance in each 2bits.</p>

<pre><code>0x5 = 0101

In binary,
00 - 00 &amp; 01 = 00 (0 1s in 00)
01 - 00 &amp; 01 = 01 (1 1s in 01)
10 - 01 &amp; 01 = 01 (1 1s in 10)
11 - 01 &amp; 01 = 10 (2 1s in 11)

01001110 -&gt; 01001001
</code></pre>

<h4>Step 2</h4>

<pre><code>v = (v &amp; 0x33333333) + ((v &gt;&gt; 2) &amp; 0x33333333)
</code></pre>

<p>This step mask high 2 bits to 0 in each 4 bits, then add low 2 bits in each 4 bits.</p>

<pre><code>In binary,
0100 -&gt; 0000 + 0001 -&gt; 0001
1001 -&gt; 0001 + 0010 -&gt; 0011

01001110 -&gt; 00010011
</code></pre>

<h4>Step 3</h4>

<pre><code>((v + (v &gt;&gt; 4) &amp; 0xF0F0F0F) * 0x1010101) &gt;&gt; 24
</code></pre>

<p>This step <code>(v + (v &gt;&gt; 4) &amp; 0xF0F0F0F)</code> add high 4 bits to low 4 bits, then <code>&amp; 0xF0F0F0F</code> mask high 4 bit to 0 in each 8 bits.</p>

<p><code>* 0x1010101</code> can be treaded as <code>* (0x01000000 + 0x00010000 + 0x00000100 + 0x00000001)</code>.</p>

<p><code>* 0x0100000</code> means left shift 24 times.</p>

<p><code>* 0x0001000</code> means left shift 16 times.</p>

<p><code>* 0x0000010</code> means left shift 8 times.</p>

<p><code>* 0x0000000</code> do nothing.</p>

<p>Then we add them up. Now we have the sum of 1s&#8217; count in each 8 bits, stored in a 32-bits data&rsquo;s highest 8 bits.</p>

<p><code>&gt;&gt; 24</code> outputs the sum.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resize Gif by RMagick]]></title>
    <link href="http://zh-wang.github.io/blog/2015/03/25/resize-gif-by-rmagick/"/>
    <updated>2015-03-25T18:31:47+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/03/25/resize-gif-by-rmagick</id>
    <content type="html"><![CDATA[<p>Only source code :)</p>

<pre><code class="ruby">#!/usr/bin/env ruby
# encoding: utf-8

require 'RMagick'

img = Magick::ImageList.new("FILENAME.gif")
img.each do |frame|
  frame.resize!(0.5)
end
img.write("FILENAME_s.gif")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copy Screenshots Easier]]></title>
    <link href="http://zh-wang.github.io/blog/2015/03/02/copy-screenshot-easier/"/>
    <updated>2015-03-02T18:23:47+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/03/02/copy-screenshot-easier</id>
    <content type="html"><![CDATA[<p>When I need screenshot for blog post, I always use Mac&rsquo;s default shortcuts to take them.<br/>
It&rsquo;s super easy to do so. But Mac always store them on Desktop folder. So I have to copy it from Desktop folder to Octopress&rsquo;s image folder. And the default name for the screenshot is a bit complicated to be managed.<br/>
So I write some script to make it easier.</p>

<pre><code class="ruby">#!/usr/bin/env ruby
# encoding: utf-8

require 'fileutils'

if ARGV.length &lt; 1
  puts "Usage"
  puts "1. ruby tools.rb cp_ss -&gt; (Copy screenshot on Desktop to source/images and named with prefix of newest post's date)"
  exit
end

prefix = File.basename(Dir.glob("source/_posts/*.*")[-1]).split(/-/)[0..2].join("_")

desktop = ENV['HOME'] + "/Desktop/"
Dir.entries(desktop).each do |file|
  if File.path(file).start_with?("Screen Shot")
    origin = desktop + File.path(file)
    index = 1
    index += 1 while File.exist?(target = "source/images/%s_image%02d.png" % [prefix, index])
    puts "Copy %s -&gt; source/images/\%s. Yes[Y] or No[N]" % [origin, target]
    if (/[yY]/ =~ STDIN.gets.chomp)
      FileUtils.mv(origin, target)
      puts "Done."
    else
      puts "Skip."
    end
  end
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sample Script of AWS Ruby Api]]></title>
    <link href="http://zh-wang.github.io/blog/2015/02/16/sample-script-of-aws-ruby-api/"/>
    <updated>2015-02-16T21:26:55+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/02/16/sample-script-of-aws-ruby-api</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Some ruby script working on AWS api.<br/>
I will integrate them with Imgur&rsquo;s ruby script to build a backend of gif sharing system later :)</p>

<h2>Source Code</h2>

<pre><code class="ruby">
#!/usr/bin/env ruby
# encoding: utf-8

require 'AWS'
require 'active_support/all'
require './StringColorize.rb'

GIF_TYPE_DEFAULT = 'GIF_TYPE_DEFAULT'
GIF_TYPE_ANIMAL = 'GIF_TYPE_ANIMAL'
GIF_TYPE_DOG = 'GIF_TYPE_DOG'

IMAGE_INFO_DOMAIN_NAME = "IMAGE_INFO_DOMAIN_NAME"
GROUP_INFO_DOMAIN_NAME = "GROUP_INFO_DOMAIN_NAME"

class AWSUtils

  ACCESS_KEY_ID = 'MY_ACCESS_KEY_ID'
  SECRET_ACCESS_KEY = 'MY_SECRET_ACCESS_KEY'

  def initialize
    self.prepareSDB
    self.prepareDomainSDB(IMAGE_INFO_DOMAIN_NAME)
    self.prepareDomainSDB(GROUP_INFO_DOMAIN_NAME)
  end

  def listImageInfos
    imageDomain = getDomain(IMAGE_INFO_DOMAIN_NAME)
    list_item_by_domain_name(imageDomain) do |item|
      list_attributes_by_item(item)
    end
  end

  def listGroupInfos
    groupDomain = getDomain(GROUP_INFO_DOMAIN_NAME)
    list_item_by_domain_name(groupDomain) do |item|
      list_attributes_by_item(item)
    end
  end

  def regions()
    AWS::regions.each do |region|
      puts region.name
    end
  end

  def prepareSDB()
    if @sdb.nil?
      puts "===&gt; prepare sdb"
      @sdb = AWS::SimpleDB.new(
        :access_key_id =&gt; ACCESS_KEY_ID,
        :secret_access_key =&gt; SECRET_ACCESS_KEY,
        :region =&gt; 'ap-northeast-1')
    end
  end

  def prepareDomainSDB(domain_name)
    self.prepareSDB
    puts "===&gt; initialize domain " + domain_name
    @sdb.domains.create(domain_name)
  end

  def getDomain(domain_name)
    self.prepareSDB
    @sdb.domains[domain_name]
  end

  # ==== Deletion ====

  def deleteEmptyDomain(domain)
    self.prepareSDB
    begin
      puts domain.name + " is deleted because empty"
      domain.delete
    rescue =&gt; ex
      puts domain.name + " delete error -&gt; " + ex.to_s
    end
  end

  # ==== List ====

  def listDomainSDB(&amp;block)
    self.prepareSDB
    @sdb.domains.each do |domain|
        puts "===&gt; listing domain: " + domain.name
        unless block.nil?
          yield domain
        end
    end
  end

  def list_item_by_domain_name(domain, &amp;block)
    self.prepareSDB
    #domain = @sdb.domains.create(domain_name)
#    puts domain.items.collect(&amp;:name) # list name
    domain.items.each do |item|
      puts "===&gt; listing item: " + item.name
      unless block.nil?
        yield item
      end
    end
  end

  def list_attributes_by_item(item)
    puts "===&gt; listing attributes: " + item.attributes.to_h().to_s()
  end

  # ==== Insert ====
  #
  # item key -&gt; image's md5
  #
  # followed by a hash contains
  #
  # upload_time -&gt; ISO 8601 formatted time stamp
  # title -&gt; [title_en, title_ja, ...]
  # type -&gt; type string (Dog, Cat etc.)
  # group -&gt; [group id 1, group id 2, ...], may be nil
  # link -&gt; an Imgur link
  # json -&gt; response of uploaded image
  # comment -&gt; [], may be nil
  def insert_image_info_item(title, type, md5, link, json)
    self.prepareSDB
    image_domain = self.getDomain(IMAGE_INFO_DOMAIN_NAME)
    hash = {
      :upload_time =&gt; time2ISO8601,
      :title =&gt; [title],
      :type =&gt; [type],
      :group =&gt; [],
      :link =&gt; link,
      :json =&gt; json,
      :comment =&gt; [],
    }
    puts "===&gt; inserting: #{md5} , #{hash}"
    image_domain.items.create(md5, hash)
    puts "===&gt; ok"
  end

  # item key -&gt; group id, this is auto-generated
  #
  # followed by a hash contains
  #
  # upload_time -&gt; ISO 8601 formatted time stamp
  # title -&gt; [title_en, title_ja, ...]
  # images_md5 -&gt; [md5_1, md5_2, ...]
  # type -&gt; type string (Dog, Cat etc.)
  # comment -&gt; [], may be nil
  def insert_group_info_item(title, images_md5, type)
    self.prepareSDB
    group_domian = self.getDomain(GROUP_INFO_DOMAIN_NAME)
    uniq_id = (0...8).map { (65 + rand(26)).chr }.join
    hash = {
      :upload_time =&gt; time2ISO8601,
      :title =&gt; [title],
      :images_md5 =&gt; images_md5,
      :type =&gt; type,
      :comment =&gt; []
    }
    puts "===&gt; inserting: #{uniq_id} , #{hash}"
    group_domian.items.create(uniq_id, hash)
  end

  def duplicated(domain, key)
    !domain.items[key].attributes.to_h.empty?
  end

  def duplicated_in_domain_name(domain_name, key)
    duplicated(getDomain(domain_name), key)
  end

  def time2ISO8601
    Time.now.in_time_zone('Asia/Tokyo').iso8601
  end

end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upload Pics by Imgur Api in Ruby]]></title>
    <link href="http://zh-wang.github.io/blog/2015/02/06/upload-pics-to-imgur-by-ruby/"/>
    <updated>2015-02-06T12:43:58+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/02/06/upload-pics-to-imgur-by-ruby</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Sample ruby script. Use Imgur&rsquo;s api to upload image, with OAuth2 authorization.</p>

<h2>Source Code</h2>

<pre><code class="ruby">
#!/usr/bin/env ruby
# encoding: utf-8

require 'httpclient'
require 'json'

class ImgurUploader

  AUTH_URL = 'https://api.imgur.com/oauth2/authorize'
  EXC_TOKEN_URL = 'https://api.imgur.com/oauth2/token'
  UPLOAD_URL = 'https://api.imgur.com/3/image'
  CLIENT_ID = 'YOUR_CLIENT_ID'
  CLIENT_SE = 'YOUR_CLIENT_SECRET_KEY'

  @file_path = ""
  @access_token = ""

  def initialize(file_path)
    @file_path = file_path
  end

  def setAccessToken(access_token)
    @access_token = access_token
  end

  def applyAccessToken
    params = {
      :client_id =&gt; CLIENT_ID,
      :response_type =&gt; "pin",
      :state =&gt; 'init'
    }.map{ |x,v| "#{x}=#{v}" }.reduce{|x,v| "#{x}&amp;#{v}" }

    system('open', AUTH_URL + "?" + params)

    puts "input PIN here: "
    mypin = STDIN.gets.chomp

    body = {
      :client_id =&gt; CLIENT_ID,
      :client_secret =&gt; CLIENT_SE,
      :grant_type =&gt; "pin",
      :pin =&gt; mypin
    }.map{ |x,v| "#{x}=#{v}" }.reduce{|x,v| "#{x}&amp;#{v}" }

    client = HTTPClient.new
    @res = client.post(EXC_TOKEN_URL, body)

    puts @res.body

    result = JSON.load(@res.body)

    @access_token = result['access_token']
    puts "access_token: " + @access_token

    File.open("access_token.tmp", 'w') { # store access_token to local file,
      # no need to authorize again if access_token is not expired
      |f| f.write @access_token
    }
  end

  def upload
    auth_header = { 'Authorization' =&gt; 'Bearer ' + @access_token }
    client = HTTPClient.new
    File.open(@file_path) do |file|
      body = { 'image' =&gt; file }
      @res = client.post(UPLOAD_URL, body, auth_header)
      end
    begin
      result = JSON.load(@res.body)
      puts @res.body
      result['status']
    rescue =&gt; ex
      puts ex.message
      puts "upload failed on Authorization"
      -1
    end
  end

end

if ARGV.length &lt; 1
  puts "usage"
  puts "ruby imgur.rb [image file path]"
  exit
end

uploader = ImgurUploader.new(ARGV[0].chomp.strip)

begin
  File.open("access_token.tmp", 'r') { # read local access_token
    |f| uploader.setAccessToken(f.gets)
  }
  if uploader.upload == 200 # if uploaded
    puts "Upload ok"
  else # if upload failed by expired token
    puts "Upload failed, try to update access_token"
    uploader.applyAccessToken
    if uploader.upload == 200 # upload again
      puts "Upload ok"
    else # still fails
      puts "Upload failed, need detail check"
    end
  end
rescue =&gt; ex # local file not exists, apply for access_token and upload
  puts ex.message
  puts "No access_token is stored. Do Authorization again."
  uploader.applyAccessToken
  uploader.upload
end
</code></pre>
]]></content>
  </entry>
  
</feed>
