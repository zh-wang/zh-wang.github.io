<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Functional Programming | Welcome to FutureAppLaboratory]]></title>
  <link href="http://zh-wang.github.io/blog/categories/functional-programming/atom.xml" rel="self"/>
  <link href="http://zh-wang.github.io/"/>
  <updated>2017-04-04T18:28:40+09:00</updated>
  <id>http://zh-wang.github.io/</id>
  <author>
    <name><![CDATA[viennakanon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Functor, Monad, Applicative in Swift]]></title>
    <link href="http://zh-wang.github.io/blog/2015/10/09/functor-monad-applicative-in-swift/"/>
    <updated>2015-10-09T10:29:12+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/10/09/functor-monad-applicative-in-swift</id>
    <content type="html"><![CDATA[<p>Some Implementation in Swift.</p>

<h3>Functor</h3>

<p>Let $C$ be a constructor which takes a variable as parameter.</p>

<p>$C$ is a <strong>Functor</strong> if $C$ has the following ability.</p>

<p><script type="math/tex; mode=display">
    C[A].map(A \rightarrow B) = C[B]
</script></p>

<p>For example, we can write such a function <code>functor</code> or <code>map</code>.
&#8220;`Swift
    class Box<T> {
        var content: T
        init(content: T) {
            self.content = content
        }</p>

<pre><code>    func functor&lt;U&gt;(_ relation: (T) -&gt; U) -&gt; Box&lt;U&gt; {
        return Box&lt;U&gt;(content: relation(self.content))
    }
}

func functor&lt;T, U&gt;(box: Box&lt;T&gt;, relation: (T) -&gt; U) -&gt; Box&lt;U&gt; {
    return Box(content: relation(box.content))
}

let a = Box(content: 1)
let b = functor(box: a, relation: { $0 + 100 }).content
b // 101
</code></pre>

<pre><code>
And we can chain functors like this.
</code></pre>

<pre><code>let addup: (Int)-&gt;Int = { $0 + 1 }
let c = a.functor(addup).functor(addup).content
c // 3
</code></pre>

<pre><code>
We can also do it like Haskell
</code></pre>

<pre><code>precedencegroup chainopts {
    associativity: left
}
infix operator &lt;^&gt;: chainopts
func &lt;^&gt;&lt;T, U&gt;(a: Box&lt;T&gt;, f: (T) -&gt; U) -&gt; Box&lt;U&gt; {
    return a.functor(f)
}

let d = a &lt;^&gt; addup &lt;^&gt; addup
d.content // 3
</code></pre>

<pre><code>
### Monad

$C$ is a __Monad__ if $C$ has the following ability. This is also called as `flatmap`.

<script type="math/tex; mode=display">
    C[A].flatmap(A \rightarrow C[B]) = C[B]
</script>
</code></pre>

<pre><code>class Box&lt;T&gt; {
    var content: T
    init(content: T) {
        self.content = content
    }

    func monad&lt;U&gt;(_ relation: (T) -&gt; Box&lt;U&gt;) -&gt; Box&lt;U&gt; {
        return relation(self.content)
    }
}

func monad&lt;T, U&gt;(box: Box&lt;T&gt;, relation: (T) -&gt; Box&lt;U&gt;) -&gt; Box&lt;U&gt; {
    return relation(box.content)
}

let e = monad(box: a, relation: { Box(content: $0 + 1000) } ).content
e // 1001
let addupAndWrap: (Int)-&gt;Box&lt;Int&gt; = { Box(content: $0 + 1000) }
let f = a.monad(addupAndWrap).monad(addupAndWrap).content
f // 2001
</code></pre>

<pre><code>
Haskell-like version.
</code></pre>

<pre><code>infix operator &gt;&gt;-: chainopts
func &gt;&gt;-&lt;T, U&gt;(a: Box&lt;T&gt;, f: (T) -&gt; Box&lt;U&gt;) -&gt; Box&lt;U&gt; {
    return a.monad(f)
}
let g = a &gt;&gt;- addupAndWrap &gt;&gt;- addupAndWrap
g.content // 2001
</code></pre>

<pre><code>
### Applicative

$C$ is a __Applicative__ if $C$ has the following ability.

<script type="math/tex; mode=display">
    C[A].apply(C[A \rightarrow B]) = C[B]
</script>
</code></pre>

<pre><code>class Box&lt;T&gt; {
    var content: T
    init(content: T) {
        self.content = content
    }

    func apply&lt;U&gt;(_ relation: Box&lt;(T) -&gt; U&gt;) -&gt; Box&lt;U&gt; {
        return Box&lt;U&gt;(content: relation.content(self.content))
    }
}

func apply&lt;T, U&gt;(box: Box&lt;T&gt;, relation: Box&lt;(T) -&gt; U&gt;) -&gt; Box&lt;U&gt; {
    return Box(content: relation.content(box.content))
}

let h = apply(box: a, relation: Box(content: {$0 + 10000} )).content
h // 10001
let anBoxContainsAddup: Box&lt;(Int)-&gt;Int&gt; = Box(content: {$0 + 10000} )
let i = a.apply(anBoxContainsAddup).apply(anBoxContainsAddup).content
i // 20001
</code></pre>

<pre><code>
Haskell-like version.
</code></pre>

<pre><code>infix operator &lt;*&gt;: chainopts
func &lt;*&gt;&lt;T, U&gt;(a: Box&lt;T&gt;, f: Box&lt;(T) -&gt; U&gt;) -&gt; Box&lt;U&gt; {
    return a.apply(f)
}
let j = a &lt;*&gt; anBoxContainsAddup &lt;*&gt; anBoxContainsAddup
j.content // 20001
</code></pre>

<p>&#8220;`</p>
]]></content>
  </entry>
  
</feed>
