<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Welcome to FutureAppLaboratory]]></title>
  <link href="http://zh-wang.github.io/atom.xml" rel="self"/>
  <link href="http://zh-wang.github.io/"/>
  <updated>2014-06-19T16:59:17+09:00</updated>
  <id>http://zh-wang.github.io/</id>
  <author>
    <name><![CDATA[viennakanon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codility - Aluminium 2014 - Part 1]]></title>
    <link href="http://zh-wang.github.io/blog/2014/06/18/codility-aluminium-2014/"/>
    <updated>2014-06-18T15:54:12+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/06/18/codility-aluminium-2014</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This is an analysis of <a href="https://codility.com/programmers/challenges/">Codility &ndash; Aluminium 2014 Challenge</a>.</p>

<ul>
<li>Find the maximum sum of a compact subsequence of array elements after performing a single swap operation.</li>
<li>For example, given an array {3, -10, 4, 5}, we can swap 3 and -10 to get a compact subsequence {3, 4, 5}, which has the maximum sum 12</li>
<li>Time bound and space bound are both O(n)</li>
<li>There exists many maximum subarray algorithms, but they cannot directly applied to this problem.</li>
</ul>


<!-- more -->


<h2>Analysis</h2>

<ul>
<li>First, we should take a look at the solution while <strong>swap is not allowed</strong>.</li>
</ul>


<p>For a given array $a_0, a_1, \cdots, a_n-1$,</p>

<p><p>
The maximum sum of a compact subsequence can be expressed by the following formular.</p>

<p>$$ \max \{ \sum_{k=i}^j a_k, 0 \leq i &lt; j \leq n &ndash; 1 \} $$
</p></p>

<p><p>
Because we want the maximal part from $i$ to $j$, by thinking reversely, we can calculate the minimal <a href="http://mathworld.wolfram.com/PartialSum.html">partial sum</a> of sub array $a_0, a_1, \cdots, a_x-1$ as $f(x)$, mininal partial sum of sub array $a_x+1, a_x+2, \cdots, a_n-1$ as $g(x)$. Then use the whole sum to substract them if them are minus values.</p>

<p>let S to be the accumulation of the given array.</p>

<p>let $$
  f(x) = \min \{ \min \{ partial\_sum(p), 0 \leq p \leq x &ndash; 1 \} , 0 \}
$$ to be the minimal partial sum of sub array $a_0, a_1, \cdots, a_x-1$.</p>

<p>let $$
g(x) = \min \{ \min \{ partial\_sum(q), x + 1 \leq q \leq n &ndash; 1 \} , 0 \}
$$ to be the mininal partial sum of sub array $a_x+1, a_x+2, \cdots, a_n-w$.</p>

<p>then we calculate the following formular. $$ \max \{ S &ndash; f(x) &ndash; g(x), 0 \leq x \leq n &ndash; 1 \} $$
</p></p>

<ul>
<li>OK, then write above thought into Java, we get the following codes</li>
</ul>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">inputs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">inputs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="n">data</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">inputs</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">cal</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">cal</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">A</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">S</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Integer</span> <span class="n">integer</span> <span class="o">:</span> <span class="n">A</span><span class="o">)</span> <span class="n">S</span> <span class="o">+=</span> <span class="n">integer</span><span class="o">;</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">B</span> <span class="o">=</span> <span class="n">partial_sum</span><span class="o">(</span><span class="n">A</span><span class="o">,</span> <span class="n">compAdd</span><span class="o">);</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">F</span> <span class="o">=</span> <span class="n">partial_sum</span><span class="o">(</span><span class="n">B</span><span class="o">,</span> <span class="n">compMin</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Collections</span><span class="o">.</span><span class="na">reverse</span><span class="o">(</span><span class="n">A</span><span class="o">);</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">D</span> <span class="o">=</span> <span class="n">partial_sum</span><span class="o">(</span><span class="n">A</span><span class="o">,</span> <span class="n">compAdd</span><span class="o">);</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">G</span> <span class="o">=</span> <span class="n">partial_sum</span><span class="o">(</span><span class="n">D</span><span class="o">,</span> <span class="n">compMin</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Collections</span><span class="o">.</span><span class="na">reverse</span><span class="o">(</span><span class="n">A</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Collections</span><span class="o">.</span><span class="na">reverse</span><span class="o">(</span><span class="n">G</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">f</span> <span class="o">=</span> <span class="n">i</span> <span class="o">&ndash;</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">F</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">&ndash;</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="n">n</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">G</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'>            <span class="n">res</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">res</span><span class="o">,</span> <span class="n">S</span> <span class="o">&ndash;</span> <span class="o">(</span><span class="n">f</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">f</span> <span class="o">:</span> <span class="mi">0</span><span class="o">)</span> <span class="o">&ndash;</span> <span class="o">(</span><span class="n">g</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">g</span> <span class="o">:</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">partial_sum</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">comparator</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">res</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">data</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Integer</span> <span class="n">lastValue</span> <span class="o">=</span> <span class="n">res</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">&ndash;</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Integer</span> <span class="n">currentValue</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="n">res</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">comparator</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">lastValue</span><span class="o">,</span> <span class="n">currentValue</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">compAdd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Integer</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">o1</span> <span class="o">+</span> <span class="n">o2</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">compMax</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Integer</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">compMin</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Integer</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codility - Magnesium 2014]]></title>
    <link href="http://zh-wang.github.io/blog/2014/05/27/codility-magnesium-2014-challenge-report/"/>
    <updated>2014-05-27T19:05:37+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/05/27/codility-magnesium-2014-challenge-report</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This is an analysis of <a href="https://codility.com/programmers/challenges/">Codility &ndash; Magnesium 2014 Challenge</a>.</p>

<ul>
<li>The problem is that, finding the longest path in a weighted graph in which the weights are ascending. Vertices can be visited multiple times.</li>
<li>Here, <strong>length of a path</strong> means the number of vertices the path visits, not the weight sum of all edges that compose the path.</li>
<li>Therefore, <strong>longest path</strong> means a path that visits more vertices than any other paths for the given graph.</li>
<li>Time bound is O(V+E*log(E)).</li>
</ul>


<!-- more -->


<h2>Analysis</h2>

<ul>
<li>A classic DFS search on every vertex can do this job, despite its worst time complexity is O(VE), which cause timeout.</li>
<li>Let&rsquo;s make an O(V+E*log(E)) approach.</li>
<li>Because we do <strong>NOT</strong> need to trace the whole path, we just need to store a {<em>w</em>, <em>l</em>} pair for each vertex of the graph.</li>
<li>This pair of data means that for a vertex <em>V</em>, the longest path ends with <em>V</em> has a length <em>l</em> path, and, the largest weight of the path is <em>w</em>.</li>
<li>Then we pick edges one by one in ascending order, do some comparison and update the paired data for node which the edge connects.</li>
</ul>


<h2>Why this algorithm works?</h2>

<ul>
<li>For any <em>w_1</em> >= <em>w_2</em> and <em>l_1</em> >= <em>l_2</em>, we can always say that {<em>w_1</em>, <em>l_1</em>} is a better answer that {<em>w_2</em>, <em>l_2</em>}. Therefore, we only store the former answer. Note that, this only goes right when edges are picked by ascending order. That&rsquo;s the <strong>GREEDY</strong> algorithm works.</li>
<li>Sorting edges costs O(E*log(E)). Updating paired data costs O(V). The whole time cost is O(V+E*log(E)).</li>
</ul>


<h2>Source</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="n">Node</span> <span class="n">root</span><span class="o">;</span>
</span><span class='line'><span class="n">Edge</span><span class="o">[]</span> <span class="n">edges</span><span class="o">;</span>
</span><span class='line'><span class="n">Node</span><span class="o">[]</span> <span class="n">nodes</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">N</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">A</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">B</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">C</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">edges</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Edge</span><span class="o">[</span><span class="n">A</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">A</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">edges</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Edge</span><span class="o">(</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">B</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">C</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">edges</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Edge</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Edge</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Edge</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// TODO Auto-generated method stub</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">o1</span><span class="o">.</span><span class="na">c</span> <span class="o">-</span> <span class="n">o2</span><span class="o">.</span><span class="na">c</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">edges</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">nodes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">[</span><span class="mi">200000</span><span class="o">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">200000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">nodes</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// get start node</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">edges</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">a</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">edges</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">b</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Node</span> <span class="n">cnodefront</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
</span><span class='line'>        <span class="n">Node</span> <span class="n">cnodeend</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">[</span><span class="n">end</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Node</span> <span class="n">nextEndNode</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">[</span><span class="n">end</span><span class="o">];</span>
</span><span class='line'>        <span class="n">Node</span> <span class="n">nextStartNode</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">cnodefront</span><span class="o">.</span><span class="na">value</span> <span class="o">&lt;</span> <span class="n">edges</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">nextEndNode</span> <span class="o">=</span> <span class="n">createNextNode</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">end</span><span class="o">,</span> <span class="n">cnodefront</span><span class="o">.</span><span class="na">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">cnodeend</span><span class="o">.</span><span class="na">value</span> <span class="o">&lt;</span> <span class="n">edges</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">nextStartNode</span> <span class="o">=</span> <span class="n">createNextNode</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">cnodeend</span><span class="o">.</span><span class="na">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">nodes</span><span class="o">[</span><span class="n">end</span><span class="o">]</span> <span class="o">=</span> <span class="n">nextEndNode</span><span class="o">;</span>
</span><span class='line'>        <span class="n">nodes</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">=</span> <span class="n">nextStartNode</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Node</span> <span class="nf">createNextNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Node</span> <span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">edges</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">c</span><span class="o">,</span> <span class="n">depth</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Node</span> <span class="n">cnode</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">[</span><span class="n">end</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">depth</span> <span class="o">&gt;</span> <span class="n">cnode</span><span class="o">.</span><span class="na">depth</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="n">depth</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">node</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cnode</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Edge</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Edge</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">,</span> <span class="kt">int</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">depth</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">depth</span> <span class="o">=</span> <span class="n">depth</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<script language="javaScript">
$(document).ready( function () { $("a[href^='http']:not([href*='" + location.hostname + "'])").attr('target', '_blank'); })
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mozc完全解説02]]></title>
    <link href="http://zh-wang.github.io/blog/2014/05/01/mozc-analysis-02/"/>
    <updated>2014-05-01T15:18:39+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/05/01/mozc-analysis-02</id>
    <content type="html"><![CDATA[<h1>はじめに</h1>

<p><a href="http://zh-wang.github.io/blog/2014/04/22/mozc-analysis-01/">前回</a>では、android側からタッチ反応を発生してから、jniを通して変換エンジンのnative側が候補を返すまでを説明した。<br/>
今回ではjni部分のコードを少し説明する。</p>

<h2>What is jni?</h2>

<p>言わばjavaとc, cppとの間のインターフェイスですね。cやcppを使って、java側とデータのやり取りができる。<br/>
<a href="http://ja.wikipedia.org/wiki/Java_Native_Interface">Java Native Interface</a></p>

<h2>mozcに使われているjni</h2>

<p>java側ではMozcJNI.javaというラッパーがある。メソッドはこの通り。</p>

<ul>
<li><code>load(String, Buffer, Buffer, String)</code><br/>
  初期化用のメソッド、apkの中に入っている辞書データなどをnative側に渡す</li>
<li><code>evalCommand(byte[])</code><br/>
  native側と通信するメソッド、jniで実装</li>
<li><code>onPostLoad(String, Buffer, Buffer)</code><br/>
  loadメソッドに使われている、jniで実装</li>
<li><code>getVersion()</code><br/>
  native側のバージョン情報をjava側に渡す。loadメソッドに使われている、jniで実装</li>
</ul>


<p>jniの実装ファイルはjni/mozcjni.cc。では、<code>evalCommand(byte[])</code>を詳しく見てみよう。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// ------&gt; この矢印のあたりは、私の追加したコメントです</span>
</span><span class='line'><span class="n">jbyteArray</span> <span class="n">JNICALL</span> <span class="n">evalCommand</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">clazz</span><span class="p">,</span> <span class="n">jbyteArray</span> <span class="n">in_bytes_array</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">jboolean</span> <span class="n">is_copy</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="n">jbyte</span> <span class="o">*</span><span class="n">in_bytes</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetByteArrayElements</span><span class="p">(</span><span class="n">in_bytes_array</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">is_copy</span><span class="p">);</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">jsize</span> <span class="n">in_size</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetArrayLength</span><span class="p">(</span><span class="n">in_bytes_array</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ------&gt; commandにパースする。session/commands.protoにはcommandの定義が書かれいる。</span>
</span><span class='line'>  <span class="c1">// ------&gt; protobuf(Protocol Buffers)というライブラリを使っています。</span>
</span><span class='line'>  <span class="n">mozc</span><span class="o">::</span><span class="n">commands</span><span class="o">::</span><span class="n">Command</span> <span class="n">command</span><span class="p">;</span>
</span><span class='line'>  <span class="n">command</span><span class="p">.</span><span class="n">ParseFromArray</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">,</span> <span class="n">in_size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ------&gt; native側でcommandを処理する。結果はcommandの中に格納する。</span>
</span><span class='line'>  <span class="n">mozc</span><span class="o">::</span><span class="n">Singleton</span><span class="o">&lt;</span><span class="n">SessionHandlerSingletonAdapter</span><span class="o">&gt;::</span><span class="n">get</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getHandler</span><span class="p">()</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="n">EvalCommand</span><span class="p">(</span><span class="o">&amp;</span><span class="n">command</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Use JNI_ABORT because in_bytes is read only.</span>
</span><span class='line'>  <span class="c1">// ------&gt; JNI_ABORT: 要素列をJava配列に反映させず、要素列バッファを解放する。</span>
</span><span class='line'>  <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleaseByteArrayElements</span><span class="p">(</span><span class="n">in_bytes_array</span><span class="p">,</span> <span class="n">in_bytes</span><span class="p">,</span> <span class="n">JNI_ABORT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 変換結果はjbyteArrayとしてjava側に返す</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span> <span class="n">out_size</span> <span class="o">=</span> <span class="n">command</span><span class="p">.</span><span class="n">ByteSize</span><span class="p">();</span>
</span><span class='line'>  <span class="n">jbyteArray</span> <span class="n">out_bytes_array</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewByteArray</span><span class="p">(</span><span class="n">out_size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ------&gt; is_copy: 0の場合、生成された配列(out_bytes)を変更すると、java側にも変更される。</span>
</span><span class='line'>  <span class="c1">//                  1の場合、変更してもjava側には変更されない。</span>
</span><span class='line'>  <span class="n">jbyte</span> <span class="o">*</span><span class="n">out_bytes</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetByteArrayElements</span><span class="p">(</span><span class="n">out_bytes_array</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">is_copy</span><span class="p">);</span>
</span><span class='line'>  <span class="n">command</span><span class="p">.</span><span class="n">SerializeToArray</span><span class="p">(</span><span class="n">out_bytes</span><span class="p">,</span> <span class="n">out_size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Use 0 to copy out_bytes to out_bytes_array.</span>
</span><span class='line'>  <span class="c1">// ------&gt; 0の場合、要素列をJava配列に反映させ、要素列バッファを解放する。</span>
</span><span class='line'>  <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleaseByteArrayElements</span><span class="p">(</span><span class="n">out_bytes_array</span><span class="p">,</span> <span class="n">out_bytes</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">out_bytes_array</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>in_bytes_array</code>には、タッチされたキーの情報などが入っている。<br/>
<code>out_bytes_array</code>には、変換候補などが入っている。<br/>
<a href="http://zh-wang.github.io/blog/2014/04/22/mozc-analysis-01/">前回</a>最後のlog部分を参考してくだい。</p>

<h2>終わりに</h2>

<p>jni側の実装に関する説明はここまで。<br/>
次回では<code>evalCommand</code>メソッドをもっと細かく説明する。</p>

<script language="javaScript">
$(document).ready( function () { $("a[href^='http']:not([href*='" + location.hostname + "'])").attr('target', '_blank'); })
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zshのpromptにvcsを表示する]]></title>
    <link href="http://zh-wang.github.io/blog/2014/04/24/vcs-info-for-zsh/"/>
    <updated>2014-04-24T10:38:49+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/04/24/vcs-info-for-zsh</id>
    <content type="html"><![CDATA[<h2>What is vcs?</h2>

<blockquote><p>バージョン管理システム(Version Control System)。</p></blockquote>

<p>zshというshellを使い始めたので、便利なカスタマイズプラグインを紹介します。<br/>
今回はこちらのプラグイン<a href="https://github.com/yonchu/zsh-vcs-prompt">zsh-vcs-prompt</a>を使って、zshのpromptにバージョン管理システム(git/svn/hg
)の情報を表示ます。<br/>
現在作業中branchは一目瞭然ですね。<br/>
<img src="http://zh-wang.github.io/images/2014_04_24_zsh_vcs_snapshot.png" title="zsh_vcs" alt="zsh_vcs_snapshot" /></p>

<p>各図形の意味は</p>

<blockquote><p>Remote status:<br/>
  ↑ n : ahead<br/>
  ↓ n : behind<br/>
Local status:<br/>
  ✔ : repository clean<br/>
  ● n : there are n staged files<br/>
  ✖ n : there are n unmerged files<br/>
  ✚ n : there are n changed but unstaged files<br/>
  … n : there are n untracked files<br/>
  ⚑n : there are n stashed<br/>
  branch(n) : there are n unmerged commits to master</p></blockquote>

<!-- more -->


<h2>How to use?</h2>

<ol>
<li><p>まずは、どこかのディレクトリに、<a href="https://github.com/yonchu/zsh-vcs-prompt">zsh-vcs-prompt</a>をclone。私の場合は~/projects/に。</p></li>
<li>zshの設定ファイル.zshrcに追加すればOK。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> ~/projects/zsh-vcs-prompt/zshrc.sh
</span><span class='line'><span class="nv">ZSH_VCS_PROMPT_ENABLE_CACHING</span><span class="o">=</span><span class="s1">&#39;true&#39;</span>
</span><span class='line'><span class="nv">RPROMPT</span><span class="o">=</span><span class="s1">&#39;$(vcs_super_info)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで右端に表示されました(RPROMPTはright promptの意味なので)<br/>
<img src="http://zh-wang.github.io/images/2014_04_24_zsh_rprompt.png" title="zsh_vcs_rprompt" alt="zsh_vcs_rprompt" /></p>

<h2>Customize it</h2>

<p>右端に表示されると画面が狭い時邪魔になるので、私の場合、promptの末に表示したい。少しカストマイズが必要です。</p>

<ul>
<li>まずこれをコメントアウト</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#RPROMPT=&#39;$(vcs_super_info)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>以下のコードを.zshrcに追加。(hookしなくても動けますが、promptの中身は更新されないので、ディレクトリ移動しても、gitコマンドを実行しても変わらない。)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">typeset</span> -ga precmd_functions
</span><span class='line'>
</span><span class='line'>precmd_functions+<span class="o">=</span><span class="s1">&#39;update_prompt&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># promptを作るメソッド</span>
</span><span class='line'>get_prompt<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">result</span><span class="o">=</span><span class="s2">&quot;%{$fg[yellow]%}%T%{$reset_color%} %{$fg_bold[yellow]%}%n%{$reset_color%}@%{$fg_bold[magenta]%}%m%{$reset_color%}:%{$fg_bold[blue]%}%3~%{$reset_color%} $(vcs_super_info)%(!.#.$) &quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># コマンド実行する前にhookとして実行、promptにあるvcsを更新</span>
</span><span class='line'>update_prompt<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  get_prompt
</span><span class='line'>  <span class="nv">PROMPT</span><span class="o">=</span><span class="nv">$result</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでOK。
<img src="http://zh-wang.github.io/images/2014_04_24_zsh_vcs_snapshot.png" title="zsh_vcs" alt="zsh_vcs_snapshot" /></p>

<script language="javaScript">
$(document).ready( function () { $("a[href^='http']:not([href*='" + location.hostname + "'])").attr('target', '_blank'); })
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mozc完全解説01]]></title>
    <link href="http://zh-wang.github.io/blog/2014/04/22/mozc-analysis-01/"/>
    <updated>2014-04-22T12:20:06+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/04/22/mozc-analysis-01</id>
    <content type="html"><![CDATA[<h1>What is mozc?</h1>

<blockquote><p>Mozc is a Japanese Input Method Editor (IME) designed for multi-platform such
as Chromium OS, Android, Windows, Mac and Linux. This open-source project
originates from Google Japanese Input.</p></blockquote>

<h2>(1) ソースを手に入れよう</h2>

<p>ここからダウンロード　<a href="https://code.google.com/p/mozc/">mozc project from google code</a></p>

<p>今回使うmozcのバージョンは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MAJOR=1
</span><span class='line'>MINOR=10
</span><span class='line'>BUILD=1390
</span><span class='line'>REVISION=103
</span><span class='line'>ANDROID_VERSION_CODE=1794
</span><span class='line'>FLAG=RELEASE
</span><span class='line'>TARGET_PLATFORM=Android
</span><span class='line'>ANDROID_APPLICATION_ID=org.mozc.android.inputmethod.japanese
</span><span class='line'>ANDROID_SERVICE_NAME=org.mozc.android.inputmethod.japanese.MozcService</span></code></pre></td></tr></table></div></figure>


<p>android版のビルドはMac非対応なので、vagrantを通してVMのubuntuでビルドします。<br/>
こちらのリポジトリを使えば楽です。
<a href="https://github.com/niw/mozc">https://github.com/niw/mozc</a></p>

<p>デフォルトでビルドすると、eclipseで開けるプロジェクトは作ってくれないので、手動で作りました。こちらからダウンロードできます。<br/>
<a href="https://dl.dropboxusercontent.com/u/40868784/mozc_android.zip  ">https://dl.dropboxusercontent.com/u/40868784/mozc_android.zip  </a>
フォルダ自体とその中のprotobuff, resources_ossをeclipseにインポートすればOK。後はMozcProxyPreferenceActivityというプロジェクトを実行するだけ。</p>

<p>※ ビルドする際に、&#8221;SDK does not have any Build Tools installed.&ldquo;が表示されたら、Build Toolsをダウンロードする必要があります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /usr/bin/curl -L -O 'http://dl.google.com/android/repository/build-tools_r19-linux.zip' && unzip build-tools_r19-linux.zip -d /opt/android/android-sdk-linux/build-tools/ 
</span><span class='line'>$ mv /opt/android/android-sdk-linux/build-tools/android-4.4 /opt/android/android-sdk-linux/build-tools/19.0.0</span></code></pre></td></tr></table></div></figure>


<h2>(2) キーのタッチから、変換候補がもらうまで、簡単な解析をやります</h2>

<!-- more -->


<p>android側のフリックキーボードで「あ」を押し、タッチイベントが発生する。そうすると、以下のコードが順番的に実行されます。</p>

<p>org.mozc.android.inputmethod.japanese.ViewManager:260:onKey<br/>
ここでViewのタッチエベントをキャッチする。<br/>
↓<br/>
org.mozc.android.inputmethod.japanese.MozcService:245:onKeyEvent  <br/>
メーンサービスでKeyEventを処理する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onKeyEvent</span><span class="o">(</span> <span class="n">ProtoCommands</span><span class="o">.</span><span class="na">KeyEvent</span> <span class="n">mozcKeyEvent</span><span class="o">,</span> <span class="n">KeyEventInterface</span> <span class="n">keyEvent</span><span class="o">,</span> <span class="n">KeyboardSpecification</span> <span class="n">keyboardSpecification</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">TouchEvent</span><span class="o">&gt;</span> <span class="n">touchEventList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sendKeyWithKeyboardSpecification</span><span class="o">(</span><span class="n">mozcKeyEvent</span><span class="o">,</span> <span class="n">keyEvent</span><span class="o">,</span>
</span><span class='line'>                                   <span class="n">keyboardSpecification</span><span class="o">,</span> <span class="n">getResources</span><span class="o">().</span><span class="na">getConfiguration</span><span class="o">(),</span>
</span><span class='line'>                                   <span class="n">touchEventList</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓<br/>
org.mozc.android.inputmethod.japanese.MozcService:968:sendKeyWithKeyboardSpecification</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Sends mozcKeyEvent and/or Request to mozc server.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * This skips to send request if the given keyboard specification is</span>
</span><span class='line'><span class="cm">   * same as before.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="nf">sendKeyWithKeyboardSpecification</span><span class="o">(</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓<br/>
org.mozc.android.inputmethod.japanese.session.SessionExecutor:626:sendKey</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Sends {@code SEND_KEY} command to the server asynchronously.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendKey</span><span class="o">(</span><span class="n">ProtoCommands</span><span class="o">.</span><span class="na">KeyEvent</span> <span class="n">mozcKeyEvent</span><span class="o">,</span> <span class="n">KeyEventInterface</span> <span class="n">triggeringKeyEvent</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">TouchEvent</span><span class="o">&gt;</span> <span class="n">touchEventList</span><span class="o">,</span> <span class="n">EvaluationCallback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">evaluateAsynchronously</span><span class="o">(</span><span class="n">inputBuilder</span><span class="o">,</span> <span class="n">triggeringKeyEvent</span><span class="o">,</span> <span class="n">callback</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓<br/>
org.mozc.android.inputmethod.japanese.session.SessionExecutor:612:evaluateAsynchronously<br/>
asyncなので、handlerに渡します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kt">void</span> <span class="nf">evaluateAsynchronously</span><span class="o">(</span><span class="n">Input</span><span class="o">.</span><span class="na">Builder</span> <span class="n">inputBuilder</span><span class="o">,</span> <span class="n">KeyEventInterface</span> <span class="n">triggeringKeyEvent</span><span class="o">,</span> <span class="n">EvaluationCallback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">handler</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">handler</span><span class="o">.</span><span class="na">obtainMessage</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="n">context</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓<br/>
org.mozc.android.inputmethod.japanese.session.SessionExecutor:300:handlerMessage<br/>
SessionExecutorの中のExecutorMainCallbackがmessageを取り、処理する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * A core implementation of evaluation executing process.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * &lt;p&gt;This class takes messages from the UI thread. By using {@link SessionHandler},</span>
</span><span class='line'><span class="cm">   * it evaluates the {@link Input} in a message, and then returns the result with notifying</span>
</span><span class='line'><span class="cm">   * the UI thread if necessary.</span>
</span><span class='line'><span class="cm">   * All evaluations should be done with this class in order to keep evaluation in the incoming</span>
</span><span class='line'><span class="cm">   * order.</span>
</span><span class='line'><span class="cm">   * Package private for testing purpose.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ExecutorMainCallback</span> <span class="kd">implements</span> <span class="n">Handler</span><span class="o">.</span><span class="na">Callback</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Dispatch the message.</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">what</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">INITIALIZE_SESSION_HANDLER:</span>
</span><span class='line'>          <span class="n">sessionHandler</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">cast</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">obj</span><span class="o">));</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">DELETE_SESSION:</span>
</span><span class='line'>          <span class="n">deleteSession</span><span class="o">();</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">EVALUATE_ASYNCHRONOUSLY:</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">EVALUATE_KEYEVENT_ASYNCHRONOUSLY:</span>
</span><span class='line'>          <span class="n">evaluateAsynchronously</span><span class="o">(</span>
</span><span class='line'>              <span class="n">AsynchronousEvaluationContext</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">cast</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">obj</span><span class="o">),</span> <span class="n">message</span><span class="o">.</span><span class="na">getTarget</span><span class="o">());</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓<br/>
org.mozc.android.inputmethod.japanese.session.SessionExecutor:459</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="n">context</span><span class="o">.</span><span class="na">outCommand</span> <span class="o">=</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">inputBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓<br/>
org.mozc.android.inputmethod.japanese.session.SessionExecutor:333<br/>
ここで、JNIを通してnative変換エンジンと通信する。（同期で）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Command</span> <span class="nf">evaluate</span><span class="o">(</span><span class="n">Input</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">Command</span> <span class="n">outCommand</span> <span class="o">=</span> <span class="n">sessionHandler</span><span class="o">.</span><span class="na">evalCommand</span><span class="o">(</span><span class="n">inCommand</span><span class="o">);</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓<br/>
org.mozc.android.inputmethod.japanese.session.LocalSessionHandler:100</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Command</span> <span class="nf">evalCommand</span><span class="o">(</span><span class="n">Command</span> <span class="n">command</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">inBytes</span> <span class="o">=</span> <span class="n">command</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">outBytes</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">outBytes</span> <span class="o">=</span> <span class="n">MozcJNI</span><span class="o">.</span><span class="na">evalCommand</span><span class="o">(</span><span class="n">inBytes</span><span class="o">);</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Command</span><span class="o">.</span><span class="na">parseFrom</span><span class="o">(</span><span class="n">outBytes</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidProtocolBufferException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">MozcLog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="s">&quot;InvalidProtocolBufferException is thrown.&quot;</span>
</span><span class='line'>          <span class="o">+</span> <span class="s">&quot;We can do nothing so just return default instance.&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">MozcLog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Command</span><span class="o">.</span><span class="na">getDefaultInstance</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここでのCommand.parseFrom(outBytes)をデーバッグすると、以下の入力、出力、変換候補リストが分かります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">input</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">type</span><span class="p">:</span> <span class="no">SEND_KEY</span>
</span><span class='line'>    <span class="nb">id</span><span class="p">:</span> <span class="mi">6381052470309579002</span>
</span><span class='line'>    <span class="n">key</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">key_code</span><span class="p">:</span> <span class="mi">49</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="n">touch_events</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">source_id</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>        <span class="n">stroke</span> <span class="p">{</span>
</span><span class='line'>              <span class="ss">action</span><span class="p">:</span> <span class="no">TOUCH_DOWN</span>
</span><span class='line'>              <span class="ss">x</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">30168644</span>
</span><span class='line'>              <span class="ss">y</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">16023746</span>
</span><span class='line'>              <span class="ss">timestamp</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="n">stroke</span> <span class="p">{</span>
</span><span class='line'>              <span class="ss">action</span><span class="p">:</span> <span class="no">TOUCH_UP</span>
</span><span class='line'>              <span class="ss">x</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">30168644</span>
</span><span class='line'>              <span class="ss">y</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">16023746</span>
</span><span class='line'>              <span class="ss">timestamp</span><span class="p">:</span> <span class="mi">25</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">output</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">id</span><span class="p">:</span> <span class="mi">6381052470309579002</span>
</span><span class='line'>    <span class="ss">mode</span><span class="p">:</span> <span class="no">HIRAGANA</span>
</span><span class='line'>    <span class="ss">consumed</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">preedit</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">cursor</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>      <span class="no">Segment</span> <span class="p">{</span>
</span><span class='line'>            <span class="ss">annotation</span><span class="p">:</span> <span class="no">UNDERLINE</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\204</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">value_length</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>            <span class="ss">key</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\204</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="n">candidates</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">size</span><span class="p">:</span> <span class="mi">151</span>
</span><span class='line'>      <span class="no">Candidate</span> <span class="p">{</span>
</span><span class='line'>            <span class="ss">index</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\204\343\202\215</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Suffix&quot;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>            <span class="nb">id</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="no">Candidate</span> <span class="p">{</span>
</span><span class='line'>            <span class="ss">index</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\204</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Realtime&quot;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>            <span class="nb">id</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="no">Candidate</span> <span class="p">{</span>
</span><span class='line'>            <span class="ss">index</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\350\203\203</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Realtime&quot;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>            <span class="nb">id</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="no">Candidate</span> <span class="p">{</span>
</span><span class='line'>            <span class="ss">index</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\203</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="ss">description</span><span class="p">:</span>
</span><span class='line'>                <span class="s2">&quot;</span><span class="se">\346\215\250\343\201\246\344\273\256\345\220\215</span><span class="s2"></span>
</span><span class='line'><span class="s2">                    </span><span class="se">\345\260\217\346\233\270\343\201\215\346\226\207\345\255\227</span><span class="s2">&quot;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>            <span class="nb">id</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="sr">//</span> <span class="err">省略</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">Candidate</span> <span class="p">{</span>
</span><span class='line'>            <span class="ss">index</span><span class="p">:</span> <span class="mi">8</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\344\275\215</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Realtime&quot;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>            <span class="nb">id</span><span class="p">:</span> <span class="mi">8</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="ss">position</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>      <span class="ss">category</span><span class="p">:</span> <span class="no">SUGGESTION</span>
</span><span class='line'>      <span class="n">display_type</span><span class="p">:</span> <span class="no">MAIN</span>
</span><span class='line'>      <span class="n">footer</span> <span class="p">{</span>
</span><span class='line'>            <span class="ss">label</span><span class="p">:</span>
</span><span class='line'>          <span class="s2">&quot;Tab</span><span class="se">\343\202\255\343\203\274\343\201\247\351\201\270\346\212\236</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="n">status</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">activated</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>      <span class="ss">mode</span><span class="p">:</span> <span class="no">HIRAGANA</span>
</span><span class='line'>      <span class="n">comeback_mode</span><span class="p">:</span> <span class="no">HIRAGANA</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="n">all_candidate_words</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">candidates</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">id</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>            <span class="ss">index</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>            <span class="ss">key</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\204\343\202\215</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\204\343\202\215</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Suffix&quot;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="n">candidates</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">id</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>            <span class="ss">index</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\204</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Realtime&quot;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="n">candidates</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">id</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>            <span class="ss">index</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\350\203\203</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Realtime&quot;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="n">candidates</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">id</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'>            <span class="ss">index</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'>            <span class="ss">key</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\203</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\203</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="ss">description</span><span class="p">:</span>
</span><span class='line'>                <span class="s2">&quot;</span><span class="se">\346\215\250\343\201\246\344\273\256\345\220\215</span><span class="s2"></span>
</span><span class='line'><span class="s2">                    </span><span class="se">\345\260\217\346\233\270\343\201\215\346\226\207\345\255\227</span><span class="s2">&quot;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="sr">//</span> <span class="err">省略</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一回目はここまで。(^O^)／</p>

<script language="javaScript">
$(document).ready( function () { $("a[href^='http']:not([href*='" + location.hostname + "'])").attr('target', '_blank'); })
</script>



]]></content>
  </entry>
  
</feed>
