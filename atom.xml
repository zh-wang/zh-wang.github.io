<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Welcome to FutureAppLaboratory]]></title>
  <link href="http://zh-wang.github.io/atom.xml" rel="self"/>
  <link href="http://zh-wang.github.io/"/>
  <updated>2014-09-19T15:52:42+09:00</updated>
  <id>http://zh-wang.github.io/</id>
  <author>
    <name><![CDATA[viennakanon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Swift Part 5]]></title>
    <link href="http://zh-wang.github.io/blog/2014/09/19/learning-swift-part-5/"/>
    <updated>2014-09-19T15:14:08+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/09/19/learning-swift-part-5</id>
    <content type="html"><![CDATA[<p>Just some notes after reading Apple&rsquo;s official online guide.
Most code are from the guide, with some modification by me.</p>

<p>Tuple in switch statement is interesting.</p>

<h2>===== Full Notes =====</h2>

<h3>Control Flow</h3>

<ul>
<li><p>For-In</p>

<ul>
<li><p>Sample</p>

<pre><code>  for index in 1...5 {
      println("\(index) times 5 is \(index * 5)")
  }
  // 1 times 5 is 5
  // 2 times 5 is 10
  // 3 times 5 is 15
  // 4 times 5 is 20
  // 5 times 5 is 25
</code></pre></li>
<li><p>if no need of value from the range</p>

<pre><code>  let base = 3
  let power = 10
  var answer = 1
  for _ in 1...power {
      answer *= base
  }
  println("\(base) to the power of \(power) is \(answer)")
  // prints "3 to the power of 10 is 59049"
</code></pre></li>
<li><p>Use in array</p>

<pre><code>  let names = ["Anna", "Alex", "Brian", "Jack"]
  for name in names {
      println("Hello, \(name)!")
  }
  // Hello, Anna!
  // Hello, Alex!
  // Hello, Brian!
  // Hello, Jack!
</code></pre></li>
<li><p>Use in dictionary</p>

<pre><code>  let numberOfLegs = ["spider": 8, "ant": 6, "cat": 4]
  for (animalName, legCount) in numberOfLegs {
      println("\(animalName)s have \(legCount) legs")
  }
  // spiders have 8 legs
  // cats have 4 legs
  // ants have 6 legs
</code></pre></li>
<li><p>Use in string</p>

<pre><code>  for character in "Hello" {
      println(character)
  }
  // H
  // e
  // l
  // l
  // o
</code></pre></li>
</ul>
</li>
<li><p>For</p>

<ul>
<li><p>Sample</p>

<pre><code>  for var index = 0; index &lt; 3; ++index {
      println("index is \(index)")
  }
  // index is 0
  // index is 1
  // index is 2
</code></pre></li>
<li><p>Index is only accessible in the loop</p>

<pre><code>  var index: Int
  for index = 0; index &lt; 3; ++index {
      println("index is \(index)")
  }
  // index is 0
  // index is 1
  // index is 2
  println("The loop statements were executed \(index) times")
  // prints "The loop statements were executed 3 times"
</code></pre></li>
</ul>
</li>
<li><p>While Loops</p>

<ul>
<li><p>Snakes and Ladders</p>

<pre><code>  let finalSquare = 25
  var board = [Int](count: finalSquare + 1, repeatedValue: 0)

  board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
  board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08

  var square = 0
  var diceRoll = 0
  while square &lt; finalSquare {
      // roll the dice
      if ++diceRoll == 7 { diceRoll = 1 }
      // move by the rolled amount
      square += diceRoll
      if square &lt; board.count {
          // if we're still on the board, move up or down for a snake or a ladder
          square += board[square]
      }
  }
  println("Game over!")
</code></pre></li>
</ul>
</li>
<li><p>Do-While</p>

<ul>
<li><p>Snakes and Ladders</p>

<pre><code>  let finalSquare = 25
  var board = [Int](count: finalSquare + 1, repeatedValue: 0)
  board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
  board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08
  var square = 0
  var diceRoll = 0

  do {
      // move up or down for a snake or ladder
      square += board[square]
      // roll the dice
      if ++diceRoll == 7 { diceRoll = 1 }
      // move by the rolled amount
      square += diceRoll
  } while square &lt; finalSquare
  println("Game over!")
</code></pre></li>
</ul>
</li>
<li><p>If</p>

<ul>
<li><p>Sample
      var temperatureInFahrenheit = 30
      if temperatureInFahrenheit &lt;= 32 {
          println(&ldquo;It&rsquo;s very cold. Consider wearing a scarf.&rdquo;)
      }
      // prints &ldquo;It&rsquo;s very cold. Consider wearing a scarf.&rdquo;</p>

<pre><code>  temperatureInFahrenheit = 40
  if temperatureInFahrenheit &lt;= 32 {
      println("It's very cold. Consider wearing a scarf.")
  } else {
      println("It's not that cold. Wear a t-shirt.")
  }
  // prints "It's not that cold. Wear a t-shirt."

  temperatureInFahrenheit = 90
  if temperatureInFahrenheit &lt;= 32 {
      println("It's very cold. Consider wearing a scarf.")
  } else if temperatureInFahrenheit &gt;= 86 {
      println("It's really warm. Don't forget to wear sunscreen.")
  } else {
      println("It's not that cold. Wear a t-shirt.")
  }
  // prints "It's really warm. Don't forget to wear sunscreen."

  temperatureInFahrenheit = 72
  if temperatureInFahrenheit &lt;= 32 {
      println("It's very cold. Consider wearing a scarf.")
  } else if temperatureInFahrenheit &gt;= 86 {
      println("It's really warm. Don't forget to wear sunscreen.")
  }
</code></pre></li>
</ul>
</li>
<li><p>Switch</p>

<ul>
<li><p>Sample</p>

<pre><code>  switch some value to consider {
  case value 1:
      respond to value 1
  case value 2,
  value 3:
      respond to value 2 or 3
  default:
      otherwise, do something else
  }
</code></pre></li>
<li><p>Use with char</p>

<pre><code>  let someCharacter: Character = "e"
  switch someCharacter {
  case "a", "e", "i", "o", "u":
      println("\(someCharacter) is a vowel")
  case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m",
  "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z":
      println("\(someCharacter) is a consonant")
  default:
      println("\(someCharacter) is not a vowel or a consonant")
  }
  // prints "e is a vowel"
</code></pre></li>
<li><p>No Implicit Fallthrough</p>

<p>  In contrast with switch statements in C and Objective-C, switch statements in Swift do not fall through the bottom of each case and into the next one by default. Instead, the entire switch statement finishes its execution as soon as the first matching switch case is completed, without requiring an explicit break statement. This makes the switch statement safer and easier to use than in C, and avoids executing more than one switch case by mistake.</p></li>
<li><p>Bad case</p>

<pre><code>  let anotherCharacter: Character = "a"
  switch anotherCharacter {
  case "a":                       // Each case must contain at least one executable statement.
  case "A":
      println("The letter A")
  default:
      println("Not the letter A")
  }
  // this will report a compile-time error
</code></pre></li>
<li><p>Range Matching</p>

<pre><code>  let count = 3_000_000_000_000
  let countedThings = "stars in the Milky Way"
  var naturalCount: String
  switch count {
  case 0:
      naturalCount = "no"
  case 1...3:
      naturalCount = "a few"
  case 4...9:
      naturalCount = "several"
  case 10...99:
      naturalCount = "tens of"
  case 100...999:
      naturalCount = "hundreds of"
  case 1000...999_999:
      naturalCount = "thousands of"
  default:
      naturalCount = "millions and millions of"
  }
</code></pre></li>
<li><p>Tuple</p>

<pre><code>  let somePoint = (1, 1)
  switch somePoint {
  case (0, 0):
      println("(0, 0) is at the origin")
  case (_, 0):
      println("(\(somePoint.0), 0) is on the x-axis")
  case (0, _):
      println("(0, \(somePoint.1)) is on the y-axis")
  case (-2...2, -2...2):
      println("(\(somePoint.0), \(somePoint.1)) is inside the box")
  default:
      println("(\(somePoint.0), \(somePoint.1)) is outside of the box")
  }
  // prints "(1, 1) is inside the box"
</code></pre></li>
<li><p>Value Bindings</p>

<pre><code>  let anotherPoint = (2, 0)
  switch anotherPoint {
  case (let x, 0):
      println("on the x-axis with an x value of \(x)")
  case (0, let y):
      println("on the y-axis with a y value of \(y)")
  case let (x, y):
      println("somewhere else at (\(x), \(y))")
  }
  // prints "on the x-axis with an x value of 2"
</code></pre></li>
<li><p>Where</p>

<pre><code>  let yetAnotherPoint = (1, -1)
  switch yetAnotherPoint {
  case let (x, y) where x == y:
      println("(\(x), \(y)) is on the line x == y")
  case let (x, y) where x == -y:
      println("(\(x), \(y)) is on the line x == -y")
  case let (x, y):
      println("(\(x), \(y)) is just some arbitrary point")
  }
  // prints "(1, -1) is on the line x == -y"
</code></pre></li>
</ul>
</li>
<li><p>Control Transfer Statements</p>

<ul>
<li><p>Continue<br/>
The continue statement tells a loop to stop what it is doing and start again at the beginning of the next iteration through the loop. It says “I am done with the current loop iteration” without leaving the loop altogether.</p>

<pre><code>    let puzzleInput = "great minds think alike"
    var puzzleOutput = ""
    for character in puzzleInput {
        switch character {
        case "a", "e", "i", "o", "u", " ":
            continue
        default:
            puzzleOutput.append(character)
        }
    }
    println(puzzleOutput)
    // prints "grtmndsthnklk"
</code></pre>

<ul>
<li><p>Break</p>

<pre><code>  let numberSymbol: Character = "三"  // Simplified Chinese for the number 3
  var possibleIntegerValue: Int?
  switch numberSymbol {
  case "1", "١", "一", "๑":
      possibleIntegerValue = 1
  case "2", "٢", "二", "๒":
      possibleIntegerValue = 2
  case "3", "٣", "三", "๓":
      possibleIntegerValue = 3
  case "4", "٤", "四", "๔":
      possibleIntegerValue = 4
  default:
      break
  }
  if let integerValue = possibleIntegerValue {
      println("The integer value of \(numberSymbol) is \(integerValue).")
  } else {
      println("An integer value could not be found for \(numberSymbol).")
  }
  // prints "The integer value of 三 is 3."
</code></pre></li>
<li><p>Explicit Fallthrough<br/>
The fallthrough keyword does not check the case conditions for the switch case that it causes execution to fall into. The fallthrough keyword simply causes code execution to move directly to the statements inside the next case (or default case) block, as in C’s standard switch statement behavior.</p>

<pre><code>  let integerToDescribe = 5
  var description = "The number \(integerToDescribe) is"
  switch integerToDescribe {
  case 2, 3, 5, 7, 11, 13, 17, 19:
      description += " a prime number, and also"
      fallthrough
  default:
      description += " an integer."
  }
  println(description)
  // prints "The number 5 is a prime number, and also an integer."
</code></pre></li>
<li><p>Labeled Statements</p>

<pre><code>  gameLoop: while square != finalSquare {
      if ++diceRoll == 7 { diceRoll = 1 }
      switch square + diceRoll {
      case finalSquare:
          // diceRoll will move us to the final square, so the game is over
          break gameLoop
      case let newSquare where newSquare &gt; finalSquare:
          // diceRoll will move us beyond the final square, so roll again
          continue gameLoop
      default:
          // this is a valid move, so find out its effect
          square += diceRoll
          square += board[square]
      }
  }
  println("Game over!")
</code></pre></li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Swift Part 4]]></title>
    <link href="http://zh-wang.github.io/blog/2014/09/08/learning-swift-part-4/"/>
    <updated>2014-09-08T18:03:31+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/09/08/learning-swift-part-4</id>
    <content type="html"><![CDATA[<p>Just some notes after reading Apple&rsquo;s official online guide.
Most code are from the guide, with some modification by me.</p>

<h2>===== Full Notes =====</h2>

<h3>Strings and Characters</h3>

<ul>
<li><p>String Literals</p>

<pre><code>  let someString = "..."
</code></pre></li>
<li><p>Initializing an Empty String</p>

<pre><code>  var emptyString = ""               // empty string literal
  var anotherEmptyString = String()  // initializer syntax
  // these two strings are both empty, and are equivalent to each other

  if emptyString.isEmpty {
      println("Nothing to see here")
  }
</code></pre></li>
<li><p>String Mutability</p>

<pre><code>  var variableString = "Horse"
  variableString += " and carriage"
  // variableString is now "Horse and carriage"

  let constantString = "Highlander"
  constantString += " and another Highlander"
  // this reports a compile-time error - a constant string cannot be modified
</code></pre></li>
<li><p>Strings Are Value Types</p>

<ul>
<li>Swift’s String type is a value type. If you create a new String value, that String value is copied when it is passed to a function or method, or when it is assigned to a constant or variable. In each case, a new copy of the existing String value is created, and the new copy is passed or assigned, not the original version.</li>
<li>NSString in obj-c is NOT value type.</li>
</ul>
</li>
</ul>


<!-- more -->


<ul>
<li><p>Working with Characters</p>

<pre><code>  for character in "Dog!🐶" {
      println(character)
  }

  // a single character
  let yenSign: Character = "¥"
</code></pre></li>
<li><p>Concatenating Strings and Characters</p>

<pre><code>  let string1 = "hello"
  let string2 = " there"
  var welcome = string1 + string2
  // welcome now equals "hello there"

  var instruction = "look over"
  instruction += string2
  // instruction now equals "look over there"

  let exclamationMark: Character = "!"
  welcome.append(exclamationMark)
  // welcome now equals "hello there!"
</code></pre></li>
<li><p>String Interpolation</p>

<pre><code>  let multiplier = 3
  let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"
  // message is "3 times 2.5 is 7.5"
</code></pre></li>
<li><p>Unicode Scalars</p></li>
<li><p>Special Unicode Characters in String Literals</p>

<pre><code>  let wiseWords = "\"Imagination is more important than knowledge\" - Einstein"
  // "Imagination is more important than knowledge" - Einstein
  let dollarSign = "\u{24}"        // $,  Unicode scalar U+0024
  let blackHeart = "\u{2665}"      // ♥,  Unicode scalar U+2665
  let sparklingHeart = "\u{1F496}" // 💖, Unicode scalar U+1F496
</code></pre></li>
<li><p>Extended Grapheme Clusters</p>

<pre><code>  let eAcute: Character = "\u{E9}"                         // é
  let combinedEAcute: Character = "\u{65}\u{301}"          // e followed by ́
  // eAcute is é, combinedEAcute is é

  let precomposed: Character = "\u{D55C}"                  // 한
  let decomposed: Character = "\u{1112}\u{1161}\u{11AB}"   // ᄒ, ᅡ, ᆫ
  // precomposed is 한, decomposed is 한

  let enclosedEAcute: Character = "\u{E9}\u{20DD}"
  // enclosedEAcute is é⃝
</code></pre></li>
<li><p>Counting Characters</p>

<pre><code>  let unusualMenagerie = "Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪"
  println("unusualMenagerie has \(countElements(unusualMenagerie)) characters")
  // prints "unusualMenagerie has 40 characters"

  var word = "cafe"
  println("the number of characters in \(word) is \(countElements(word))
  // prints "the number of characters in cafe is 4"

  word += "\u{301}"    // COMBINING ACUTE ACCENT, U+0301

  println("the number of characters in \(word) is \(countElements(word))
  // prints "the number of characters in café is 4"
</code></pre></li>
<li><p>Comparing Strings</p>

<ul>
<li><p>String and Character Equality</p>

<pre><code>  let quotation = "We're a lot alike, you and I."
  let sameQuotation = "We're a lot alike, you and I."
  if quotation == sameQuotation {
      println("These two strings are considered equal")
  }
  // prints "These two strings are considered equal"
</code></pre></li>
<li><p>Two String values (or two Character values) are considered equal if their extended grapheme clusters are canonically equivalent.</p>

<pre><code>  // "Voulez-vous un café?" using LATIN SMALL LETTER E WITH ACUTE
  let eAcuteQuestion = "Voulez-vous un caf\u{E9}?"

  // "Voulez-vous un café?" using LATIN SMALL LETTER E and COMBINING ACUTE ACCENT
  let combinedEAcuteQuestion = "Voulez-vous un caf\u{65}\u{301}?"

  if eAcuteQuestion == combinedEAcuteQuestion {
      println("These two strings are considered equal")
  }
  // prints "These two strings are considered equal"
</code></pre></li>
<li><p>Conversely, LATIN CAPITAL LETTER A (U+0041, or &ldquo;A&rdquo;), as used in English, is not equivalent to CYRILLIC CAPITAL LETTER A (U+0410, or &ldquo;А&rdquo;).</p>

<pre><code>  let latinCapitalLetterA: Character = "\u{41}"

  let cyrillicCapitalLetterA: Character = "\u{0410}"

  if latinCapitalLetterA != cyrillicCapitalLetterA {
      println("These two characters are not equivalent")
  }
  // prints "These two characters are not equivalent"
</code></pre></li>
<li><p>Prefix and Suffix Equality</p>

<pre><code>  let romeoAndJuliet = [
      "Act 1 Scene 1: Verona, A public place",
      "Act 1 Scene 2: Capulet's mansion",
      "Act 1 Scene 3: A room in Capulet's mansion",
      "Act 1 Scene 4: A street outside Capulet's mansion",
      "Act 1 Scene 5: The Great Hall in Capulet's mansion",
      "Act 2 Scene 1: Outside Capulet's mansion",
      "Act 2 Scene 2: Capulet's orchard",
      "Act 2 Scene 3: Outside Friar Lawrence's cell",
      "Act 2 Scene 4: A street in Verona",
      "Act 2 Scene 5: Capulet's mansion",
      "Act 2 Scene 6: Friar Lawrence's cell"
  ]

  var act1SceneCount = 0
  for scene in romeoAndJuliet {
      if scene.hasPrefix("Act 1 ") {
          ++act1SceneCount
      }
  }
  println("There are \(act1SceneCount) scenes in Act 1")
  // prints "There are 5 scenes in Act 1"

  var mansionCount = 0
  var cellCount = 0
  for scene in romeoAndJuliet {
      if scene.hasSuffix("Capulet's mansion") {
          ++mansionCount
      } else if scene.hasSuffix("Friar Lawrence's cell") {
          ++cellCount
      }
  }
  println("\(mansionCount) mansion scenes; \(cellCount) cell scenes")
  // prints "6 mansion scenes; 2 cell scenes"
</code></pre></li>
<li><p>A collection of UTF-8 code units (accessed with the string’s utf8 property)</p></li>
<li>A collection of UTF-16 code units (accessed with the string’s utf16 property)</li>
<li>A collection of 21-bit Unicode scalar values, equivalent to the string’s UTF-32 encoding form (accessed with the string’s unicodeScalars property)</li>
</ul>
</li>
<li><p>UTF-8 Representation</p>

<pre><code>  let dogString = "Dog‼🐶"

  for codeUnit in dogString.utf8 {
      print("\(codeUnit) ")
  }
  print("\n")
  // 68 111 103 226 128 188 240 159 144 182
</code></pre></li>
<li><p>UTF-16 Representation</p>

<pre><code>  for codeUnit in dogString.utf16 {
      print("\(codeUnit) ")
  }
  print("\n")
  // 68 111 103 8252 55357 56374
</code></pre></li>
<li><p>Unicode Scalar Representation</p>

<pre><code>  for scalar in dogString.unicodeScalars {
      print("\(scalar.value) ")
  }
  print("\n")
  // 68 111 103 8252 128054

  for scalar in dogString.unicodeScalars {
      println("\(scalar) ")
  }
  // D
  // o
  // g
  // ‼
  // 🐶
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning-swift-part-3]]></title>
    <link href="http://zh-wang.github.io/blog/2014/09/05/learning-swift-part-3/"/>
    <updated>2014-09-05T17:59:28+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/09/05/learning-swift-part-3</id>
    <content type="html"><![CDATA[<p>Just some notes after reading Apple&rsquo;s official online guide.
Most code are from the guide, with some modification by me.</p>

<h2>===== Full Notes =====</h2>

<h3>Basic Operators</h3>

<ul>
<li><p>Terminology</p>

<pre><code>  - Unary
  - Binary
  - Ternary (There is only one in a ? b :c)
</code></pre></li>
<li><p>Assignment Operator</p>

<pre><code>  // Not a vaild assignment
  if x = y {

  }
</code></pre></li>
<li><p>Arithmetic Operators</p>

<ul>
<li>Not allow overflow.</li>
<li>You can opt in to value overflow behavior by using Swift&rsquo;s overflow operators (such as a &amp;+ b).</li>
<li><p>The addition operator is also supported for <strong>String</strong> concatenation.</p>

<p>  let dog: Character = &ldquo;🐶&rdquo;
  let cow: Character = &ldquo;🐮&rdquo;
  let dogCow = dog + cow
  // dogCow is equal to &ldquo;🐶🐮&rdquo;</p></li>
</ul>
</li>
<li><p>Remainder Operator</p>

<ul>
<li><code>9 % 4 // equals 1</code></li>
<li><code>-9 % 4 // equals -1</code></li>
<li><code>-9 % 4 // equals -9 % -4</code></li>
</ul>
</li>
</ul>


<!-- more -->


<p></p>

<ul>
<li><p>Floating-Point Remainder Calculations</p>

<ul>
<li><code>8 % 2.5 // equals 0.5</code></li>
</ul>
</li>
<li><p>Increment and Decrement Operators</p>

<ul>
<li><code>++</code> and <code>--</code> works the same as C</li>
</ul>
</li>
<li><p>Unary Minus Operator and Unary Plus Operator</p>

<ul>
<li><code>+</code> do <strong>NOT</strong> change the value</li>
</ul>
</li>
<li><p>Compound Assignment Operators</p>

<pre><code>  var a = 1
  a += 2
</code></pre></li>
<li><p>Comparison Operators</p>

<pre><code>  Equal to (a == b)
  Not equal to (a != b)
  Greater than (a &gt; b)
  Less than (a &lt; b)
  Greater than or equal to (a &gt;= b)
  Less than or equal to (a &lt;= b)
</code></pre></li>
<li><p>Nil Coalescing Operator</p>

<ul>
<li><p>The nil coalescing operator (a ?? b) unwraps an optional a if it contains a value, or returns a default value b if a is nil.</p>

<p>  let defaultColorName = &ldquo;red&rdquo;
  var userDefinedColorName: String?   // defaults to nil</p>

<p>  var colorNameToUse = userDefinedColorName ?? defaultColorName
  // userDefinedColorName is nil, so colorNameToUse is set to the default of &ldquo;red&rdquo;</p></li>
</ul>
</li>
<li><p>Range Operators</p>

<pre><code>  for index in 1...5 {
      println("\(index) times 5 is \(index * 5)")
  }
  // 1 times 5 is 5
  // 2 times 5 is 10
  // 3 times 5 is 15
  // 4 times 5 is 20
  // 5 times 5 is 25
</code></pre></li>
<li><p>Half-Open Range Operator</p>

<pre><code>  let names = ["Anna", "Alex", "Brian", "Jack"]
  let count = names.count
  for i in 0..&lt;count {
      println("Person \(i + 1) is called \(names[i])")
  }
  // Person 1 is called Anna
  // Person 2 is called Alex
  // Person 3 is called Brian
  // Person 4 is called Jack&gt;
</code></pre></li>
<li><p>Logical Operators</p>

<ul>
<li>Logical NOT (!a)</li>
<li>Logical AND (a &amp;&amp; b)</li>
<li>Logical OR (a || b)</li>
<li>Logical NOT (!a)</li>
</ul>
</li>
<li><p>Combining Logical Operators</p>

<pre><code>  if enteredDoorCode &amp;&amp; passedRetinaScan || hasDoorKey || knowsOverridePassword {
      println("Welcome!")
  } else {
      println("ACCESS DENIED")
  }
  // prints "Welcome!"
</code></pre></li>
<li><p>Explicit Parentheses</p>

<pre><code>  if (enteredDoorCode &amp;&amp; passedRetinaScan) || hasDoorKey || knowsOverridePassword {
      println("Welcome!")
  } else {
      println("ACCESS DENIED")
  }
  // prints "Welcome!"
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Swift Part 2]]></title>
    <link href="http://zh-wang.github.io/blog/2014/09/05/learning-swift-part-2/"/>
    <updated>2014-09-05T15:06:10+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/09/05/learning-swift-part-2</id>
    <content type="html"><![CDATA[<p>Just some notes after reading Apple&rsquo;s official online guide.
Most code are from the guide, with some modification by me.</p>

<h2>===== Full Notes =====</h2>

<h3>Basics</h3>

<ul>
<li><p>Declaring Constant and Variables</p>

<pre><code>  let maximumNumberOfLoginAttempts = 10
  var currentLoginAttempt = 0

  var x = 0.0, y = 0.0, z = 0.0
</code></pre></li>
<li><p>Type Annotations</p>

<pre><code>  var welcomeMessgae: String
  welcomeMessgae = "Hello"

  var red, green, blue: Double // Multiple variables defined
</code></pre></li>
<li><p>Naming Constants and Variables</p>

<pre><code>  let π = 3.14159
  let 你好 = "你好世界"
  let 🐶🐮 = "dogcow"
</code></pre></li>
</ul>


<!-- more -->


<ul>
<li><p>Integers</p>

<ul>
<li><p>Integer Bounds</p>

<pre><code>  let minValue = UInt8.min  // minValue is equal to 0, and is of type UInt8
  let maxValue = UInt8.max  // maxValue is equal to 255, and is of type UInt8
</code></pre></li>
<li><p>Int</p>

<ul>
<li>On a 32-bit platform, Int is the same size as Int32.</li>
<li>On a 64-bit platform, Int is the same size as Int64.</li>
</ul>
</li>
<li><p>UInt</p>

<ul>
<li>On a 32-bit platform, UInt is the same size as UInt32.</li>
<li>On a 64-bit platform, UInt is the same size as UInt64.</li>
</ul>
</li>
<li><p>Floating-Point Numbers</p>

<ul>
<li>Double has a precision of at least 15 decimal digits, whereas the precision of Float can be as little as 6 decimal digits. T</li>
</ul>
</li>
<li><p>Type Safety and Type Inference</p></li>
<li><p>Numeric Literals</p>

<pre><code>  let decimalInteger = 17
  let binaryInteger = 0b10001       // 17 in binary notation
  let octalInteger = 0o21           // 17 in octal notation
  let hexadecimalInteger = 0x11     // 17 in hexadecimal notation

  1.25e2          // 125.0
  1.25e-2         // 0.0125
  0xFp2           // 60.0 = 15 x 2 x 2
  0xFp-2          // 3.75 = 15 x 0.5 x 0.5

  // Can have additional formatting literal (like Ruby)

  let paddedDouble = 000123.456
  let oneMillion = 1_000_000
  let justOverOneMillion = 1_000_000.000_000_1
</code></pre></li>
<li><p>Integer Conversion</p>

<pre><code>  let cannotBeNegative: UInt8 = -1
  // UInt8 cannot store negative numbers, and so this will report an error
  let tooBig: Int8 = Int8.max + 1
  // Int8 cannot store a number larger than its maximum value,
  // and so this will also report an error

  // conversion must be explicit

  let twoThousand: UInt16 = 2_000
  let one: UInt8 = 1
  let twoThousandAndOne = twoThousand + UInt16(one)
</code></pre></li>
<li><p>Integer and Floating-Point Conversion</p>

<pre><code>  let three = 3
  let pointOneFourOneFiveNine = 0.14159
  let pi = Double(three) + pointOneFourOneFiveNine
  // pi equals 3.14159, and is inferred to be of type Double

  let integerPi = Int(pi)
  // integerPi equals 3, and is inferred to be of type Int
</code></pre></li>
<li><p>Type Aliases</p>

<pre><code>  typealias AudioSample = UInt16
  var maxAmplitudeFound = AudioSample.min
  // maxAmplitudeFound is now 0
</code></pre></li>
</ul>
</li>
<li><p>Boolean</p>

<pre><code>  let orangesAreOrange = true
  let turnipsAreDelicious = false

  if turnipsAreDelicious {
      println("Mmm, tasty turnips!")
  } else {
      println("Eww, turnips are horrible.")
  }
  // prints "Eww, turnips are horrible."
</code></pre></li>
<li><p>Tuples</p>

<pre><code>  let http404Error = (404, "Not Found")
  // http404Error is of type (Int, String), and equals (404, "Not Found")
</code></pre>

<ul>
<li><p>Decompose a tuple</p>

<pre><code>  let (statusCode, statusMessage) = http404Error
  println("The status code is \(statusCode)")
  // prints "The status code is 404"
  println("The status message is \(statusMessage)")
  // prints "The status message is Not Found"
</code></pre></li>
<li><p>Ignore some value when decomposing</p>

<pre><code>  let (justTheStatusCode, _) = http404Error
  println("The status code is \(justTheStatusCode)")
  // prints "The status code is 404"
</code></pre></li>
<li><p>Access by index</p>

<pre><code>  println("The status code is \(http404Error.0)")
  // prints "The status code is 404"
  println("The status message is \(http404Error.1)")
  // prints "The status message is Not Found"
</code></pre></li>
</ul>
</li>
<li><p>Optionals</p>

<pre><code>  let possibleNumber = "123"
  let convertedNumber = possibleNumber.toInt()
  // convertedNumber is inferred to be of type "Int?", or "optional Int"
</code></pre></li>
<li><p>nil</p>

<pre><code>  var serverResponseCode: Int? = 404
  // serverResponseCode contains an actual Int value of 404
  serverResponseCode = nil
  // serverResponseCode now contains no value

  var surveyAnswer: String?
  // surveyAnswer is automatically set to nil
</code></pre></li>
<li><p>If Statements and Forced Unwrapping</p>

<pre><code>  if convertedNumber != nil {
      println("convertedNumber has an integer value of \(convertedNumber!).")
  }
  // prints "convertedNumber has an integer value of 123."
</code></pre></li>
<li><p>Optional Binding</p>

<pre><code>  if let constantName = someOptional {
      statements
  }

  if let actualNumber = possibleNumber.toInt() {
      println("\(possibleNumber) has an integer value of \(actualNumber)")
  } else {
      println("\(possibleNumber) could not be converted to an integer")
  }
  // prints "123 has an integer value of 123"
</code></pre></li>
<li><p>Implicitly Unwrapping Optionals (Accessing an implicitly unwrapped optional when it does not contain a value will trigger a RTE)</p>

<pre><code>  let possibleString: String? = "An optional string."
  let forcedString: String = possibleString! // requires an exclamation mark

  let assumedString: String! = "An implicitly unwrapped optional string."
  let implicitString: String = assumedString // no need for an exclamation mark

  if assumedString != nil {
      println(assumedString)
  }
  // prints "An implicitly unwrapped optional string."

  if let definiteString = assumedString {
      println(definiteString)
  }
  // prints "An implicitly unwrapped optional string."
</code></pre></li>
<li><p>Assertions</p></li>
<li><p>Debugging with Assertions</p>

<pre><code>  let age = -3
  assert(age &gt;= 0, "A person's age cannot be less than zero")
  // this causes the assertion to trigger, because age is not &gt;= 0
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Swift Part 1]]></title>
    <link href="http://zh-wang.github.io/blog/2014/09/02/learning-swift-part-1/"/>
    <updated>2014-09-02T18:28:36+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/09/02/learning-swift-part-1</id>
    <content type="html"><![CDATA[<p>Just some notes after reading Apple&rsquo;s official online guide.
Most code are from the guide, with some modification by me.</p>

<p>Modified some code in the following parts. Some better example or fixing in new Xcode.</p>

<ul>
<li>Function as parameter (like Comparator)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// Bubble sort with a custom comparator</span>
</span><span class='line'><span class="k">func</span> <span class="nf">sort</span><span class="p">(</span><span class="k">inout</span> <span class="nl">list</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">],</span> <span class="nl">sorter</span><span class="p">:</span> <span class="p">((</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">i</span> <span class="p">:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">list</span><span class="p">.</span><span class="n">count</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="nl">j</span> <span class="p">:</span> <span class="n">Int</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">list</span><span class="p">.</span><span class="n">count</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">sorter</span><span class="p">(</span><span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">list</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">var</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>            <span class="n">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">i</span><span class="o">++</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="k">func</span> <span class="n">sorter</span><span class="p">(</span><span class="nl">a</span> <span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">b</span> <span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">sort</span><span class="p">(</span><span class="o">&amp;</span><span class="n">list</span><span class="p">,</span> <span class="n">sorter</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Closure</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">numbers</span><span class="p">.</span><span class="n">map</span><span class="p">({</span>
</span><span class='line'>    <span class="p">(</span><span class="nl">number</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="c1">// can be simplied to</span>
</span><span class='line'><span class="n">numbers</span><span class="p">.</span><span class="n">map</span><span class="p">({</span> <span class="n">number</span> <span class="k">in</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">number</span> <span class="p">})</span>
</span><span class='line'><span class="c1">// sort a array</span>
</span><span class='line'><span class="k">var</span> <span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="n">sort</span><span class="p">(</span><span class="o">&amp;</span><span class="n">list</span><span class="p">)</span> <span class="c1">// NOT sort(list), this function only accept a reference</span>
</span><span class='line'><span class="k">var</span> <span class="n">listSorted</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">(</span><span class="n">list</span><span class="p">)</span> <span class="c1">// This is OK</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h2>===== Full Notes =====</h2>

<h3>A Swift Tour</h3>

<ul>
<li>variable.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>    <span class="k">var</span> <span class="n">myVariable</span> <span class="o">=</span> <span class="mi">42</span>   <span class="c1">// variable</span>
</span><span class='line'>    <span class="n">myVariable</span> <span class="o">=</span> <span class="mi">50</span>       <span class="c1">// variable</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">myConstant</span> <span class="o">=</span> <span class="mi">42</span>   <span class="c1">// Constant</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>implicit</strong> vs <strong>explicit</strong>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>    <span class="k">let</span> <span class="n">implicitInteger</span> <span class="o">=</span> <span class="mi">70</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">implicitDouble</span> <span class="o">=</span> <span class="mf">70.0</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">explicitDouble</span><span class="p">:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mi">70</span>  <span class="c1">// Type is written right to variable</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Values never implicitly converted.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>    <span class="k">let</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;The width is&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">94</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">withlabel</span> <span class="o">=</span> <span class="n">label</span> <span class="o">+</span> <span class="n">String</span><span class="p">(</span><span class="n">width</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Include values in strings.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>    <span class="k">let</span> <span class="n">apples</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">oranges</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">appleSummary</span> <span class="o">=</span> <span class="s">&quot;I have \(apples) apples.&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">fruitSummary</span> <span class="o">=</span> <span class="s">&quot;I have \(apples + oranges) pieces of fruit.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Arrays</strong> and <strong>Dictionaries</strong>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>    <span class="k">var</span> <span class="n">shopppingList</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;catfish&quot;</span><span class="p">,</span> <span class="s">&quot;water&quot;</span><span class="p">,</span> <span class="s">&quot;tulips&quot;</span><span class="p">,</span> <span class="s">&quot;blue paint&quot;</span><span class="p">]</span> <span class="c1">// [] for empty array</span>
</span><span class='line'>    <span class="n">shoppingList</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;bottle of water&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="n">occupations</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="s">&quot;Malcolm&quot;</span><span class="o">:</span> <span class="s">&quot;Captain&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;Kaylee&quot;</span><span class="o">:</span> <span class="s">&quot;Mechanic&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">]</span> <span class="c1">// [:] for empty dictionary</span>
</span><span class='line'>    <span class="n">occupations</span><span class="p">[</span><span class="s">&quot;Jayne&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;Public Relations&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Control Flows</p>

<ul>
<li><p><strong>for-in</strong></p>

<pre><code>  let individualScores = [75, 43, 103, 87, 12]
  var teamScore = 0
  for score in individualScores {
      if score &gt; 50 {
          teamScore += 3
      } else {
          teamScore += 1
      }
  }
  teamScore
</code></pre></li>
<li><p>optional-value with <strong>if</strong></p>

<pre><code>  var optionalString: String? = "Hello"
  optionalString == nil

  var optionalName: String? = "John Appleseed"
  var greeting = "Hello!"
  if let name = optionalName {
      greeting = "Hello, \(name)"
  }
</code></pre></li>
<li><p><strong>switch</strong></p>

<pre><code>  let vegetable = "red pepper"
  switch vegetable {
      case "celery":
          let vegetableComment = "Add some raisins and make ants on a log."
      case "cucumber", "watercress":
          let vegetableComment = "That would make a good tea sandwich."
      case let x where x.hasSuffix("pepper"):
          let vegetableComment = "Is it a spicy \(x)?"
      default:
          let vegetableComment = "Everything tastes good in soup."
  }
</code></pre></li>
<li><p><strong>for-in</strong> in <em>dictionary</em></p>

<pre><code>  let interestingNumbers = [
      "Prime": [2, 3, 5, 7, 11, 13],
      "Fibonacci": [1, 1, 2, 3, 5, 8],
      "Square": [1, 4, 9, 16, 25],
  ]
  var largest = 0
  for (kind, numbers) in interestingNumbers {
      for number in numbers {
          if number &gt; largest {
              largest = number
          }
      }
  }
  largest
</code></pre></li>
<li><p><strong>while</strong> and <strong>do-while</strong></p>

<pre><code>  var n = 2
  while n &lt; 100 {
      n = n * 2
  }
  n

  var m = 2
  do {
      m = m * 2
  } while m &lt; 100
  m
</code></pre></li>
<li><p>range operators</p>

<pre><code>  for i in 0..&lt;3 {
      // do something, for 0, 1, 2
  }

  for i in 0...3 {
      // do something, for 0, 1, 2, 3
  }
</code></pre></li>
</ul>
</li>
<li><p><strong>Functions</strong> and <strong>Closures</strong></p>

<ul>
<li><p>A classic one</p>

<pre><code>  func greet(name: String, day: String) -&gt; String {
      return "Hello \(name), today is \(day)."
  }
  greet("Bob", "Tuesday")
</code></pre></li>
<li><p>Use a <strong>tuple</strong> as return value</p>

<pre><code>  func getGasPrices() -&gt; (Double, Double, Double) {
      return (3.59, 3.69, 3.79)
  }
  getGasPrices()
</code></pre></li>
<li><p>Variable Arguments (varargs)</p>

<pre><code>  func sumOf(numbers: Int...) -&gt; Int {
      var sum = 0
      for number in numbers {
              sum += number
          }
      return sum
  }
  sumOf()
  sumOf(42, 597, 12)
</code></pre></li>
<li><p>Nested functions</p>

<pre><code>  func returnFifteen() -&gt; Int { // Wrapper function
      var y = 10
      func add() { // Nested function
          y += 5
      }
      add()
      return y
  }
  returnFifteen()
</code></pre></li>
<li><p>Function as return value (like pointer of function)</p>

<pre><code>  func makeIncrementer() -&gt; (Int -&gt; Int) {
      func addOne(number: Int) -&gt; Int {
              return 1 + number
          }
      return addOne
  }
  var increment = makeIncrementer()
  increment(7)
</code></pre></li>
<li><p>Function as parameter (like Comparator)</p>

<pre><code>  // Bubble sort with a custom comparator
  func sort(inout list: [Int], sorter: ((Int, Int) -&gt; Bool)) {
      var i : Int = 0
      while i &lt; list.count {
          var j : Int = i + 1
          if j &lt; list.count &amp;&amp; !sorter(list[i], list[j]) {
              var temp = list[i]
              list[i] = list[j]
              list[j] = temp
          }
          i++
      }
  }
  var list = [3, 2, 1]
  func sorter(a : Int, b : Int) -&gt; Bool {
      return a &lt; b
  }
  sort(&amp;list, sorter)
</code></pre></li>
<li><p>Closure</p>

<pre><code>  numbers.map({
      (number: Int) -&gt; Int in
      let result = 3 * number
      return result
  })
  // can be simplied to
  numbers.map({ number in 3 * number })
  // sort a array
  var list = [3, 2, 1]
  sort(&amp;list) // NOT sort(list), this function only accept a reference
  var listSorted = sorted(list) // This is OK
</code></pre></li>
</ul>
</li>
<li><p><strong>Objects</strong> and <strong>Classes</strong></p>

<ul>
<li><p>A simple class</p>

<pre><code>  class Shape {
      var numberOfSides = 0
      func simpleDescription() -&gt; String {
              return "A shape with \(numberOfSides) sides."
          }
  }

  var shape = Shape()
  shape.numberOfSides = 7
  var shapeDescription = shape.simpleDescription()
</code></pre></li>
<li><p>Initializer and its opposite</p>

<pre><code>  class NamedShape {
      var numberOfSides: Int = 0
      var name: String

      init(name: String) {
          self.name = name
      }

      deinit {

      }

      func simpleDescription() -&gt; String {
          return "A shape with \(numberOfSides) sides."
      }
  }
</code></pre></li>
<li><p>Subclass</p>

<pre><code>  class Square: NamedShape {
      var sideLength: Double

      init(sideLength: Double, name: String) {
          self.sideLength = sideLength
          super.init(name: name)
          numberOfSides = 4
      }

      func area() -&gt;  Double {
          return sideLength * sideLength
      }

      override func simpleDescription() -&gt; String {
          return "A square with sides of length \(sideLength)."
      }
  }
  let test = Square(sideLength: 5.2, name: "my test square")
  test.area()
  test.simpleDescription()
</code></pre></li>
<li><p>Setter and Getter on properties</p>

<pre><code>  class EquilateralTriangle: NamedShape {
      var sideLength: Double = 0.0

      init(sideLength: Double, name: String) {
          self.sideLength = sideLength
          super.init(name: name)
          numberOfSides = 3
      }

      var perimeter: Double {
      get {
              return 3.0 * sideLength
          }
      set {
              sideLength = newValue / 3.0
          }
      }

      override func simpleDescription() -&gt; String {
          return "An equilateral triagle with sides of length \(sideLength)."
      }
  }
  var triangle = EquilateralTriangle(sideLength: 3.1, name: "a triangle")
  triangle.perimeter
  triangle.perimeter = 9.9
  triangle.sideLength
</code></pre></li>
<li><p>Provide code after before or after setting properties</p>

<pre><code>  class TriangleAndSquare {
      var triangle: EquilateralTriangle {
          willSet {                                    // Do something after before setting properties
              square.sideLength = newValue.sideLength
          }
      }
      var square: Square {
          willSet {                                    // Do something after before setting properties
              triangle.sideLength = newValue.sideLength
          }
      }
      init(size: Double, name: String) {
          square = Square(sideLength: size, name: name)
          triangle = EquilateralTriangle(sideLength: size, name: name)
      }
  }
  var triangleAndSquare = TriangleAndSquare(size: 10, name: "another test shape")
  triangleAndSquare.square.sideLength
  triangleAndSquare.triangle.sideLength
  triangleAndSquare.square = Square(sideLength: 50, name: "larger square")
  triangleAndSquare.triangle.sideLength
</code></pre></li>
</ul>
</li>
<li><p><strong>Enumerations</strong> and <strong>Structures</strong></p>

<ul>
<li><p><strong>Enumerations</strong> can have methods</p>

<pre><code>  enum Rank: Int {
      case Ace = 1
      case Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten
      case Jack, Queen, King
      func simpleDescription() -&gt; String {
          switch self {
          case .Ace:
              return "ace"
          case .Jack:
              return "jack"
          case .Queen:
              return "queen"
          case .King:
              return "king"
          default:
              return String(self.toRaw())
          }
      }
  }
  let ace = Rank.Ace
  let aceRawValue = ace.toRaw()
</code></pre></li>
<li><p>Convert <em>enum</em> between raw values</p>

<pre><code>  let ace = Rank.Ace
  let aceRawValue = ace.toRaw()
  let aceString = ace.simpleDescription()

  if let convertedRank = Rank.fromRaw(3) {
      let threeDescription = convertedRank.simpleDescription()
  }
</code></pre></li>
<li><p><strong>Structure</strong> is similar to <strong>Class</strong>, but when structures are always copied when they are passed around, while classes are passed by reference.</p>

<pre><code>  struct Card {
      var rank: Rank
      var suit: Suit
      func simpleDescription() -&gt; String {
          return "The \(rank.simpleDescription()) of \(suit.simpleDescription())"
      }
  }
  let threeOfSpades = Card(rank: .Three, suit: .Spades)
  let threeOfSpadesDescription = threeOfSpades.simpleDescription()
</code></pre></li>
<li><p><strong>Structure</strong> with associated values.</p>

<pre><code>  enum ServerResponse {
      case Result(String, String)
      case Error(String)
  }

  let success = ServerResponse.Result("6:00 am", "8:09 pm")
  let failure = ServerResponse.Error("Out of cheese.")

  switch success {
  case let .Result(sunrise, sunset):
      let serverResponse = "Sunrise is at \(sunrise) and sunset is at \(sunset)."
  case let .Error(error):
      let serverResponse = "Failure...  \(error)"
  }
</code></pre></li>
</ul>
</li>
<li><p><strong>Protocols</strong> and <strong>Extendsions</strong></p>

<ul>
<li><p>A classic <strong>Protocol</strong>.</p>

<pre><code>  protocol ExampleProtocol {
      var simpleDescription: String { get }
      mutating func adjust()  // "mutating" is needed when a protocol need to modify a structure
  }
</code></pre></li>
<li><p><strong>Classes</strong>, enumerations and structures can all adopt protocols.</p>

<pre><code>  class SimpleClass: ExampleProtocol {
      var simpleDescription: String = "A very simple class."
      var anotherProperty: Int = 69105
      func adjust() {
          simpleDescription += "  Now 100% adjusted."
      }
  }
  var a = SimpleClass()
  a.adjust()
  let aDescription = a.simpleDescription

  struct SimpleStructure: ExampleProtocol {
      var simpleDescription: String = "A simple structure"
      mutating func adjust() {
          simpleDescription += " (adjusted)"
      }
  }
  var b = SimpleStructure()
  b.adjust()
  let bDescription = b.simpleDescription
</code></pre></li>
<li><p><strong>Extension</strong> to add functionality to an existing type.</p>

<pre><code>  extension Int: ExampleProtocol {
      var simpleDescription: String {
      return "The number \(self)"
      }
      mutating func adjust() {
          self += 42
      }
  }
  7.simpleDescription
</code></pre></li>
<li><p>Use <strong>Protocol</strong> as a variable. (Abstracting)</p>

<pre><code>  let protocolValue: ExampleProtocol = a
  protocolValue.simpleDescription
  // protocolValue.anotherProperty  // Though a is an instance of 'SimpleClass', we cannot access its member not defined in 'ExampleProtocol'
</code></pre></li>
</ul>
</li>
<li><p><strong>Generics</strong></p>

<ul>
<li><p>A classic generic sample.</p>

<pre><code>  func repeat&lt;ItemType&gt;(item: ItemType, times: Int) -&gt; [ItemType] {
      var result = [ItemType]()
      for i in 0..&lt;times {
          result += [item]   // operands of Array need to be wrapped in []
      }
      return result
  }
  repeat("knock", 4)
</code></pre></li>
<li><p>Generic can also be used on functions and methods, as well as classes, enumerations, and structures.</p>

<pre><code>  // Reimplement the Swift standard library's optional type
  enum OptionalValue&lt;T&gt; {
      case None
      case Some(T)
  }
  var possibleInteger: OptionalValue&lt;Int&gt; = .None
  possibleInteger = .Some(100)”
</code></pre></li>
<li><p>Add requirements in <strong>Generic</strong></p>

<pre><code>  func anyCommonElements &lt;T, U where T: SequenceType, U: SequenceType, T.Generator.Element: Equatable, T.Generator.Element == U.Generator.Element&gt; (lhs: T, rhs: U) -&gt; Bool {
      for lhsItem in lhs {
          for rhsItem in rhs {
              if lhsItem == rhsItem {
                  return true
              }
          }
      }
      return false
  }
  anyCommonElements([1, 2, 3], [3])
</code></pre></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codility - Phosphorus - 2014]]></title>
    <link href="http://zh-wang.github.io/blog/2014/08/14/codility-phosphorus-2014/"/>
    <updated>2014-08-14T15:04:36+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/08/14/codility-phosphorus-2014</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This is an analysis of <a href="https://codility.com/programmers/challenges/">Codility - Prosphorus 2014 Challenge</a>.</p>

<ul>
<li>This problem is, finding the minimal number of guards to set in a tree which can prevent prisoners escaping to tree leaves.</li>
<li>Time bound and space bound are both O(N).</li>
</ul>


<h2>Analysis</h2>

<ul>
<li>Create a <code>Node</code> structure, holding its parent index, a boolean value presenting it is a prisoner or not. Then a boolean value presenting whether prisoners can escape down to leaves, and another boolean value presenting whether prisoners can escape from the root.</li>
<li>Depth-First-Search from node 0.</li>
<li>Adjust the result according to node 0&rsquo;s state. Done.</li>
<li>A classic DFS holds time bound and space bound.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mi">200003</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">boolean</span><span class="o">[]</span> <span class="n">visited</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">N</span><span class="o">];</span>
</span><span class='line'><span class="n">Node</span><span class="o">[]</span> <span class="n">nodes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">[</span><span class="n">N</span><span class="o">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">A</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">B</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">C</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">A</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">nodes</span><span class="o">[</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]]</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="n">nodes</span><span class="o">[</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">nodes</span><span class="o">[</span><span class="n">B</span><span class="o">[</span><span class="n">i</span><span class="o">]]</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="n">nodes</span><span class="o">[</span><span class="n">B</span><span class="o">[</span><span class="n">i</span><span class="o">]]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">();</span>
</span><span class='line'>        <span class="n">nodes</span><span class="o">[</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]].</span><span class="na">tlist</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">B</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>        <span class="n">nodes</span><span class="o">[</span><span class="n">B</span><span class="o">[</span><span class="n">i</span><span class="o">]].</span><span class="na">tlist</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">C</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// if a prison is on leaf(exit), then we cannot stop them escaping</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">C</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isLeaf</span><span class="o">(</span><span class="n">nodes</span><span class="o">[</span><span class="n">C</span><span class="o">[</span><span class="n">i</span><span class="o">]]))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">nodes</span><span class="o">[</span><span class="n">C</span><span class="o">[</span><span class="n">i</span><span class="o">]].</span><span class="na">isPrisoner</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dfs</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// if node 0 is has only one path, then it is an exit. </span>
</span><span class='line'>    <span class="c1">// we should set a guard if node 0 is exit &amp;&amp; prisoners can escape to root</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">nodes</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">hasEscapeRoot</span> <span class="o">&amp;&amp;</span> <span class="n">nodes</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">tlist</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">res</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">:</span> <span class="n">res</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">nodeIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">visited</span><span class="o">[</span><span class="n">nodeIndex</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Node</span> <span class="n">node</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">[</span><span class="n">nodeIndex</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">.</span><span class="na">tlist</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">nextNodeIndex</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">tlist</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">visited</span><span class="o">[</span><span class="n">nextNodeIndex</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">nodes</span><span class="o">[</span><span class="n">nextNodeIndex</span><span class="o">].</span><span class="na">parentIndex</span> <span class="o">=</span> <span class="n">nodeIndex</span><span class="o">;</span>
</span><span class='line'>            <span class="n">dfs</span><span class="o">(</span><span class="n">nextNodeIndex</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">nodeIndex</span> <span class="o">!=</span> <span class="n">node</span><span class="o">.</span><span class="na">parentIndex</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">isLeaf</span><span class="o">(</span><span class="n">node</span><span class="o">)))</span>  <span class="k">return</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">escapesLeaf</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">escapesRoot</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">.</span><span class="na">tlist</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">next</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">tlist</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">parentIndex</span> <span class="o">==</span> <span class="n">next</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>        <span class="n">n</span><span class="o">++;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">nodes</span><span class="o">[</span><span class="n">next</span><span class="o">].</span><span class="na">hasEscapeLeaf</span><span class="o">)</span> <span class="n">escapesLeaf</span><span class="o">++;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">nodes</span><span class="o">[</span><span class="n">next</span><span class="o">].</span><span class="na">hasEscapeRoot</span><span class="o">)</span> <span class="n">escapesRoot</span><span class="o">++;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">isPrisoner</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// if root is PRISONER,</span>
</span><span class='line'>        <span class="n">node</span><span class="o">.</span><span class="na">hasEscapeLeaf</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span> <span class="c1">// then it must not have escape paths to leaf</span>
</span><span class='line'>        <span class="n">node</span><span class="o">.</span><span class="na">hasEscapeRoot</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// but it can escape to root</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">+=</span> <span class="n">escapesLeaf</span><span class="o">;</span> <span class="c1">// set guards on those leaves</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="c1">// if root is NOT PRISONER, </span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">escapesLeaf</span> <span class="o">==</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// all subtrees has escape to leaf</span>
</span><span class='line'>            <span class="c1">// it a empty subtree, do nothing</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">escapesLeaf</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// no subtree has escape to leaf</span>
</span><span class='line'>            <span class="c1">// then we do NOT need a guard here</span>
</span><span class='line'>            <span class="n">node</span><span class="o">.</span><span class="na">hasEscapeLeaf</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span> <span class="c1">// set no escape to leaf</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">escapesRoot</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// if at least one subtree has prisoner can escape to root</span>
</span><span class='line'>                <span class="n">node</span><span class="o">.</span><span class="na">hasEscapeRoot</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="c1">// has SOME escape path</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">escapesRoot</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// if no prisoner can escape to root</span>
</span><span class='line'>                <span class="c1">// then we do NOT need a guard here</span>
</span><span class='line'>                <span class="n">node</span><span class="o">.</span><span class="na">hasEscapeLeaf</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// because it has escape paths</span>
</span><span class='line'>                <span class="n">node</span><span class="o">.</span><span class="na">hasEscapeRoot</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span> <span class="c1">// obviously</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="c1">// if some prisoner can escape to root</span>
</span><span class='line'>                <span class="n">res</span><span class="o">++;</span> <span class="c1">// set guard here, prevent them escape to leaves through this node</span>
</span><span class='line'>                <span class="n">node</span><span class="o">.</span><span class="na">hasEscapeLeaf</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span> <span class="c1">// we set the guard, so there is no escape path to leaves</span>
</span><span class='line'>                <span class="n">node</span><span class="o">.</span><span class="na">hasEscapeRoot</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span> <span class="c1">// as above</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">boolean</span> <span class="nf">isLeaf</span><span class="o">(</span><span class="n">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">tlist</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">parentIndex</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">isPrisoner</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">hasEscapeLeaf</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">hasEscapeRoot</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">tlist</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Noto - Fonts]]></title>
    <link href="http://zh-wang.github.io/blog/2014/07/23/noto-font/"/>
    <updated>2014-07-23T18:25:58+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/07/23/noto-font</id>
    <content type="html"><![CDATA[<p>最近<a href="http://www.google.com/get/noto/#/">Google Noto Fonts</a>はアジア系文字をサポートし始めたので、Octopressのデフォルトフォントを変えてみようと思いました。</p>

<p>やり方<br/>
1. <a href="http://www.google.com/get/noto/#/">Google Noto Fonts</a> ここからフォントをダンロード。<br/>
2. /source/fontsを作ります。<br/>
3. 先ダンロードしたファイルを解凍し、好きなフォントを/source/fontsに入れます。私の場合、日本語と英語を合わせて10個入れました。NotoSans系とNotoSerif系とNotoSansJP-Bold、NotoSansJP-Regular。<br/>
4. ソースを修正。/sass/custom/_fonts.scssに、次のコードを追加します。完成。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>    $sans: "Noto Sans", sans-serif;
</span><span class='line'>    $serif: "Noto Serif", "Noto Sans" serif;
</span><span class='line'>    $heading-font-family: "Noto Serif", sans-serif;
</span><span class='line'>    $header-title-font-family: "Noto Sans JP", "Noto Serif", sans-serif;
</span><span class='line'>    $header-subtitle-font-family: "Noto Sans JP", "Noto Serif", sans-serif;
</span><span class='line'>
</span><span class='line'>    @font-face {
</span><span class='line'>        font-family: 'Noto Sans';
</span><span class='line'>        font-style: normal;
</span><span class='line'>        font-weight: 400;
</span><span class='line'>        src: local('NotoSans-Regular') url(/fonts/NotoSans-Regular.ttf) format('truetype');
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @font-face {
</span><span class='line'>        font-family: 'Noto Sans';
</span><span class='line'>        font-style: normal;
</span><span class='line'>        font-weight: 700;
</span><span class='line'>        src: local('NotoSans-Bold') url(/fonts/NotoSans-Bold.ttf) format('truetype');
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @font-face {
</span><span class='line'>        font-family: 'Noto Sans';
</span><span class='line'>        font-style: italic;
</span><span class='line'>        font-weight: 400;
</span><span class='line'>        src: local('NotoSans-Italic') url(/fonts/NotoSans-Italic.ttf) format('truetype');
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @font-face {
</span><span class='line'>        font-family: 'Noto Sans';
</span><span class='line'>        font-style: italic;
</span><span class='line'>        font-weight: 700;
</span><span class='line'>        src: local('NotoSans-BoldItalic') url(/fonts/NotoSans-BoldItalic.ttf) format('truetype');
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @font-face {
</span><span class='line'>        font-family: 'Noto Sans JP';
</span><span class='line'>        font-style: normal;
</span><span class='line'>        font-weight: 400;
</span><span class='line'>        src: local('NotoSansJP-Regular') url(/fonts/NotoSansJP-Regular.otf) format('truetype');
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @font-face {
</span><span class='line'>        font-family: 'Noto Sans JP';
</span><span class='line'>        font-style: normal;
</span><span class='line'>        font-weight: 700;
</span><span class='line'>        src: local('NotoSansJP-Regular') url(/fonts/NotoSansJP-Bold.otf) format('truetype');
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @font-face {
</span><span class='line'>        font-family: 'Noto Serif';
</span><span class='line'>        font-style: normal;
</span><span class='line'>        font-weight: 400;
</span><span class='line'>        src: local('NotoSerif-Regular') url(/fonts/NotoSerif-Regular.ttf) format('truetype');
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @font-face {
</span><span class='line'>        font-family: 'Noto Serif';
</span><span class='line'>        font-style: normal;
</span><span class='line'>        font-weight: 700;
</span><span class='line'>        src: local('NotoSerif-Bold') url(/fonts/NotoSerif-Bold.ttf) format('truetype');
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @font-face {
</span><span class='line'>        font-family: 'Noto Serif';
</span><span class='line'>        font-style: italic;
</span><span class='line'>        font-weight: 400;
</span><span class='line'>        src: local('NotoSerif-Italic') url(/fonts/NotoSerif-Italic.ttf) format('truetype');
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @font-face {
</span><span class='line'>        font-family: 'Noto Serif';
</span><span class='line'>        font-style: italic;
</span><span class='line'>        font-weight: 700;
</span><span class='line'>        src: local('NotoSerif-BoldItalic') url(/fonts/NotoSerif-BoldItalic.ttf) format('truetype');
</span><span class='line'>    }
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codility - Silicium - 2014]]></title>
    <link href="http://zh-wang.github.io/blog/2014/07/22/codility-silicium-2014/"/>
    <updated>2014-07-22T17:02:26+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/07/22/codility-silicium-2014</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This is an analysis of <a href="https://codility.com/programmers/challenges/">Codility - Silicium 2014 Challenge</a>.</p>

<ul>
<li>The problem is, finding the k-th largest piece of cake after cutting a big cake with straight cuts.</li>
<li>The longest edge of a cake piece is 10000.</li>
<li>Time bound is O(N * log(N + X + Y)), where N is the number of cuts, X and Y are largest size of the cake.</li>
<li>Space bound is O(N).</li>
</ul>


<h2>Analysis</h2>

<p>In order to find the k-th element is an array of set of elements, we can always do binary search. Find a middle elements, calculate the rank, do partition if needed, recursively.</p>

<ul>
<li>First, we calculate length of each edges, the sort them by their length.</li>
<li>Then do a traditional binary search.</li>
</ul>


<p>The only <strong>interesting</strong> thing is that, for calculating the rank of a element in 2-d array, we need O(N) time.<br/>
But in this problem, after we sort edges in <em>x</em> and <em>y</em>, we can do rank calculation in O(N) time, as implemented in <code>fastPartition</code> method.</p>

<p>(Hint: after we sort the edges, we can ensure that elements in left-bottom are always equal or smaller than elements in right-top. We just need to find the smallest element of each column, follow the red arrow, in O(N) time)</p>

<p><img src="http://zh-wang.github.io/images/2014_07_22_illustration.png" title="hint" alt="hint" /></p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">N</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">largerEqualList</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="nf">fastPartition</span><span class="o">(</span><span class="kt">int</span> <span class="n">target</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// find the element equal or larger than target in left-most column</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">ny</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">high</span> <span class="o">=</span> <span class="n">N</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">low</span> <span class="o">&lt;=</span> <span class="n">high</span> <span class="o">&amp;&amp;</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="n">N</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">[</span><span class="n">nx</span><span class="o">]</span> <span class="o">*</span> <span class="n">y</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">ny</span> <span class="o">=</span> <span class="n">low</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">largerEqualList</span><span class="o">[</span><span class="n">nx</span><span class="o">]</span> <span class="o">=</span> <span class="n">ny</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// search elements&#39; index by red arrow mentioned above</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(++</span><span class="n">nx</span> <span class="o">&lt;</span> <span class="n">N</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">ny</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">x</span><span class="o">[</span><span class="n">nx</span><span class="o">]</span> <span class="o">*</span> <span class="n">y</span><span class="o">[</span><span class="n">ny</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="o">--</span><span class="n">ny</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">largerEqualList</span><span class="o">[</span><span class="n">nx</span><span class="o">]</span> <span class="o">=</span> <span class="n">ny</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// get the rank of target</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">rank</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">rank</span> <span class="o">+=</span> <span class="n">N</span> <span class="o">-</span> <span class="n">largerEqualList</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">rank</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">X</span><span class="o">,</span> <span class="kt">int</span> <span class="n">Y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">K</span><span class="o">,</span> <span class="kt">int</span> <span class="o">[]</span> <span class="n">A</span><span class="o">,</span> <span class="kt">int</span> <span class="o">[]</span> <span class="n">B</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="o">[]</span> <span class="n">x</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">A</span><span class="o">.</span><span class="na">length</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">[]</span> <span class="n">y</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">A</span><span class="o">.</span><span class="na">length</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">A</span><span class="o">.</span><span class="na">length</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">x</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">A</span><span class="o">.</span><span class="na">length</span> <span class="o">?</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">:</span> <span class="n">X</span><span class="o">)</span> <span class="o">-</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">:</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">A</span><span class="o">.</span><span class="na">length</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">y</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">A</span><span class="o">.</span><span class="na">length</span> <span class="o">?</span> <span class="n">B</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">:</span> <span class="n">Y</span><span class="o">)</span> <span class="o">-</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">B</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">:</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">y</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">N</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">largerEqualList</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">N</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="n">x</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">*</span> <span class="n">y</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">high</span> <span class="o">=</span> <span class="n">x</span><span class="o">[</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">*</span> <span class="n">y</span><span class="o">[</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">rank</span> <span class="o">=</span> <span class="n">K</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// binary search</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">low</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">crank</span> <span class="o">=</span> <span class="n">fastPartition</span><span class="o">(</span><span class="n">mid</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">crank</span> <span class="o">&gt;=</span> <span class="n">rank</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">crank</span> <span class="o">&lt;</span> <span class="n">rank</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">high</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each <code>fastPartition</code> cost O(N) time, and we do log(10000 * 10000) times. So the total time is O(N * log(10000 * 10000). There is no X and Y occurs. <br/>
Note that even a traditional O(N<sup>2</sup>) time partition could pass system test. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mozc for iOS]]></title>
    <link href="http://zh-wang.github.io/blog/2014/07/11/mozc-for-ios/"/>
    <updated>2014-07-11T18:10:34+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/07/11/mozc-for-ios</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>iOS 8ではサードパーティIMEが開発できるようになったので、mozcのiOS版を作ってみたい。<br/>
まだ初期段階ですが、JUST KEEP BUILDING!</p>

<h2>環境について</h2>

<p>今回は、android版を参考し、mozcのコア機能が含まれるライブラリを作りたいですね。<br/>
使うmozcソースのリビジョンは</p>

<pre><code>18:06 zhenghongwang@viennakanon:projects/mozc/src (svn)[src:266]$ svn log -r COMMITTED
------------------------------------------------------------------------
r266 | yukawa@google.com | 2014-07-06 16:49:48 +0900 (日, 06  7 2014) | 11 lines

Use Ninja to build Android, NaCl, and Linux Desktop binaries

With this CL, Mozc starts using Ninja instead of Make to build Android, NaCl, and Linux Desktop binaries.  Note that Windows binaries have already been built with Ninja for one and a half years.

This CL is supposed not to change any user-visible behavior.

Closes Issue 222.

BUG=Issue mozc:222
TEST=unittest
</code></pre>

<p>ninjaを使い始めたみたいです。まあ、iOSやMACならxcodeでビルドするからあんまり関係ないよね。</p>

<p>ビルドマシンはMBP, OSX 10.9, xcode 5。</p>

<p>他の注意点</p>

<ul>
<li>変換のコアライブラリだけをビルドする。androidのnative側と同じです。</li>
<li>gypは事前にインストールした。</li>
<li>protobufをiOS向けにビルドすると、<code>target specifies product type 'com.apple.product-type.tool', but there's no such product type for the 'iphoneos' platform</code>が出てしまうので、protobufも事前にインストール。</li>
<li>ソースの中のprotobufをarm64にビルドするために、patchが必要みたい。まだ未解決なので、今回はarmv7とarmv7sにビルドする。</li>
</ul>


<h2>ソースの変更点</h2>

<ol>
<li>src/iosのフォルダを新規。中はgypの設定、ビルドのターゲットなどが書かれている。</li>
<li>src/build_ios.pyを新規。ビルドのスクリプトです。</li>
<li>一部のソールを変更した。srcの中で、<code>svn diff</code>を見ればわかる。</li>
</ol>


<!-- more -->


<h2>ビルド</h2>

<p>srcの中で<code>python build_ios.py</code>を叩くだけ。<br/>
ビルドしたファイルはout_iosに入っている。</p>

<p>結果はこちらです。</p>

<pre><code>11:37 zhenghongwang@viennakanon:projects/mozc_ios/src (git)[master|✚ 9]$ lipo -info out_ios/Default-iphoneos/libiMozc.a
Architectures in the fat file: out_ios/Default-iphoneos/libiMozc.a are: armv7 armv7s
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Import MathJax to Octopress]]></title>
    <link href="http://zh-wang.github.io/blog/2014/06/27/import-mathjax-to-octopress/"/>
    <updated>2014-06-27T20:26:41+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/06/27/import-mathjax-to-octopress</id>
    <content type="html"><![CDATA[<h2>What is MathJax?</h2>

<blockquote><p>MathJax is an open source JavaScript display engine for mathematics that works in all browsers.</p></blockquote>

<p>By importing MathJax to Octopress(Jekeyll), you can write formulars in Latex style. That&rsquo;s cool!</p>

<!-- more -->


<h2>How to import?</h2>

<ol>
<li>Copy <a href="https://gist.github.com/jessykate/834610">this ruby plugin</a> into <code>plugin</code> folder.</li>
<li>Add <code>&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"&gt; &lt;/script&gt;</code> in <code>source/_includes/custom/head.html</code>.</li>
<li>Write your formulars between tags <code>math</code>, <code>m</code> or <code>endmath</code>, <code>em</code>.</li>
</ol>


<p>For example,<br/>
<img src="http://zh-wang.github.io/images/2014_06_27_mathjax.png" height="100" width="340" title="Latex Style" alt="MathJax snapshot" /> <br/>
will become</p>

<script type="math/tex; mode=display"> 
e^{x+iy} = e^x(\cos y + i\sin y)\\

x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}
</script>


<p></p>

<p>Enjoy it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codility - Aluminium 2014 - Part 2]]></title>
    <link href="http://zh-wang.github.io/blog/2014/06/20/codility-aluminium-2014-p2/"/>
    <updated>2014-06-20T11:17:21+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/06/20/codility-aluminium-2014-p2</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This is an analysis of <a href="https://codility.com/programmers/challenges/">Codility - Aluminium 2014 Challenge</a>, Part 2.</p>

<p>In <a href="http://zh-wang.github.io/blog/2014/06/18/codility-aluminium-2014/">Part 1</a>, we introduced a solution for CLASSIC maximal subarray problem.<br/>
Now we&rsquo;ll make a solution for the <strong>a single swapping</strong> version.</p>

<!-- more -->


<h2>Analysis</h2>

<p>We still can split the whole given array $a_0, a_1, \cdots, a_n-1$ by index $i$.<br/>
Now we have subarray $L_1 = \{a_0, a_1, \cdots, a_i\}$ and $L_2 = \{a_i+1, a_i+2, \cdots, a_n-1\}$.</p>

<ul>
<li>We only consider that <strong>forward</strong> swapping of $a_j$ and $a_k$ only occurs in the former subarray, $a_0, a_1, \cdots, a_i$, for $0 \leq j &lt; k &lt; i$. For the case of <strong>backward</strong> swapping in the latter subarray, we do the same calculation on reversed given array. Note that, any element swapped forward will <strong>NOT</strong> be considered into maximal subarray. (Why?)</li>
<li>As we argued in Part 1, we want to minimize sum of $L_1$ and sum of $L_2$. Because we don&rsquo;t consider swap in $L_2$, we can do the same calculation as in Part 1.</li>
<li>How can we minimize the sum of $L_1$ after a single swap within it? Obviously, swapping an element with the largest element before it yields a largest decrease, by <strong>sum of subarray minus largest</strong>, and this is saved in $sub$ array in decreasing order.</li>
<li>let the element which swaps with the largest element before it to be $a_x$, for each $0 \leq x \leq i$, we will calculate

<ul>
<li>Swap $a_x$ with the largest element. The subarray sum to index $x$ will be decreased again by value of $a_x$, based on $sub_x-1$.</li>
<li>Not swap with $a_x$. Let swap occurs before index $x$, just use the value of index $x-1$ minimal value.
We will choose the smaller. Then save results in an array.</li>
</ul>
</li>
<li>Calculate results of $L_2$.</li>
<li>Use the whole sum of given array to subtract results of $L_1$ and $L_2$. The largest one is the answer.</li>
<li>Because calculation above is on 1-d array, time and space complexity are O(n).</li>
</ul>


<p>Code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">inputs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">rdata</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">inputs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="n">data</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">inputs</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">inputs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="n">rdata</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">inputs</span><span class="o">[</span><span class="n">inputs</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">i</span><span class="o">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">r1</span> <span class="o">=</span> <span class="n">cal</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">r2</span> <span class="o">=</span> <span class="n">cal</span><span class="o">(</span><span class="n">rdata</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">r1</span><span class="o">,</span> <span class="n">r2</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// result equals 0 means no subarray have sum larger than 0,</span>
</span><span class='line'>    <span class="c1">// we need to choose a largest negative element.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Collections</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="nf">cal</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Integer</span> <span class="n">integer</span> <span class="o">:</span> <span class="n">data</span><span class="o">)</span> <span class="n">sum</span> <span class="o">+=</span> <span class="n">integer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">psum</span> <span class="o">=</span> <span class="n">partial_sum</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="n">compAdd</span><span class="o">);</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">pmax</span> <span class="o">=</span> <span class="n">partial_sum</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="n">compMax</span><span class="o">);</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">sub</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sub</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">psum</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-</span> <span class="n">pmax</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">min_sub</span> <span class="o">=</span> <span class="n">partial_sum</span><span class="o">(</span><span class="n">sub</span><span class="o">,</span> <span class="n">compMin</span><span class="o">);</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">L1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">L1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span>
</span><span class='line'>                <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span>
</span><span class='line'>                        <span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">min_sub</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">:</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="n">data</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span>
</span><span class='line'>                        <span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">L1</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">:</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>                        <span class="o">)</span>
</span><span class='line'>                <span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Collections</span><span class="o">.</span><span class="na">reverse</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">r_psum</span> <span class="o">=</span> <span class="n">partial_sum</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="n">compAdd</span><span class="o">);</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">L2</span> <span class="o">=</span> <span class="n">partial_sum</span><span class="o">(</span><span class="n">r_psum</span><span class="o">,</span> <span class="n">compMin</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Collections</span><span class="o">.</span><span class="na">reverse</span><span class="o">(</span><span class="n">L2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// We can split array into L1 and L2 at index i form 0 to n - 1. We just take the largest.</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">best</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">best</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">best</span><span class="o">,</span> <span class="n">sum</span> <span class="o">-</span> <span class="n">L1</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="n">n</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">L2</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">))</span> <span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">best</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">partial_sum</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">comparator</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">res</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">data</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Integer</span> <span class="n">lastValue</span> <span class="o">=</span> <span class="n">res</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Integer</span> <span class="n">currentValue</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="n">res</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">comparator</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">lastValue</span><span class="o">,</span> <span class="n">currentValue</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">compAdd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Integer</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">o1</span> <span class="o">+</span> <span class="n">o2</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">compMax</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Integer</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">compMin</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Integer</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>




<script language="javaScript">
$(document).ready( function () { $("a[href^='http']:not([href*='" + location.hostname + "'])").attr('target', '_blank'); })
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codility - Aluminium 2014 - Part 1]]></title>
    <link href="http://zh-wang.github.io/blog/2014/06/18/codility-aluminium-2014/"/>
    <updated>2014-06-18T15:54:12+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/06/18/codility-aluminium-2014</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This is an analysis of <a href="https://codility.com/programmers/challenges/">Codility - Aluminium 2014 Challenge</a>, Part 1.</p>

<ul>
<li>The problem is, finding the maximum sum of a compact subsequence of array elements after performing a single swap operation. It&rsquo;s a little tricky <a href="http://en.wikipedia.org/wiki/Maximum_subarray_problem">maximal subarray</a> problem.</li>
<li>For example, given an array {3, -10, 4, 5}, we can swap 3 and -10 to get a compact subsequence {3, 4, 5}, which has the maximum sum 12</li>
<li>Time bound and space bound are both O(n)</li>
<li>There exists many algorithms to solve maximal subarray problems, but they cannot directly applied to this problem.</li>
</ul>


<!-- more -->


<h2>Analysis</h2>

<ul>
<li>First, we should take a look at the solution of a CLASSIC maximal subarray problem, which means <strong>swapping is not allowed</strong>.</li>
</ul>


<p>For a given array $a_0, a_1, \cdots, a_n-1$,</p>

<p><p>
The maximum sum of a compact subsequence can be expressed by the following formula.</p>

<p>$$ \max \{ \sum_{k=i}^j a_k, 0 \leq i &lt; j \leq n - 1 \} $$
</p></p>

<p><p>
Because we want the maximal part from $i$ to $j$, by thinking reversely, we can calculate the minimal <a href="http://mathworld.wolfram.com/PartialSum.html">partial sum</a> of sub array $a_0, a_1, \cdots, a_x-1$ as $f(x)$, minimal partial sum of sub array $a_x+1, a_x+2, \cdots, a_n-1$ as $g(x)$. Then use the whole sum to subtract them if them are minus values.</p>

<p>let S to be the accumulation of the given array.</p>

<p>let $$
  f(x) = \min \{ \min \{ partial_sum(p), 0 \leq p \leq x - 1 \} , 0 \}
$$ to be the minimal partial sum of sub array $a_0, a_1, \cdots, a_x-1$.</p>

<p>let $$
g(x) = \min \{ \min \{ partial_sum(q), x + 1 \leq q \leq n - 1 \} , 0 \}
$$ to be the minimal partial sum of sub array $a_x+1, a_x+2, \cdots, a_n-w$.</p>

<p>then we calculate the following formula. $$ \max \{ S - f(x) - g(x), 0 \leq x \leq n - 1 \} $$
</p></p>

<ul>
<li>OK, then write above thought into Java, we get the following codes</li>
</ul>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">inputs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">inputs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="n">data</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">inputs</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">cal</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">cal</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">A</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">S</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Integer</span> <span class="n">integer</span> <span class="o">:</span> <span class="n">A</span><span class="o">)</span> <span class="n">S</span> <span class="o">+=</span> <span class="n">integer</span><span class="o">;</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">B</span> <span class="o">=</span> <span class="n">partial_sum</span><span class="o">(</span><span class="n">A</span><span class="o">,</span> <span class="n">compAdd</span><span class="o">);</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">F</span> <span class="o">=</span> <span class="n">partial_sum</span><span class="o">(</span><span class="n">B</span><span class="o">,</span> <span class="n">compMin</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Collections</span><span class="o">.</span><span class="na">reverse</span><span class="o">(</span><span class="n">A</span><span class="o">);</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">D</span> <span class="o">=</span> <span class="n">partial_sum</span><span class="o">(</span><span class="n">A</span><span class="o">,</span> <span class="n">compAdd</span><span class="o">);</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">G</span> <span class="o">=</span> <span class="n">partial_sum</span><span class="o">(</span><span class="n">D</span><span class="o">,</span> <span class="n">compMin</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Collections</span><span class="o">.</span><span class="na">reverse</span><span class="o">(</span><span class="n">A</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Collections</span><span class="o">.</span><span class="na">reverse</span><span class="o">(</span><span class="n">G</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">f</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">F</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="n">n</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">G</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'>            <span class="n">res</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">res</span><span class="o">,</span> <span class="n">S</span> <span class="o">-</span> <span class="o">(</span><span class="n">f</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">f</span> <span class="o">:</span> <span class="mi">0</span><span class="o">)</span> <span class="o">-</span> <span class="o">(</span><span class="n">g</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">g</span> <span class="o">:</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">partial_sum</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">comparator</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">res</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">data</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Integer</span> <span class="n">lastValue</span> <span class="o">=</span> <span class="n">res</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Integer</span> <span class="n">currentValue</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="n">res</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">comparator</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">lastValue</span><span class="o">,</span> <span class="n">currentValue</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">compAdd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Integer</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">o1</span> <span class="o">+</span> <span class="n">o2</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">compMax</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Integer</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">compMin</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Integer</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><script language="javaScript">
$(document).ready( function () { $(&ldquo;a[href^=&lsquo;http&rsquo;]:not([href*=&lsquo;&rdquo; + location.hostname + &ldquo;&rsquo;])&rdquo;).attr(&lsquo;target&rsquo;, &lsquo;_blank&rsquo;); })
</script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codility - Magnesium 2014]]></title>
    <link href="http://zh-wang.github.io/blog/2014/05/27/codility-magnesium-2014-challenge-report/"/>
    <updated>2014-05-27T19:05:37+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/05/27/codility-magnesium-2014-challenge-report</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This is an analysis of <a href="https://codility.com/programmers/challenges/">Codility - Magnesium 2014 Challenge</a>.</p>

<ul>
<li>The problem is that, finding the longest path in a weighted graph in which the weights are ascending. Vertices can be visited multiple times.</li>
<li>Here, <strong>length of a path</strong> means the number of vertices the path visits, not the weight sum of all edges that compose the path.</li>
<li>Therefore, <strong>longest path</strong> means a path that visits more vertices than any other paths for the given graph.</li>
<li>Time bound is O(V+E*log(E)).</li>
</ul>


<!-- more -->


<h2>Analysis</h2>

<ul>
<li>A classic DFS search on every vertex can do this job, despite its worst time complexity is O(VE), which cause timeout.</li>
<li>Let&rsquo;s make an O(V+E*log(E)) approach.</li>
<li>Because we do <strong>NOT</strong> need to trace the whole path, we just need to store a {<em>w</em>, <em>l</em>} pair for each vertex of the graph.</li>
<li>This pair of data means that for a vertex <em>V</em>, the longest path ends with <em>V</em> has a length <em>l</em> path, and, the largest weight of the path is <em>w</em>.</li>
<li>Then we pick edges one by one in ascending order, do some comparison and update the paired data for node which the edge connects.</li>
</ul>


<h2>Why this algorithm works?</h2>

<ul>
<li>For any <em>w_1</em> >= <em>w_2</em> and <em>l_1</em> >= <em>l_2</em>, we can always say that {<em>w_1</em>, <em>l_1</em>} is a better answer that {<em>w_2</em>, <em>l_2</em>}. Therefore, we only store the former answer. Note that, this only goes right when edges are picked by ascending order. That&rsquo;s the <strong>GREEDY</strong> algorithm works.</li>
<li>Sorting edges costs O(E*log(E)). Updating paired data costs O(V). The whole time cost is O(V+E*log(E)).</li>
</ul>


<h2>Source</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="n">Node</span> <span class="n">root</span><span class="o">;</span>
</span><span class='line'><span class="n">Edge</span><span class="o">[]</span> <span class="n">edges</span><span class="o">;</span>
</span><span class='line'><span class="n">Node</span><span class="o">[]</span> <span class="n">nodes</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">N</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">A</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">B</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">C</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">edges</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Edge</span><span class="o">[</span><span class="n">A</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">A</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">edges</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Edge</span><span class="o">(</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">B</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">C</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">edges</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Edge</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Edge</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Edge</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// TODO Auto-generated method stub</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">o1</span><span class="o">.</span><span class="na">c</span> <span class="o">-</span> <span class="n">o2</span><span class="o">.</span><span class="na">c</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">edges</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">nodes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">[</span><span class="mi">200000</span><span class="o">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">200000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">nodes</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// get start node</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">edges</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">a</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">edges</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">b</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Node</span> <span class="n">cnodefront</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
</span><span class='line'>        <span class="n">Node</span> <span class="n">cnodeend</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">[</span><span class="n">end</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Node</span> <span class="n">nextEndNode</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">[</span><span class="n">end</span><span class="o">];</span>
</span><span class='line'>        <span class="n">Node</span> <span class="n">nextStartNode</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">cnodefront</span><span class="o">.</span><span class="na">value</span> <span class="o">&lt;</span> <span class="n">edges</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">nextEndNode</span> <span class="o">=</span> <span class="n">createNextNode</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">end</span><span class="o">,</span> <span class="n">cnodefront</span><span class="o">.</span><span class="na">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">cnodeend</span><span class="o">.</span><span class="na">value</span> <span class="o">&lt;</span> <span class="n">edges</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">nextStartNode</span> <span class="o">=</span> <span class="n">createNextNode</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">cnodeend</span><span class="o">.</span><span class="na">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">nodes</span><span class="o">[</span><span class="n">end</span><span class="o">]</span> <span class="o">=</span> <span class="n">nextEndNode</span><span class="o">;</span>
</span><span class='line'>        <span class="n">nodes</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">=</span> <span class="n">nextStartNode</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Node</span> <span class="nf">createNextNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Node</span> <span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">edges</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">c</span><span class="o">,</span> <span class="n">depth</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Node</span> <span class="n">cnode</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">[</span><span class="n">end</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">depth</span> <span class="o">&gt;</span> <span class="n">cnode</span><span class="o">.</span><span class="na">depth</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="n">depth</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">node</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cnode</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Edge</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Edge</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">,</span> <span class="kt">int</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">depth</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">depth</span> <span class="o">=</span> <span class="n">depth</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<script language="javaScript">
$(document).ready( function () { $("a[href^='http']:not([href*='" + location.hostname + "'])").attr('target', '_blank'); })
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mozc完全解説02]]></title>
    <link href="http://zh-wang.github.io/blog/2014/05/01/mozc-analysis-02/"/>
    <updated>2014-05-01T15:18:39+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/05/01/mozc-analysis-02</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p><a href="http://zh-wang.github.io/blog/2014/04/22/mozc-analysis-01/">前回</a>では、android側からタッチ反応を発生してから、jniを通して変換エンジンのnative側が候補を返すまでを説明した。<br/>
今回ではjni部分のコードを少し説明する。</p>

<h2>What is jni?</h2>

<p>言わばjavaとc, cppとの間のインターフェイスですね。cやcppを使って、java側とデータのやり取りができる。<br/>
<a href="http://ja.wikipedia.org/wiki/Java_Native_Interface">Java Native Interface</a></p>

<h2>mozcに使われているjni</h2>

<p>java側ではMozcJNI.javaというラッパーがある。メソッドはこの通り。</p>

<ul>
<li><code>load(String, Buffer, Buffer, String)</code><br/>
  初期化用のメソッド、apkの中に入っている辞書データなどをnative側に渡す</li>
<li><code>evalCommand(byte[])</code><br/>
  native側と通信するメソッド、jniで実装</li>
<li><code>onPostLoad(String, Buffer, Buffer)</code><br/>
  loadメソッドに使われている、jniで実装</li>
<li><code>getVersion()</code><br/>
  native側のバージョン情報をjava側に渡す。loadメソッドに使われている、jniで実装</li>
</ul>


<p>jniの実装ファイルはjni/mozcjni.cc。では、<code>evalCommand(byte[])</code>を詳しく見てみよう。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// ------&gt; この矢印のあたりは、私の追加したコメントです</span>
</span><span class='line'><span class="n">jbyteArray</span> <span class="n">JNICALL</span> <span class="n">evalCommand</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">clazz</span><span class="p">,</span> <span class="n">jbyteArray</span> <span class="n">in_bytes_array</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">jboolean</span> <span class="n">is_copy</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="n">jbyte</span> <span class="o">*</span><span class="n">in_bytes</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetByteArrayElements</span><span class="p">(</span><span class="n">in_bytes_array</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">is_copy</span><span class="p">);</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">jsize</span> <span class="n">in_size</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetArrayLength</span><span class="p">(</span><span class="n">in_bytes_array</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ------&gt; commandにパースする。session/commands.protoにはcommandの定義が書かれいる。</span>
</span><span class='line'>  <span class="c1">// ------&gt; protobuf(Protocol Buffers)というライブラリを使っています。</span>
</span><span class='line'>  <span class="n">mozc</span><span class="o">::</span><span class="n">commands</span><span class="o">::</span><span class="n">Command</span> <span class="n">command</span><span class="p">;</span>
</span><span class='line'>  <span class="n">command</span><span class="p">.</span><span class="n">ParseFromArray</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">,</span> <span class="n">in_size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ------&gt; native側でcommandを処理する。結果はcommandの中に格納する。</span>
</span><span class='line'>  <span class="n">mozc</span><span class="o">::</span><span class="n">Singleton</span><span class="o">&lt;</span><span class="n">SessionHandlerSingletonAdapter</span><span class="o">&gt;::</span><span class="n">get</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getHandler</span><span class="p">()</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="n">EvalCommand</span><span class="p">(</span><span class="o">&amp;</span><span class="n">command</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Use JNI_ABORT because in_bytes is read only.</span>
</span><span class='line'>  <span class="c1">// ------&gt; JNI_ABORT: 要素列をJava配列に反映させず、要素列バッファを解放する。</span>
</span><span class='line'>  <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleaseByteArrayElements</span><span class="p">(</span><span class="n">in_bytes_array</span><span class="p">,</span> <span class="n">in_bytes</span><span class="p">,</span> <span class="n">JNI_ABORT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 変換結果はjbyteArrayとしてjava側に返す</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span> <span class="n">out_size</span> <span class="o">=</span> <span class="n">command</span><span class="p">.</span><span class="n">ByteSize</span><span class="p">();</span>
</span><span class='line'>  <span class="n">jbyteArray</span> <span class="n">out_bytes_array</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewByteArray</span><span class="p">(</span><span class="n">out_size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ------&gt; is_copy: 0の場合、生成された配列(out_bytes)を変更すると、java側にも変更される。</span>
</span><span class='line'>  <span class="c1">//                  1の場合、変更してもjava側には変更されない。</span>
</span><span class='line'>  <span class="n">jbyte</span> <span class="o">*</span><span class="n">out_bytes</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetByteArrayElements</span><span class="p">(</span><span class="n">out_bytes_array</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">is_copy</span><span class="p">);</span>
</span><span class='line'>  <span class="n">command</span><span class="p">.</span><span class="n">SerializeToArray</span><span class="p">(</span><span class="n">out_bytes</span><span class="p">,</span> <span class="n">out_size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Use 0 to copy out_bytes to out_bytes_array.</span>
</span><span class='line'>  <span class="c1">// ------&gt; 0の場合、要素列をJava配列に反映させ、要素列バッファを解放する。</span>
</span><span class='line'>  <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleaseByteArrayElements</span><span class="p">(</span><span class="n">out_bytes_array</span><span class="p">,</span> <span class="n">out_bytes</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">out_bytes_array</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>in_bytes_array</code>には、タッチされたキーの情報などが入っている。<br/>
<code>out_bytes_array</code>には、変換候補などが入っている。<br/>
<a href="http://zh-wang.github.io/blog/2014/04/22/mozc-analysis-01/">前回</a>最後のlog部分を参考してくだい。</p>

<h2>終わりに</h2>

<p>jni側の実装に関する説明はここまで。<br/>
次回では<code>evalCommand</code>メソッドをもっと細かく説明する。</p>

<script language="javaScript">
$(document).ready( function () { $("a[href^='http']:not([href*='" + location.hostname + "'])").attr('target', '_blank'); })
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zshのpromptにvcsを表示する]]></title>
    <link href="http://zh-wang.github.io/blog/2014/04/24/vcs-info-for-zsh/"/>
    <updated>2014-04-24T10:38:49+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/04/24/vcs-info-for-zsh</id>
    <content type="html"><![CDATA[<h2>What is vcs?</h2>

<blockquote><p>バージョン管理システム(Version Control System)。</p></blockquote>

<p>zshというshellを使い始めたので、便利なカスタマイズプラグインを紹介します。<br/>
今回はこちらのプラグイン<a href="https://github.com/yonchu/zsh-vcs-prompt">zsh-vcs-prompt</a>を使って、zshのpromptにバージョン管理システム(git/svn/hg
)の情報を表示ます。<br/>
現在作業中branchは一目瞭然ですね。<br/>
<img src="http://zh-wang.github.io/images/2014_04_24_zsh_vcs_snapshot.png" title="zsh_vcs" alt="zsh_vcs_snapshot" /></p>

<p>各図形の意味は</p>

<blockquote><p>Remote status:<br/>
  ↑ n : ahead<br/>
  ↓ n : behind<br/>
Local status:<br/>
  ✔ : repository clean<br/>
  ● n : there are n staged files<br/>
  ✖ n : there are n unmerged files<br/>
  ✚ n : there are n changed but unstaged files<br/>
  … n : there are n untracked files<br/>
  ⚑n : there are n stashed<br/>
  branch(n) : there are n unmerged commits to master</p></blockquote>

<!-- more -->


<h2>How to use?</h2>

<ol>
<li><p>まずは、どこかのディレクトリに、<a href="https://github.com/yonchu/zsh-vcs-prompt">zsh-vcs-prompt</a>をclone。私の場合は~/projects/に。</p></li>
<li>zshの設定ファイル.zshrcに追加すればOK。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> ~/projects/zsh-vcs-prompt/zshrc.sh
</span><span class='line'><span class="nv">ZSH_VCS_PROMPT_ENABLE_CACHING</span><span class="o">=</span><span class="s1">&#39;true&#39;</span>
</span><span class='line'><span class="nv">RPROMPT</span><span class="o">=</span><span class="s1">&#39;$(vcs_super_info)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで右端に表示されました(RPROMPTはright promptの意味なので)<br/>
<img src="http://zh-wang.github.io/images/2014_04_24_zsh_rprompt.png" title="zsh_vcs_rprompt" alt="zsh_vcs_rprompt" /></p>

<h2>Customize it</h2>

<p>右端に表示されると画面が狭い時邪魔になるので、私の場合、promptの末に表示したい。少しカストマイズが必要です。</p>

<ul>
<li>まずこれをコメントアウト</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#RPROMPT=&#39;$(vcs_super_info)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>以下のコードを.zshrcに追加。(hookしなくても動けますが、promptの中身は更新されないので、ディレクトリ移動しても、gitコマンドを実行しても変わらない。)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">typeset</span> -ga precmd_functions
</span><span class='line'>
</span><span class='line'>precmd_functions+<span class="o">=</span><span class="s1">&#39;update_prompt&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># promptを作るメソッド</span>
</span><span class='line'>get_prompt<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">result</span><span class="o">=</span><span class="s2">&quot;%{$fg[yellow]%}%T%{$reset_color%} %{$fg_bold[yellow]%}%n%{$reset_color%}@%{$fg_bold[magenta]%}%m%{$reset_color%}:%{$fg_bold[blue]%}%3~%{$reset_color%} $(vcs_super_info)%(!.#.$) &quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># コマンド実行する前にhookとして実行、promptにあるvcsを更新</span>
</span><span class='line'>update_prompt<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  get_prompt
</span><span class='line'>  <span class="nv">PROMPT</span><span class="o">=</span><span class="nv">$result</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでOK。
<img src="http://zh-wang.github.io/images/2014_04_24_zsh_vcs_snapshot.png" title="zsh_vcs" alt="zsh_vcs_snapshot" /></p>

<script language="javaScript">
$(document).ready( function () { $("a[href^='http']:not([href*='" + location.hostname + "'])").attr('target', '_blank'); })
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mozc完全解説01]]></title>
    <link href="http://zh-wang.github.io/blog/2014/04/22/mozc-analysis-01/"/>
    <updated>2014-04-22T12:20:06+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/04/22/mozc-analysis-01</id>
    <content type="html"><![CDATA[<h2>What is mozc?</h2>

<blockquote><p>Mozc is a Japanese Input Method Editor (IME) designed for multi-platform such
as Chromium OS, Android, Windows, Mac and Linux. This open-source project
originates from Google Japanese Input.</p></blockquote>

<h2>(1) ソースを手に入れよう</h2>

<p>ここからダウンロード　<a href="https://code.google.com/p/mozc/">mozc project from google code</a></p>

<p>今回使うmozcのバージョンは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MAJOR=1
</span><span class='line'>MINOR=10
</span><span class='line'>BUILD=1390
</span><span class='line'>REVISION=103
</span><span class='line'>ANDROID_VERSION_CODE=1794
</span><span class='line'>FLAG=RELEASE
</span><span class='line'>TARGET_PLATFORM=Android
</span><span class='line'>ANDROID_APPLICATION_ID=org.mozc.android.inputmethod.japanese
</span><span class='line'>ANDROID_SERVICE_NAME=org.mozc.android.inputmethod.japanese.MozcService</span></code></pre></td></tr></table></div></figure>


<p>android版のビルドはMac非対応なので、vagrantを通してVMのubuntuでビルドします。<br/>
こちらのリポジトリを使えば楽です。
<a href="https://github.com/niw/mozc">https://github.com/niw/mozc</a></p>

<p>デフォルトでビルドすると、eclipseで開けるプロジェクトは作ってくれないので、手動で作りました。こちらからダウンロードできます。<br/>
<a href="https://dl.dropboxusercontent.com/u/40868784/mozc_android.zip  ">https://dl.dropboxusercontent.com/u/40868784/mozc_android.zip  </a>
フォルダ自体とその中のprotobuff, resources_ossをeclipseにインポートすればOK。後はMozcProxyPreferenceActivityというプロジェクトを実行するだけ。</p>

<p>※ ビルドする際に、&#8221;SDK does not have any Build Tools installed.&ldquo;が表示されたら、Build Toolsをダウンロードする必要があります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /usr/bin/curl -L -O 'http://dl.google.com/android/repository/build-tools_r19-linux.zip' && unzip build-tools_r19-linux.zip -d /opt/android/android-sdk-linux/build-tools/ 
</span><span class='line'>$ mv /opt/android/android-sdk-linux/build-tools/android-4.4 /opt/android/android-sdk-linux/build-tools/19.0.0
</span><span class='line'>
</span><span class='line'>or
</span><span class='line'>
</span><span class='line'>$ /opt/android/android-sdk-linux/tools/android update sdk -u -t build-tools-20.0.0</span></code></pre></td></tr></table></div></figure>


<h2>(2) キーのタッチから、変換候補がもらうまで、簡単な解析をやります</h2>

<!-- more -->


<p>android側のフリックキーボードで「あ」を押し、タッチイベントが発生する。そうすると、以下のコードが順番的に実行されます。</p>

<p>org.mozc.android.inputmethod.japanese.ViewManager:260:onKey<br/>
ここでViewのタッチエベントをキャッチする。<br/>
↓<br/>
org.mozc.android.inputmethod.japanese.MozcService:245:onKeyEvent  <br/>
メーンサービスでKeyEventを処理する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onKeyEvent</span><span class="o">(</span> <span class="n">ProtoCommands</span><span class="o">.</span><span class="na">KeyEvent</span> <span class="n">mozcKeyEvent</span><span class="o">,</span> <span class="n">KeyEventInterface</span> <span class="n">keyEvent</span><span class="o">,</span> <span class="n">KeyboardSpecification</span> <span class="n">keyboardSpecification</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">TouchEvent</span><span class="o">&gt;</span> <span class="n">touchEventList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sendKeyWithKeyboardSpecification</span><span class="o">(</span><span class="n">mozcKeyEvent</span><span class="o">,</span> <span class="n">keyEvent</span><span class="o">,</span>
</span><span class='line'>                                   <span class="n">keyboardSpecification</span><span class="o">,</span> <span class="n">getResources</span><span class="o">().</span><span class="na">getConfiguration</span><span class="o">(),</span>
</span><span class='line'>                                   <span class="n">touchEventList</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓<br/>
org.mozc.android.inputmethod.japanese.MozcService:968:sendKeyWithKeyboardSpecification</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Sends mozcKeyEvent and/or Request to mozc server.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * This skips to send request if the given keyboard specification is</span>
</span><span class='line'><span class="cm">   * same as before.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="nf">sendKeyWithKeyboardSpecification</span><span class="o">(</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓<br/>
org.mozc.android.inputmethod.japanese.session.SessionExecutor:626:sendKey</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Sends {@code SEND_KEY} command to the server asynchronously.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendKey</span><span class="o">(</span><span class="n">ProtoCommands</span><span class="o">.</span><span class="na">KeyEvent</span> <span class="n">mozcKeyEvent</span><span class="o">,</span> <span class="n">KeyEventInterface</span> <span class="n">triggeringKeyEvent</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">TouchEvent</span><span class="o">&gt;</span> <span class="n">touchEventList</span><span class="o">,</span> <span class="n">EvaluationCallback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">evaluateAsynchronously</span><span class="o">(</span><span class="n">inputBuilder</span><span class="o">,</span> <span class="n">triggeringKeyEvent</span><span class="o">,</span> <span class="n">callback</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓<br/>
org.mozc.android.inputmethod.japanese.session.SessionExecutor:612:evaluateAsynchronously<br/>
asyncなので、handlerに渡します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kt">void</span> <span class="nf">evaluateAsynchronously</span><span class="o">(</span><span class="n">Input</span><span class="o">.</span><span class="na">Builder</span> <span class="n">inputBuilder</span><span class="o">,</span> <span class="n">KeyEventInterface</span> <span class="n">triggeringKeyEvent</span><span class="o">,</span> <span class="n">EvaluationCallback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">handler</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">handler</span><span class="o">.</span><span class="na">obtainMessage</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="n">context</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓<br/>
org.mozc.android.inputmethod.japanese.session.SessionExecutor:300:handlerMessage<br/>
SessionExecutorの中のExecutorMainCallbackがmessageを取り、処理する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * A core implementation of evaluation executing process.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * &lt;p&gt;This class takes messages from the UI thread. By using {@link SessionHandler},</span>
</span><span class='line'><span class="cm">   * it evaluates the {@link Input} in a message, and then returns the result with notifying</span>
</span><span class='line'><span class="cm">   * the UI thread if necessary.</span>
</span><span class='line'><span class="cm">   * All evaluations should be done with this class in order to keep evaluation in the incoming</span>
</span><span class='line'><span class="cm">   * order.</span>
</span><span class='line'><span class="cm">   * Package private for testing purpose.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ExecutorMainCallback</span> <span class="kd">implements</span> <span class="n">Handler</span><span class="o">.</span><span class="na">Callback</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Dispatch the message.</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">what</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">INITIALIZE_SESSION_HANDLER:</span>
</span><span class='line'>          <span class="n">sessionHandler</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">cast</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">obj</span><span class="o">));</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">DELETE_SESSION:</span>
</span><span class='line'>          <span class="n">deleteSession</span><span class="o">();</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">EVALUATE_ASYNCHRONOUSLY:</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">EVALUATE_KEYEVENT_ASYNCHRONOUSLY:</span>
</span><span class='line'>          <span class="n">evaluateAsynchronously</span><span class="o">(</span>
</span><span class='line'>              <span class="n">AsynchronousEvaluationContext</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">cast</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">obj</span><span class="o">),</span> <span class="n">message</span><span class="o">.</span><span class="na">getTarget</span><span class="o">());</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓<br/>
org.mozc.android.inputmethod.japanese.session.SessionExecutor:459</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="n">context</span><span class="o">.</span><span class="na">outCommand</span> <span class="o">=</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">inputBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓<br/>
org.mozc.android.inputmethod.japanese.session.SessionExecutor:333<br/>
ここで、JNIを通してnative変換エンジンと通信する。（同期で）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Command</span> <span class="nf">evaluate</span><span class="o">(</span><span class="n">Input</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">Command</span> <span class="n">outCommand</span> <span class="o">=</span> <span class="n">sessionHandler</span><span class="o">.</span><span class="na">evalCommand</span><span class="o">(</span><span class="n">inCommand</span><span class="o">);</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓<br/>
org.mozc.android.inputmethod.japanese.session.LocalSessionHandler:100</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Command</span> <span class="nf">evalCommand</span><span class="o">(</span><span class="n">Command</span> <span class="n">command</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">inBytes</span> <span class="o">=</span> <span class="n">command</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">outBytes</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">outBytes</span> <span class="o">=</span> <span class="n">MozcJNI</span><span class="o">.</span><span class="na">evalCommand</span><span class="o">(</span><span class="n">inBytes</span><span class="o">);</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Command</span><span class="o">.</span><span class="na">parseFrom</span><span class="o">(</span><span class="n">outBytes</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidProtocolBufferException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">MozcLog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="s">&quot;InvalidProtocolBufferException is thrown.&quot;</span>
</span><span class='line'>          <span class="o">+</span> <span class="s">&quot;We can do nothing so just return default instance.&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">MozcLog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Command</span><span class="o">.</span><span class="na">getDefaultInstance</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここでのCommand.parseFrom(outBytes)をデーバッグすると、以下の入力、出力、変換候補リストが分かります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">input</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">type</span><span class="p">:</span> <span class="no">SEND_KEY</span>
</span><span class='line'>    <span class="nb">id</span><span class="p">:</span> <span class="mi">6381052470309579002</span>
</span><span class='line'>    <span class="n">key</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">key_code</span><span class="p">:</span> <span class="mi">49</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="n">touch_events</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">source_id</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>        <span class="n">stroke</span> <span class="p">{</span>
</span><span class='line'>              <span class="ss">action</span><span class="p">:</span> <span class="no">TOUCH_DOWN</span>
</span><span class='line'>              <span class="ss">x</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">30168644</span>
</span><span class='line'>              <span class="ss">y</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">16023746</span>
</span><span class='line'>              <span class="ss">timestamp</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="n">stroke</span> <span class="p">{</span>
</span><span class='line'>              <span class="ss">action</span><span class="p">:</span> <span class="no">TOUCH_UP</span>
</span><span class='line'>              <span class="ss">x</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">30168644</span>
</span><span class='line'>              <span class="ss">y</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">16023746</span>
</span><span class='line'>              <span class="ss">timestamp</span><span class="p">:</span> <span class="mi">25</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">output</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">id</span><span class="p">:</span> <span class="mi">6381052470309579002</span>
</span><span class='line'>    <span class="ss">mode</span><span class="p">:</span> <span class="no">HIRAGANA</span>
</span><span class='line'>    <span class="ss">consumed</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">preedit</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">cursor</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>      <span class="no">Segment</span> <span class="p">{</span>
</span><span class='line'>            <span class="ss">annotation</span><span class="p">:</span> <span class="no">UNDERLINE</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\204</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">value_length</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>            <span class="ss">key</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\204</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="n">candidates</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">size</span><span class="p">:</span> <span class="mi">151</span>
</span><span class='line'>      <span class="no">Candidate</span> <span class="p">{</span>
</span><span class='line'>            <span class="ss">index</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\204\343\202\215</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Suffix&quot;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>            <span class="nb">id</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="no">Candidate</span> <span class="p">{</span>
</span><span class='line'>            <span class="ss">index</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\204</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Realtime&quot;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>            <span class="nb">id</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="no">Candidate</span> <span class="p">{</span>
</span><span class='line'>            <span class="ss">index</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\350\203\203</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Realtime&quot;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>            <span class="nb">id</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="no">Candidate</span> <span class="p">{</span>
</span><span class='line'>            <span class="ss">index</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\203</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="ss">description</span><span class="p">:</span>
</span><span class='line'>                <span class="s2">&quot;</span><span class="se">\346\215\250\343\201\246\344\273\256\345\220\215</span><span class="s2"></span>
</span><span class='line'><span class="s2">                    </span><span class="se">\345\260\217\346\233\270\343\201\215\346\226\207\345\255\227</span><span class="s2">&quot;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>            <span class="nb">id</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="sr">//</span> <span class="err">省略</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">Candidate</span> <span class="p">{</span>
</span><span class='line'>            <span class="ss">index</span><span class="p">:</span> <span class="mi">8</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\344\275\215</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Realtime&quot;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>            <span class="nb">id</span><span class="p">:</span> <span class="mi">8</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="ss">position</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>      <span class="ss">category</span><span class="p">:</span> <span class="no">SUGGESTION</span>
</span><span class='line'>      <span class="n">display_type</span><span class="p">:</span> <span class="no">MAIN</span>
</span><span class='line'>      <span class="n">footer</span> <span class="p">{</span>
</span><span class='line'>            <span class="ss">label</span><span class="p">:</span>
</span><span class='line'>          <span class="s2">&quot;Tab</span><span class="se">\343\202\255\343\203\274\343\201\247\351\201\270\346\212\236</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="n">status</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">activated</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>      <span class="ss">mode</span><span class="p">:</span> <span class="no">HIRAGANA</span>
</span><span class='line'>      <span class="n">comeback_mode</span><span class="p">:</span> <span class="no">HIRAGANA</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="n">all_candidate_words</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">candidates</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">id</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>            <span class="ss">index</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>            <span class="ss">key</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\204\343\202\215</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\204\343\202\215</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Suffix&quot;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="n">candidates</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">id</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>            <span class="ss">index</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\204</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Realtime&quot;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="n">candidates</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">id</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>            <span class="ss">index</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\350\203\203</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Realtime&quot;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="n">candidates</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">id</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'>            <span class="ss">index</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'>            <span class="ss">key</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\203</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="ss">value</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\343\201\203</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="ss">description</span><span class="p">:</span>
</span><span class='line'>                <span class="s2">&quot;</span><span class="se">\346\215\250\343\201\246\344\273\256\345\220\215</span><span class="s2"></span>
</span><span class='line'><span class="s2">                    </span><span class="se">\345\260\217\346\233\270\343\201\215\346\226\207\345\255\227</span><span class="s2">&quot;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="sr">//</span> <span class="err">省略</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一回目はここまで。(^O^)／</p>

<script language="javaScript">
$(document).ready( function () { $("a[href^='http']:not([href*='" + location.hostname + "'])").attr('target', '_blank'); })
</script>



]]></content>
  </entry>
  
</feed>
