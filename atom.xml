<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Welcome to FutureAppLaboratory]]></title>
  <link href="http://zh-wang.github.io/atom.xml" rel="self"/>
  <link href="http://zh-wang.github.io/"/>
  <updated>2015-05-12T14:44:15+09:00</updated>
  <id>http://zh-wang.github.io/</id>
  <author>
    <name><![CDATA[viennakanon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Swift Part 14]]></title>
    <link href="http://zh-wang.github.io/blog/2015/05/12/learning-swift-part-14/"/>
    <updated>2015-05-12T12:20:35+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/05/12/learning-swift-part-14</id>
    <content type="html"><![CDATA[<h2>===== Full Notes =====</h2>

<h3>Optional Chaining</h3>

<ul>
<li><p><em>Optional chaining</em> is a process for querying and calling properties, methods, and subscripts on an optional that might currently be nil.</p>

<ul>
<li>If the optional contains a value, the property, method, or subscript call succeeds; if the optional is nil, the property, method, or subscript call returns nil.</li>
<li>Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is nil.</li>
<li>Optional chaining in Swift is similar to messaging nil in Objective-C, but in a way that works for any type, and that can be checked for success or failure.</li>
</ul>
</li>
<li><p>Optional Chaining as an Alternative to Forced Unwrapping</p>

<ul>
<li><p>Sample of Forced Unwarpping
        class Person {
            var residence: Residence?
        }</p>

<pre><code>    class Residence {
        var numberOfRooms = 1
    }

    let john = Persion()

    let roomCount = john.residence!.numberOfRooms
    // this triggers a runtime error, because residence maybe nil
</code></pre></li>
<li><p>Optional chaining provides an alternative way to access the value of numberOfRooms.</p>

<pre><code>    if let roomCount = john.residence?.numberOfRooms {
        println("John's residence has \(roomCount) room(s).")
    } else {
        println("Unable to retrieve the number of rooms.")
    }
    // prints "Unable to retrieve the number of rooms.

    // Even numberOfRooms is Int, optional chaining will always return it as Int?
</code></pre></li>
</ul>
</li>
<li><p>Defining Model Classes for Optional Chaining</p>

<pre><code>      class Residence {
          var rooms = Room[]()
          var numberOfRooms: Int {
          return rooms.count
          }
          subscript(i: Int) -&gt; Room {
              return rooms[i]
          }
          func printNumberOfRooms() {
              println("The number of rooms is \(numberOfRooms)")
          }
          var address: Address?
      }

      class Room {
          let name: String
          init(name: String) { self.name = name }
      }

      class Address {
          var buildingName: String?
          var buildingNumber: String?
          var street: String?
          func buildingIdentifier() -&gt; String? {
              if buildingName {
                  return buildingName
              } else if buildingNumber {
                  return buildingNumber
              } else {
                  return nil
              }
          }
      }
</code></pre></li>
<li><p>Calling Properties Through Optional Chaining</p>

<ul>
<li><p>It is the same as above</p>

<pre><code>    let john = Person()
    if let roomCount = john.residence?.numberOfRooms {
        println("John's residence has \(roomCount) room(s).")
    } else {
        println("Unable to retrieve the number of rooms.")
    }
</code></pre></li>
</ul>
</li>
<li><p>Calling Methods Through Optional Chaining</p>

<pre><code>      func printNumberOfRooms() {
          println("The number of rooms is \(numberOfRooms)")
      }

      “if john.residence?.printNumberOfRooms() {
          println("It was possible to print the number of rooms.")
      } else {
          println("It was not possible to print the number of rooms.")
      }
      // prints "It was not possible to print the number of rooms.
</code></pre></li>
<li><p>Calling Subscripts Through Optional Chaining</p>

<pre><code>      if let firstRoomName = john.residence?[0].name {
          println("The first room name is \(firstRoomName).")
      } else {
          println("Unable to retrieve the first room name.")
      }
      // prints "Unable to retrieve the first room name.
</code></pre></li>
<li><p>Linking Multiple Levels of Chaining</p>

<ul>
<li>If the type you are trying to retrieve is not optional, it will become optional because of the optional chaining.</li>
<li><p>If the type you are trying to retrieve is already optional, it will not become more optional because of the chaining.</p>

<pre><code>    “if let johnsStreet = john.residence?.address?.street {
        println("John's street name is \(johnsStreet).")
    } else {
        println("Unable to retrieve the address.")
    }
    // prints "Unable to retrieve the address.”
</code></pre></li>
</ul>
</li>
<li><p>Chaining on Methods With Optional Return Values</p>

<pre><code>      if let buildingIdentifier = john.residence?.address?.buildingIdentifier() {
          println("John's building identifier is \(buildingIdentifier).")
      }
      // prints "John's building identifier is The Larches.

      “if let upper = john.residence?.address?.buildingIdentifier()?.uppercaseString {
          println("John's uppercase building identifier is \(upper).")
      }
      // prints "John's uppercase building identifier is THE LARCHES.”
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FB HackerCup 2015 R1 40:CorporateGifting]]></title>
    <link href="http://zh-wang.github.io/blog/2015/04/03/fb-hackcup-2015-r1-40-corporategifting/"/>
    <updated>2015-04-03T23:48:59+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/04/03/fb-hackcup-2015-r1-40-corporategifting</id>
    <content type="html"><![CDATA[<p>Problem definition can be found <a href="https://www.facebook.com/hackercup/problems.php?pid=759650454070547&amp;round=344496159068801">here</a>.<br/>
Need some tricks on recursion.<br/>
And if keep dp size for about $\sqrt{N}$ will cause the program run too LONG!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;climits&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cassert&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;numeric&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utility&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iomanip&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stack&gt;</span>
</span><span class='line'><span class="cp">#include &lt;list&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="cp">#define PB push_back</span>
</span><span class='line'><span class="cp">#define MP make_pair</span>
</span><span class='line'><span class="cp">#define REP(i, n) for (int i(0); i &lt; n; ++i)</span>
</span><span class='line'><span class="cp">#define REP1(i, n) for (int i(1); i &lt; n; ++i)</span>
</span><span class='line'><span class="cp">#define REP1N(i, n) for (int i(1); i &lt;= n; ++i)</span>
</span><span class='line'><span class="cp">#define FOR(i, a, b) for (int i(a); i &lt;= b; ++i)</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">vll</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vi</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vi</span><span class="o">&gt;</span> <span class="n">vvi</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">vb</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vb</span><span class="o">&gt;</span> <span class="n">vvb</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">tc</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">parentIndex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">node</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">node</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">child</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">child</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">node</span> <span class="n">nodes</span><span class="p">[</span><span class="mi">200001</span><span class="p">];</span>
</span><span class='line'><span class="n">pii</span> <span class="n">best1</span><span class="p">[</span><span class="mi">200001</span><span class="p">];</span>
</span><span class='line'><span class="n">pii</span> <span class="n">best2</span><span class="p">[</span><span class="mi">200001</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">sort_bests</span><span class="p">(</span><span class="k">const</span> <span class="n">pii</span><span class="o">&amp;</span> <span class="n">left</span><span class="p">,</span> <span class="k">const</span> <span class="n">pii</span><span class="o">&amp;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">left</span><span class="p">.</span><span class="n">second</span> <span class="o">==</span> <span class="n">right</span><span class="p">.</span><span class="n">second</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">left</span><span class="p">.</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">left</span><span class="p">.</span><span class="n">second</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">solve</span><span class="p">(</span><span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rootIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">node</span><span class="o">*</span> <span class="n">root</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">nodes</span><span class="p">[</span><span class="n">rootIndex</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">csize</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>    <span class="n">REP</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">csize</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">solve</span><span class="p">(</span><span class="o">++</span><span class="n">depth</span><span class="p">,</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">maxColor</span> <span class="o">=</span> <span class="n">ceil</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">n</span><span class="p">));</span>
</span><span class='line'>    <span class="n">REP1N</span><span class="p">(</span><span class="n">rootColor</span><span class="p">,</span> <span class="n">maxColor</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// find color should be choosen for root</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">_res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// subtree sum of root, when picking rootColor</span>
</span><span class='line'>        <span class="n">REP</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">csize</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// for each child</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">childIndex</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>            <span class="n">node</span><span class="o">*</span> <span class="n">child</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">nodes</span><span class="p">[</span><span class="n">childIndex</span><span class="p">];</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">__res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">rootColor</span> <span class="o">==</span> <span class="n">best1</span><span class="p">[</span><span class="n">childIndex</span><span class="p">].</span><span class="n">first</span><span class="p">)</span>
</span><span class='line'>                <span class="n">__res</span> <span class="o">+=</span> <span class="n">best2</span><span class="p">[</span><span class="n">childIndex</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">__res</span> <span class="o">+=</span> <span class="n">best1</span><span class="p">[</span><span class="n">childIndex</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>            <span class="n">_res</span> <span class="o">+=</span> <span class="n">__res</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">_res</span> <span class="o">+=</span> <span class="n">rootColor</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pii</span> <span class="n">new_best</span> <span class="o">=</span> <span class="n">MP</span><span class="p">(</span><span class="n">rootColor</span><span class="p">,</span> <span class="n">_res</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">sort_bests</span><span class="p">(</span><span class="n">new_best</span><span class="p">,</span> <span class="n">best1</span><span class="p">[</span><span class="n">rootIndex</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">best2</span><span class="p">[</span><span class="n">rootIndex</span><span class="p">]</span> <span class="o">=</span> <span class="n">best1</span><span class="p">[</span><span class="n">rootIndex</span><span class="p">];</span>
</span><span class='line'>            <span class="n">best1</span><span class="p">[</span><span class="n">rootIndex</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_best</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">sort_bests</span><span class="p">(</span><span class="n">new_best</span><span class="p">,</span> <span class="n">best2</span><span class="p">[</span><span class="n">rootIndex</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">best2</span><span class="p">[</span><span class="n">rootIndex</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_best</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">tc</span><span class="p">;</span>
</span><span class='line'>    <span class="n">REP</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">tc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>        <span class="n">REP</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="mi">200001</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">nodes</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">node</span><span class="p">();</span>
</span><span class='line'>            <span class="n">best1</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">MP</span><span class="p">(</span><span class="n">INT_MAX</span><span class="p">,</span> <span class="n">INT_MAX</span><span class="p">);</span>
</span><span class='line'>            <span class="n">best2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">MP</span><span class="p">(</span><span class="n">INT_MAX</span><span class="p">,</span> <span class="n">INT_MAX</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">REP</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">parentIndex</span><span class="p">;</span>
</span><span class='line'>            <span class="n">nodes</span><span class="p">[</span><span class="n">parentIndex</span><span class="p">].</span><span class="n">child</span><span class="p">.</span><span class="n">PB</span><span class="p">(</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">solve</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">best1</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">second</span> <span class="o">&gt;</span> <span class="n">best2</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">second</span> <span class="o">?</span> <span class="n">best2</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nl">second</span> <span class="p">:</span> <span class="n">best1</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">res</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FB HackerCup 2015 R1 25:Autocomplete]]></title>
    <link href="http://zh-wang.github.io/blog/2015/04/02/fb-hackercup-2015-r1-25-autocomplete/"/>
    <updated>2015-04-02T18:16:03+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/04/02/fb-hackercup-2015-r1-25-autocomplete</id>
    <content type="html"><![CDATA[<p>Problem definition can be found <a href="https://www.facebook.com/hackercup/problems.php?pid=313229895540583&amp;round=344496159068801">here</a>.<br/>
This is a basic problem which can be solved directly by a Tri-tree.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;climits&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cassert&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;numeric&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utility&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iomanip&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stack&gt;</span>
</span><span class='line'><span class="cp">#include &lt;list&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="cp">#define PB push_back</span>
</span><span class='line'><span class="cp">#define MP make_pair</span>
</span><span class='line'><span class="cp">#define REP(i, n) for (int i(0); i &lt; n; ++i)</span>
</span><span class='line'><span class="cp">#define REP1(i, n) for (int i(1); i &lt; n; ++i)</span>
</span><span class='line'><span class="cp">#define FOR(i, a, b) for (int i(a); i &lt;= b; ++i)</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">node</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">node</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">childs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="o">*</span><span class="p">[</span><span class="mi">26</span><span class="p">];</span>
</span><span class='line'>        <span class="n">REP</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">26</span><span class="p">)</span> <span class="n">childs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">node</span><span class="o">**</span> <span class="n">childs</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">tc</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="n">string</span> <span class="n">word</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">findWordAndBuildTree</span><span class="p">(</span><span class="n">node</span><span class="o">*</span> <span class="n">root</span><span class="p">,</span> <span class="n">string</span> <span class="n">word</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">node</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">found</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="n">REP</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">word</span><span class="p">.</span><span class="n">length</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">childs</span><span class="p">[</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">found</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">res</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="n">found</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&gt;</span><span class="n">childs</span><span class="p">[</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">childs</span><span class="p">[</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">tc</span><span class="p">;</span>
</span><span class='line'>    <span class="n">REP</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">tc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>        <span class="n">node</span><span class="o">*</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">REP</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">word</span><span class="p">;</span>
</span><span class='line'>            <span class="n">res</span> <span class="o">+=</span> <span class="n">findWordAndBuildTree</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">word</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">res</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resize Gif by RMagick]]></title>
    <link href="http://zh-wang.github.io/blog/2015/03/25/resize-gif-by-rmagick/"/>
    <updated>2015-03-25T18:31:47+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/03/25/resize-gif-by-rmagick</id>
    <content type="html"><![CDATA[<p>Only source code :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;RMagick&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">img</span> <span class="o">=</span> <span class="no">Magick</span><span class="o">::</span><span class="no">ImageList</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;FILENAME.gif&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">img</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">frame</span><span class="o">|</span>
</span><span class='line'>  <span class="n">frame</span><span class="o">.</span><span class="n">resize!</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">img</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;FILENAME_s.gif&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enable Hide and Internal Classes in Android SDK]]></title>
    <link href="http://zh-wang.github.io/blog/2015/03/23/enable-hide-and-internal-classes-in-android-sdk/"/>
    <updated>2015-03-23T14:36:26+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/03/23/enable-hide-and-internal-classes-in-android-sdk</id>
    <content type="html"><![CDATA[<h2>Hide and Internal Classes</h2>

<p>During android development, you may need to access some method or classes which is not contained in official SDK.<br/>
For example, <code>dalvik.system.VMRuntime</code>, <code>com.android.internal.app.AlertController</code>, etc.<br/>
Although you can done with Java&rsquo;s reflection, it is not developer friendly.<br/>
Here is a more friendly way to do this.</p>

<h2>Preparation</h2>

<p>(I&rsquo;m working on a Mac. But I think procedure is similar if working on other OS.)</p>

<ol>
<li>Android&rsquo;s official SDK. We use android-17(4.2.2) here.</li>
<li>Android emulator.</li>
<li>Can run ruby.</li>
</ol>


<h2>Steps</h2>

<ol>
<li>Create an emulator for 4.2.2 OS. Name it as &ldquo;android422&rdquo;. (by command line or Eclipse)</li>
<li><p>Pull all framework libraries to working machine, which contains all hide and internal classes.</p>

<pre><code> emulator -avd android422
 adb pull /system/framework/* framework
</code></pre></li>
<li><p>Get decompiling tools for odex. Download <code>smali-2.0.3.jar</code> and <code>baksmali-2.0.3.jar</code>. <a href="https://code.google.com/p/smali/">https://code.google.com/p/smali/</a></p></li>
<li>Put them in same directory, run <code>./create_custom_sdk.rb</code></li>
<li>Then you use choose the created custom sdk from Eclipse.</li>
</ol>


<p><img src="http://zh-wang.github.io/images/2015_03_23_image01.png" title="Choose custom sdk" alt="Image A" /></p>

<h2>Source</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -- create_custom_sdk.rb --</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># clear &#39;out&#39; directory</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;rm -rf out&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;mkdir out&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="s2">&quot;out&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># core.odex(optimized dex) file -&gt; dex file</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;java -jar ../baksmali-2.0.3.jar -a 17 -d ../framework -x ../framework/core.odex -o internal_core_smali&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;java -jar ../smali-2.0.3.jar -x -o core.dex internal_core_smali&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># framework.odex(optimized dex) file -&gt; dex file</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;java -jar ../baksmali-2.0.3.jar -a 17 -d ../framework -x ../framework/framework.odex -o internal_framework_smali&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;java -jar ../smali-2.0.3.jar -x -o framework.dex internal_framework_smali&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># .dex -&gt; .class, which contains all symbols including hide and internal</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;dex2jar core.dex&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;unzip core_dex2jar.jar -d full-symbol-android&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;dex2jar framework.dex&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;unzip framework_dex2jar.jar -d full-symbol-android&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># copy offical sdk here</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;cp -r ~/sdk/android-sdk-macosx/platforms/android-17 android422&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># unzip offical android.jar, merge full-symbol-android into it</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;unzip android422/android.jar -d custom-android&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;cp -r full-symbol-android/* custom-android&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="s2">&quot;custom-android&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;zip -r9 internal-android.zip *&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="s2">&quot;..&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;mv custom-android/internal-android.zip android422/android.jar&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Fix some properties to enable custom sdk shown in Eclipse</span>
</span><span class='line'><span class="n">filename</span> <span class="o">=</span> <span class="s2">&quot;android422/build.prop&quot;</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/ro\.build\.id=.*/</span><span class="p">,</span> <span class="s2">&quot;ro.build.id=Custom422&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/ro\.build\.version\.sdk=17/</span><span class="p">,</span> <span class="s2">&quot;ro.build.version.sdk=422&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/ro\.build\.version\.release=.*/</span><span class="p">,</span> <span class="s2">&quot;ro.build.version.release=4.2.2.c&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="n">file</span> <span class="o">&lt;&lt;</span> <span class="nb">puts</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">filename</span> <span class="o">=</span> <span class="s2">&quot;android422/source.properties&quot;</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/AndroidVersion\.ApiLevel=17/</span><span class="p">,</span> <span class="s2">&quot;AndroidVersion.ApiLevel=422&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/Pkg\.Desc=Android SDK Platform 4\.2\.2/</span><span class="p">,</span> <span class="s2">&quot;Pkg.Desc=Android SDK Platform Custom422&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="n">file</span> <span class="o">&lt;&lt;</span> <span class="nb">puts</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Copy custom sdk to offical sdk&#39;s directory</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;cp -r android422 ~/sdk/android-sdk-macosx/platforms&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Done&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analysis of PROB Milking Cows]]></title>
    <link href="http://zh-wang.github.io/blog/2015/03/15/analysis-of-prob-milking-cows/"/>
    <updated>2015-03-15T21:14:14+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/03/15/analysis-of-prob-milking-cows</id>
    <content type="html"><![CDATA[<h2>Description</h2>

<p>(From train.usaco.org) Three farmers rise at 5 am each morning and head for the barn to milk three cows. The first farmer begins milking his cow at time 300 (measured in seconds after 5 am) and ends at time 1000. The second farmer begins at time 700 and ends at time 1200. The third farmer begins at time 1500 and ends at time 2100. The longest continuous time during which at least one farmer was milking a cow was 900 seconds (from 300 to 1200). The longest time no milking was done, between the beginning and the ending of all milking, was 300 seconds (1500 minus 1200).</p>

<p>Your job is to write a program that will examine a list of beginning and ending times for N (1 &lt;= N &lt;= 5000) farmers milking N cows and compute (in seconds):</p>

<p>The longest time interval at least one cow was milked.
The longest time interval (after milking starts) during which no cows were being milked.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SAMPLE INPUT (file milk2.in)
</span><span class='line'>3
</span><span class='line'>300 1000
</span><span class='line'>700 1200
</span><span class='line'>1500 2100</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SAMPLE OUTPUT (file milk2.out)
</span><span class='line'>900 300</span></code></pre></td></tr></table></div></figure>


<h2>Analysis</h2>

<p>A straight-forward, brute-force solution is to keep a large array $k$, with each element $k_i$ is a boolean value indicates whether at least one cow is being milked at time $i$. Then travel from the start to the end to get the answer.</p>

<!-- more -->


<h2>Source</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">ID: viennak1</span>
</span><span class='line'><span class="cm">PROB: milk2</span>
</span><span class='line'><span class="cm">LANG: C++</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Section 1.2 PROB Milking Cows</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;climits&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cassert&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;numeric&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utility&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iomanip&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stack&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">s</span><span class="p">[</span><span class="mi">5000</span><span class="p">],</span><span class="n">t</span><span class="p">[</span><span class="mi">5000</span><span class="p">];</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">k</span><span class="p">[</span><span class="mi">1000005</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">res1</span><span class="p">,</span><span class="n">res2</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">ofstream</span> <span class="n">fout</span> <span class="p">(</span><span class="s">&quot;milk2.out&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ifstream</span> <span class="n">fin</span> <span class="p">(</span><span class="s">&quot;milk2.in&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">fin</span><span class="o">&gt;&gt;</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">i</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="n">swap</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]),</span><span class="n">swap</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">t</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">==</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">t</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&lt;</span><span class="n">t</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="n">swap</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">t</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">last</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">last</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">last</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">last</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="n">k</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
</span><span class='line'>            <span class="n">last</span><span class="o">=</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="n">j</span><span class="o">&lt;</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="n">k</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
</span><span class='line'>            <span class="n">last</span><span class="o">=</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">mark</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">end</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">end</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">end</span><span class="p">,</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">start</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">500</span><span class="p">)</span> <span class="n">start</span><span class="o">=</span><span class="n">last</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span> <span class="n">res2</span><span class="o">=</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="mi">500</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">start</span><span class="o">=</span><span class="n">last</span><span class="o">=</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">mark</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">start</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">end</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">mark</span><span class="o">==</span><span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">mark</span><span class="p">)</span> <span class="n">res2</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">res2</span><span class="p">,</span><span class="n">i</span><span class="o">-</span><span class="n">last</span><span class="p">),</span> <span class="n">last</span><span class="o">=</span><span class="n">i</span><span class="p">,</span> <span class="n">mark</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span> <span class="n">res1</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">res1</span><span class="p">,</span><span class="n">i</span><span class="o">-</span><span class="n">last</span><span class="p">),</span> <span class="n">last</span><span class="o">=</span><span class="n">i</span><span class="p">,</span> <span class="n">mark</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">fout</span><span class="o">&lt;&lt;</span><span class="n">res1</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="o">&lt;&lt;</span><span class="n">res2</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//for(int i=0;i&lt;21;i++) cout&lt;&lt;k[i]&lt;&lt;&quot; &quot;;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIF View for Android]]></title>
    <link href="http://zh-wang.github.io/blog/2015/03/10/gif-view-for-android/"/>
    <updated>2015-03-10T23:25:52+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/03/10/gif-view-for-android</id>
    <content type="html"><![CDATA[<h2>Movie view does not work sometimes</h2>

<p>There are several ways to decode and show GIF format image on android.<br/>
I tried using framework&rsquo;s <code>Movie</code> class to decode GIF, but it crashes on device which runs 4.1 or later.<br/>
Don&rsquo;t know why that occurs but I need to show animated GIF on all OS version.<br/>
So I write a custom view to do that, and in a simple way.</p>

<p>Source can be found on <a href="https://github.com/zh-wang/AndroidGifView">Github</a>.</p>

<h2>Something Wired</h2>

<p>GIF&rsquo;s document says that it is encoded in little-endian<a href="http://www.w3.org/Graphics/GIF/spec-gif89a.txt">GIF Specification</a>.<br/>
But sometimes the HEADER part is in big-endian, like this.</p>

<p><img src="http://zh-wang.github.io/images/2015_03_10_image01.png" title="GIF image bytes in hex" alt="Image 01" /></p>

<p>The first 6 bytes <code>47 49 46 38 39 61</code> is <code>GIF89a</code>, in big-endian. But sometimes in little-endian.(Not confirmed but I found some open source libraries read them by little-endian).<br/>
Note that, the following image size sector <code>7c02 fa00</code> (width: 636, height: 250) is little-endian.<br/>
So I should read bytes first in <code>BIG_ENDIAN</code>, then turn byte order into <code>LITTLE_ENDIAN</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Reads GIF file header information.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">readHeader</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">id</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">rawData</span><span class="o">.</span><span class="na">order</span><span class="o">(</span><span class="n">ByteOrder</span><span class="o">.</span><span class="na">BIG_ENDIAN</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">id</span> <span class="o">+=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span> <span class="n">read</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">rawData</span><span class="o">.</span><span class="na">order</span><span class="o">(</span><span class="n">ByteOrder</span><span class="o">.</span><span class="na">LITTLE_ENDIAN</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">id</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;GIF&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">status</span> <span class="o">=</span> <span class="n">STATUS_FORMAT_ERROR</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">readLSD</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">gctFlag</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">err</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">gct</span> <span class="o">=</span> <span class="n">readColorTable</span><span class="o">(</span><span class="n">gctSize</span><span class="o">);</span>
</span><span class='line'>        <span class="n">bgColor</span> <span class="o">=</span> <span class="n">gct</span><span class="o">[</span><span class="n">bgIndex</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copy Screenshots Easier]]></title>
    <link href="http://zh-wang.github.io/blog/2015/03/02/copy-screenshot-easier/"/>
    <updated>2015-03-02T18:23:47+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/03/02/copy-screenshot-easier</id>
    <content type="html"><![CDATA[<p>When I need screenshot for blog post, I always use Mac&rsquo;s default shortcuts to take them.<br/>
It&rsquo;s super easy to do so. But Mac always store them on Desktop folder. So I have to copy it from Desktop folder to Octopress&rsquo;s image folder. And the default name for the screenshot is a bit complicated to be managed.<br/>
So I write some script to make it easier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Usage&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;1. ruby tools.rb cp_ss -&gt; (Copy screenshot on Desktop to source/images and named with prefix of newest post&#39;s date)&quot;</span>
</span><span class='line'>  <span class="nb">exit</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">prefix</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;source/_posts/*.*&quot;</span><span class="p">)</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/-/</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">2</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;_&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">desktop</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;HOME&#39;</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;/Desktop/&quot;</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">entries</span><span class="p">(</span><span class="n">desktop</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">path</span><span class="p">(</span><span class="n">file</span><span class="p">)</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s2">&quot;Screen Shot&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">origin</span> <span class="o">=</span> <span class="n">desktop</span> <span class="o">+</span> <span class="no">File</span><span class="o">.</span><span class="n">path</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>    <span class="n">index</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">while</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">target</span> <span class="o">=</span> <span class="s2">&quot;source/images/%s_image%02d.png&quot;</span> <span class="o">%</span> <span class="o">[</span><span class="n">prefix</span><span class="p">,</span> <span class="n">index</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Copy %s -&gt; source/images/\%s. Yes[Y] or No[N]&quot;</span> <span class="o">%</span> <span class="o">[</span><span class="n">origin</span><span class="p">,</span> <span class="n">target</span><span class="o">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="sr">/[yY]/</span> <span class="o">=~</span> <span class="no">STDIN</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span><span class="p">)</span>
</span><span class='line'>      <span class="no">FileUtils</span><span class="o">.</span><span class="n">mv</span><span class="p">(</span><span class="n">origin</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Done.&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Skip.&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macbook-proは外付けディスプレイの配置を忘れてしまう]]></title>
    <link href="http://zh-wang.github.io/blog/2015/02/26/macbook-pro-lost-external-moniters-arrangement/"/>
    <updated>2015-02-26T10:15:45+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/02/26/macbook-pro-lost-external-moniters-arrangement</id>
    <content type="html"><![CDATA[<p>最近Macbook-proを外付けディスプレイに接続した後、もともとトップ&amp;ダウンに設定されたディスプレイの配置は必ず左&amp;右になってしまう。最初は再起動したらなんとなく直るだろうと思ったので、一旦この問題を無視した。<br/>
しかし、なかなか直らないので、グーグル先生から解決方法を聞いた。</p>

<p><a href="http://apple.stackexchange.com/questions/85472/external-monitor-resolution-setting-is-lost-after-macbook-wakes-up-from-sleep">external-monitor-resolution-setting-is-lost-after-macbook-wakes-up-from-sleep</a></p>

<p>ちょっと違う問題なんですが、一応効く。要は再起動する時に[cmd] + [opt] + [P] + [R]でNVRAMをリセットするということです。</p>

<p>NVRAMに関する紹介はこちらにあります。<br/>
<a href="http://support.apple.com/en-us/HT204063">How to Reset NVRAM on your Mac</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analysis of PROB Broken Necklace]]></title>
    <link href="http://zh-wang.github.io/blog/2015/02/25/usaco-prob-broken-necklace/"/>
    <updated>2015-02-25T17:58:16+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/02/25/usaco-prob-broken-necklace</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This is an analysis of PROB Broken Necklace, one of USA Computer Olympiad&rsquo;s training problems.<br/>
Just doing some disposal on my old stuff.</p>

<h2>Description</h2>

<p>You have a necklace of N red, white, or blue beads (3&lt;=N&lt;=350) some of which are red, others blue, and others white, arranged at random. Here are two examples for n=29:</p>

<pre><code>            1 2                               1 2
        r b b r                           b r r b
      r         b                       b         b
     r           r                     b           r
    r             r                   w             r
   b               r                 w               w
  b                 b               r                 r
  b                 b               b                 b
  b                 b               r                 b
   r               r                 b               r
    b             r                   r             r
     b           r                     r           r
       r       r                         r       b
         r b r                             r r w
        Figure A                         Figure B
                    r red bead
                    b blue bead
                    w white bead
</code></pre>

<p>The beads considered first and second in the text that follows have been marked in the picture.</p>

<p>The configuration in Figure A may be represented as a string of b&rsquo;s and r&rsquo;s, where b represents a blue bead and r represents a red one, as follows: brbrrrbbbrrrrrbrrbbrbbbbrrrrb .</p>

<p>Suppose you are to break the necklace at some point, lay it out straight, and then collect beads of the same color from one end until you reach a bead of a different color, and do the same for the other end (which might not be of the same color as the beads collected before this).</p>

<p>Determine the point where the necklace should be broken so that the most number of beads can be collected.</p>

<!--more-->


<h2>Analysis</h2>

<p>Given an input string &lsquo;wwwbbrwrbrbrrbrbrwrwwrbwrwrrb&rsquo;, we concatenate it with itself, result in &lsquo;wwwbbrwrbrbrrbrbrwrwwrbwrwrrbwwwbbrwrbrbrrbrbrwrwwrbwrwrrb&rsquo;. This trick, working on handling minus or over-length index is easier.</p>

<ol>
<li><p>Brute force solution.</p>

<p> For each index $a_i$ as a start, if $a_{i+1}$ can be picked into the longest substring, we pick it then do this again on $a_{i+1}$. Note that, if $a_i$ is w, we must treat it as b and r, one by one. We do N times of picking attempt for each $a_i$. Therefore complexity is O(N<sup>2</sup>). Just a straight forward solution.</p></li>
<li><p>DP solution.</p>

<p> We denote substring composed by successive r, which <strong>ends</strong> at index $i$ to $t_{i,r}$.</p></li>
</ol>


<script type="math/tex; mode=display">
    t_{i,r} = \begin{cases}
        t_{i-1,r} + 1 & \text{if $a_i$ is r or w} \\
        0 & \text{if $a_i$ is b or $i$ > N}
    \end{cases}
</script>


<p>Similarly, we denote substring composed by successive b, which <strong>ends</strong> at index $i$ to $t_{i,b}$.</p>

<script type="math/tex; mode=display">
    t_{i,b} = \begin{cases}
        t_{i-1,b} + 1 & \text{if $a_i$ is b or w} \\
        0 & \text{if $a_i$ is r or $i$ > N}
    \end{cases}
</script>


<p>On the other hand, we denote substring composed by successive r, which <strong>starts</strong> at index $i$ to $s_{i,r}$.</p>

<script type="math/tex; mode=display">
    s_{i,r} = \begin{cases}
        s_{i+1,r} + 1 & \text{if $a_i$ is r or w} \\
        0 & \text{if $a_{i-1}$ is b or $i = 0$}
    \end{cases}
</script>


<p>And substring composed by successive b, which <strong>starts</strong> at index $i$ to $t_{i,b}$.</p>

<script type="math/tex; mode=display">
    s_{i,b} = \begin{cases}
        s_{i+1,b} + 1 & \text{if $a_i$ is b or w} \\
        0 & \text{if $a_{i-1}$ is r or $i = 0$}
    \end{cases}
</script>


<p>For each index $a_i$, $\max \{s_{i,r}, s_{i,b} \} + \max \{t_{i,r}, t_{i,b} \}$ is the length of longest substring if we break it at index $i$. We do this for N times, the greatest one is the answer. Complexity of this algorithm is O(n).</p>

<h2>Source Code of DP Solution</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">ID: viennak1</span>
</span><span class='line'><span class="cm">PROB: beads</span>
</span><span class='line'><span class="cm">LANG: C++</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Section 1.1 PROB Broken Necklace</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;climits&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cassert&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;numeric&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utility&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iomanip&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stack&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">ENDS</span><span class="p">[</span><span class="mi">700</span><span class="p">][</span><span class="mi">2</span><span class="p">],</span><span class="n">STARTS</span><span class="p">[</span><span class="mi">700</span><span class="p">][</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="n">string</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">ofstream</span> <span class="n">fout</span> <span class="p">(</span><span class="s">&quot;beads.out&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ifstream</span> <span class="n">fin</span> <span class="p">(</span><span class="s">&quot;beads.in&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span> <span class="n">fin</span><span class="o">&gt;&gt;</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">L</span><span class="o">=</span><span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>    <span class="n">s</span><span class="o">=</span><span class="n">s</span><span class="o">+</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;r&#39;</span><span class="p">)</span> <span class="n">ENDS</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;b&#39;</span><span class="p">)</span> <span class="n">ENDS</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">ENDS</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">ENDS</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">L</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;r&#39;</span><span class="p">)</span> <span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;b&#39;</span><span class="p">)</span> <span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;w&#39;</span><span class="p">)</span> <span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;r&#39;</span><span class="p">)</span> <span class="n">STARTS</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;b&#39;</span><span class="p">)</span> <span class="n">STARTS</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">STARTS</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">STARTS</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;r&#39;</span><span class="p">)</span> <span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;b&#39;</span><span class="p">)</span> <span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;w&#39;</span><span class="p">)</span> <span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">res</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">max</span><span class="p">(</span><span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span><span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="n">max</span><span class="p">(</span><span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span><span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]));</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">res</span><span class="o">&gt;</span><span class="n">L</span><span class="p">)</span> <span class="n">fout</span><span class="o">&lt;&lt;</span><span class="n">L</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">fout</span><span class="o">&lt;&lt;</span><span class="n">res</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto 'Set Paste' on Demand]]></title>
    <link href="http://zh-wang.github.io/blog/2015/02/17/auto-set-paste-on-demand/"/>
    <updated>2015-02-17T12:47:51+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/02/17/auto-set-paste-on-demand</id>
    <content type="html"><![CDATA[<p>Insertモードで編集している間にソースコードを貼付けたい時に、毎回&#8217;set paste&#8217;と&#8217;set nopaste&#8217;をやらないといけない、ちょっと面倒くさいです。<br/>
更に、&#8217;set paste&#8217;抜きで貼付けた場合、内容の長さによりvimが一時的にフリーズしちゃいますので大変です。<br/>
コマンドマッピングを導入しても、結局自分でコマンドを入れないといけないですね。</p>

<p>なので今日は移動的に&#8217;set paste&#8217;と&#8217;set nopaste&#8217;をしてくれる便利なプラグインを紹介します。</p>

<h2>Installation</h2>

<p>リポはこちらです。<a href="https://github.com/ConradIrwin/vim-bracketed-paste">https://github.com/ConradIrwin/vim-bracketed-paste</a><br/>
バンドル管理ツール経由でインストールします。私の環境では</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Bundle 'ConradIrwin/vim-bracketed-paste'</span></code></pre></td></tr></table></div></figure>


<h2>Make a step deeper</h2>

<p>基本的なアイディアはシステムのbracketed paste挙動を探知して、コマンドマッピングを自動で実行されます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if &term =~ "xterm.*"
</span><span class='line'>    let &t_ti = &t_ti . "\e[?2004h"                " alternate screenに入る時、bracketed pasteを有効にする( ESC[?2004h] )
</span><span class='line'>    let &t_te = "\e[?2004l" . &t_te                " alternate screenから戻る時、bracketed pasteを無効にする( ESC[?2004l] )
</span><span class='line'>
</span><span class='line'>    function XTermPasteBegin(ret)                  " mode change & set paste方法
</span><span class='line'>        set pastetoggle=&lt;Esc&gt;[201~                 " bracketed pasteを終了識別子を検出する時、pasteモードをtoggle
</span><span class='line'>        set paste                                  " mode changeする前に、set paste実行
</span><span class='line'>        return a:ret                               " パラメータでどのモードに入るのをコントロールする
</span><span class='line'>    endfunction
</span><span class='line'>    map &lt;expr&gt; &lt;Esc&gt;[200~ XTermPasteBegin("i")     " normal modeでbracketed pasteの開始識別子(ESC[200~])を検出する時、insert modeになる
</span><span class='line'>    imap &lt;expr&gt; &lt;Esc&gt;[200~ XTermPasteBegin("")     " insert modeならモードがそのまま
</span><span class='line'>    cmap &lt;Esc&gt;[200~ &lt;nop&gt;                          " command modeなら以上のコードを使うとおかしくなるので、回避
</span><span class='line'>    cmap &lt;Esc&gt;[201~ &lt;nop&gt;                          " 同じく回避
</span><span class='line'>endif</span></code></pre></td></tr></table></div></figure>


<h2>Reference</h2>

<ul>
<li>What is alternate screen? <a href="http://superuser.com/questions/321204/what-does-terminal-apps-show-alternate-screen-do-os-x">http://superuser.com/questions/321204/what-does-terminal-apps-show-alternate-screen-do-os-x</a></li>
</ul>


<p>以下はプラグインのソースから抜きました。</p>

<ul>
<li><a href="http://stackoverflow.com/questions/5585129/pasting-code-into-terminal-window-into-vim-on-mac-os-x">http://stackoverflow.com/questions/5585129/pasting-code-into-terminal-window-into-vim-on-mac-os-x</a></li>
<li><a href="https://coderwall.com/p/if9mda">https://coderwall.com/p/if9mda</a></li>
<li><a href="https://github.com/aaronjensen/vimfiles/blob/59a7019b1f2d08c70c28a41ef4e2612470ea0549/plugin/terminaltweaks.vim">https://github.com/aaronjensen/vimfiles/blob/59a7019b1f2d08c70c28a41ef4e2612470ea0549/plugin/terminaltweaks.vim</a> to fix the escape time problem with insert mode.</li>
<li>Docs on bracketed paste mode. <a href="http://www.xfree86.org/current/ctlseqs.html">http://www.xfree86.org/current/ctlseqs.html</a></li>
<li>Docs on mapping fast escape codes in vim. <a href="http://vim.wikia.com/wiki/Mapping_fast_keycodes_in_terminal_Vim">http://vim.wikia.com/wiki/Mapping_fast_keycodes_in_terminal_Vim</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sample Script of AWS Ruby Api]]></title>
    <link href="http://zh-wang.github.io/blog/2015/02/16/sample-script-of-aws-ruby-api/"/>
    <updated>2015-02-16T21:26:55+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/02/16/sample-script-of-aws-ruby-api</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Some ruby script working on AWS api.<br/>
I will integrate them with Imgur&rsquo;s ruby script to build a backend of gif sharing system later :)</p>

<h2>Source Code</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;AWS&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/all&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./StringColorize.rb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">GIF_TYPE_DEFAULT</span> <span class="o">=</span> <span class="s1">&#39;GIF_TYPE_DEFAULT&#39;</span>
</span><span class='line'><span class="no">GIF_TYPE_ANIMAL</span> <span class="o">=</span> <span class="s1">&#39;GIF_TYPE_ANIMAL&#39;</span>
</span><span class='line'><span class="no">GIF_TYPE_DOG</span> <span class="o">=</span> <span class="s1">&#39;GIF_TYPE_DOG&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">IMAGE_INFO_DOMAIN_NAME</span> <span class="o">=</span> <span class="s2">&quot;IMAGE_INFO_DOMAIN_NAME&quot;</span>
</span><span class='line'><span class="no">GROUP_INFO_DOMAIN_NAME</span> <span class="o">=</span> <span class="s2">&quot;GROUP_INFO_DOMAIN_NAME&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AWSUtils</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">ACCESS_KEY_ID</span> <span class="o">=</span> <span class="s1">&#39;MY_ACCESS_KEY_ID&#39;</span>
</span><span class='line'>  <span class="no">SECRET_ACCESS_KEY</span> <span class="o">=</span> <span class="s1">&#39;MY_SECRET_ACCESS_KEY&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareSDB</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareDomainSDB</span><span class="p">(</span><span class="no">IMAGE_INFO_DOMAIN_NAME</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareDomainSDB</span><span class="p">(</span><span class="no">GROUP_INFO_DOMAIN_NAME</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">listImageInfos</span>
</span><span class='line'>    <span class="n">imageDomain</span> <span class="o">=</span> <span class="n">getDomain</span><span class="p">(</span><span class="no">IMAGE_INFO_DOMAIN_NAME</span><span class="p">)</span>
</span><span class='line'>    <span class="n">list_item_by_domain_name</span><span class="p">(</span><span class="n">imageDomain</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>      <span class="n">list_attributes_by_item</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">listGroupInfos</span>
</span><span class='line'>    <span class="n">groupDomain</span> <span class="o">=</span> <span class="n">getDomain</span><span class="p">(</span><span class="no">GROUP_INFO_DOMAIN_NAME</span><span class="p">)</span>
</span><span class='line'>    <span class="n">list_item_by_domain_name</span><span class="p">(</span><span class="n">groupDomain</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>      <span class="n">list_attributes_by_item</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">regions</span><span class="p">()</span>
</span><span class='line'>    <span class="no">AWS</span><span class="o">::</span><span class="n">regions</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">region</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">region</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prepareSDB</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@sdb</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;===&gt; prepare sdb&quot;</span>
</span><span class='line'>      <span class="vi">@sdb</span> <span class="o">=</span> <span class="no">AWS</span><span class="o">::</span><span class="no">SimpleDB</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>        <span class="ss">:access_key_id</span> <span class="o">=&gt;</span> <span class="no">ACCESS_KEY_ID</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:secret_access_key</span> <span class="o">=&gt;</span> <span class="no">SECRET_ACCESS_KEY</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:region</span> <span class="o">=&gt;</span> <span class="s1">&#39;ap-northeast-1&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prepareDomainSDB</span><span class="p">(</span><span class="n">domain_name</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareSDB</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;===&gt; initialize domain &quot;</span> <span class="o">+</span> <span class="n">domain_name</span>
</span><span class='line'>    <span class="vi">@sdb</span><span class="o">.</span><span class="n">domains</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">domain_name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">getDomain</span><span class="p">(</span><span class="n">domain_name</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareSDB</span>
</span><span class='line'>    <span class="vi">@sdb</span><span class="o">.</span><span class="n">domains</span><span class="o">[</span><span class="n">domain_name</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ==== Deletion ====</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deleteEmptyDomain</span><span class="p">(</span><span class="n">domain</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareSDB</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">domain</span><span class="o">.</span><span class="n">name</span> <span class="o">+</span> <span class="s2">&quot; is deleted because empty&quot;</span>
</span><span class='line'>      <span class="n">domain</span><span class="o">.</span><span class="n">delete</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">domain</span><span class="o">.</span><span class="n">name</span> <span class="o">+</span> <span class="s2">&quot; delete error -&gt; &quot;</span> <span class="o">+</span> <span class="n">ex</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ==== List ====</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">listDomainSDB</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareSDB</span>
</span><span class='line'>    <span class="vi">@sdb</span><span class="o">.</span><span class="n">domains</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">domain</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;===&gt; listing domain: &quot;</span> <span class="o">+</span> <span class="n">domain</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>        <span class="k">unless</span> <span class="n">block</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>          <span class="k">yield</span> <span class="n">domain</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">list_item_by_domain_name</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareSDB</span>
</span><span class='line'>    <span class="c1">#domain = @sdb.domains.create(domain_name)</span>
</span><span class='line'><span class="c1">#    puts domain.items.collect(&amp;:name) # list name</span>
</span><span class='line'>    <span class="n">domain</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;===&gt; listing item: &quot;</span> <span class="o">+</span> <span class="n">item</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>      <span class="k">unless</span> <span class="n">block</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">item</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">list_attributes_by_item</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;===&gt; listing attributes: &quot;</span> <span class="o">+</span> <span class="n">item</span><span class="o">.</span><span class="n">attributes</span><span class="o">.</span><span class="n">to_h</span><span class="p">()</span><span class="o">.</span><span class="n">to_s</span><span class="p">()</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ==== Insert ====</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># item key -&gt; image&#39;s md5</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># followed by a hash contains</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># upload_time -&gt; ISO 8601 formatted time stamp</span>
</span><span class='line'>  <span class="c1"># title -&gt; [title_en, title_ja, ...]</span>
</span><span class='line'>  <span class="c1"># type -&gt; type string (Dog, Cat etc.)</span>
</span><span class='line'>  <span class="c1"># group -&gt; [group id 1, group id 2, ...], may be nil</span>
</span><span class='line'>  <span class="c1"># link -&gt; an Imgur link</span>
</span><span class='line'>  <span class="c1"># json -&gt; response of uploaded image</span>
</span><span class='line'>  <span class="c1"># comment -&gt; [], may be nil</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">insert_image_info_item</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="n">md5</span><span class="p">,</span> <span class="n">link</span><span class="p">,</span> <span class="n">json</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareSDB</span>
</span><span class='line'>    <span class="n">image_domain</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">getDomain</span><span class="p">(</span><span class="no">IMAGE_INFO_DOMAIN_NAME</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:upload_time</span> <span class="o">=&gt;</span> <span class="n">time2ISO8601</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">title</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">type</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="o">[]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:link</span> <span class="o">=&gt;</span> <span class="n">link</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="n">json</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:comment</span> <span class="o">=&gt;</span> <span class="o">[]</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;===&gt; inserting: </span><span class="si">#{</span><span class="n">md5</span><span class="si">}</span><span class="s2"> , </span><span class="si">#{</span><span class="nb">hash</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">image_domain</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">md5</span><span class="p">,</span> <span class="nb">hash</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;===&gt; ok&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># item key -&gt; group id, this is auto-generated</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># followed by a hash contains</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># upload_time -&gt; ISO 8601 formatted time stamp</span>
</span><span class='line'>  <span class="c1"># title -&gt; [title_en, title_ja, ...]</span>
</span><span class='line'>  <span class="c1"># images_md5 -&gt; [md5_1, md5_2, ...]</span>
</span><span class='line'>  <span class="c1"># type -&gt; type string (Dog, Cat etc.)</span>
</span><span class='line'>  <span class="c1"># comment -&gt; [], may be nil</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">insert_group_info_item</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">images_md5</span><span class="p">,</span> <span class="n">type</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareSDB</span>
</span><span class='line'>    <span class="n">group_domian</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">getDomain</span><span class="p">(</span><span class="no">GROUP_INFO_DOMAIN_NAME</span><span class="p">)</span>
</span><span class='line'>    <span class="n">uniq_id</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="p">(</span><span class="mi">65</span> <span class="o">+</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">26</span><span class="p">))</span><span class="o">.</span><span class="n">chr</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'>    <span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:upload_time</span> <span class="o">=&gt;</span> <span class="n">time2ISO8601</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">title</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:images_md5</span> <span class="o">=&gt;</span> <span class="n">images_md5</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="n">type</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:comment</span> <span class="o">=&gt;</span> <span class="o">[]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;===&gt; inserting: </span><span class="si">#{</span><span class="n">uniq_id</span><span class="si">}</span><span class="s2"> , </span><span class="si">#{</span><span class="nb">hash</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">group_domian</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">uniq_id</span><span class="p">,</span> <span class="nb">hash</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">duplicated</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="o">!</span><span class="n">domain</span><span class="o">.</span><span class="n">items</span><span class="o">[</span><span class="n">key</span><span class="o">].</span><span class="n">attributes</span><span class="o">.</span><span class="n">to_h</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">duplicated_in_domain_name</span><span class="p">(</span><span class="n">domain_name</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="n">duplicated</span><span class="p">(</span><span class="n">getDomain</span><span class="p">(</span><span class="n">domain_name</span><span class="p">),</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">time2ISO8601</span>
</span><span class='line'>    <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">in_time_zone</span><span class="p">(</span><span class="s1">&#39;Asia/Tokyo&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">iso8601</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upload Pics by Imgur Api in Ruby]]></title>
    <link href="http://zh-wang.github.io/blog/2015/02/06/upload-pics-to-imgur-by-ruby/"/>
    <updated>2015-02-06T12:43:58+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/02/06/upload-pics-to-imgur-by-ruby</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Sample ruby script. Use Imgur&rsquo;s api to upload image, with OAuth2 authorization.</p>

<h2>Source Code</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;httpclient&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ImgurUploader</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">AUTH_URL</span> <span class="o">=</span> <span class="s1">&#39;https://api.imgur.com/oauth2/authorize&#39;</span>
</span><span class='line'>  <span class="no">EXC_TOKEN_URL</span> <span class="o">=</span> <span class="s1">&#39;https://api.imgur.com/oauth2/token&#39;</span>
</span><span class='line'>  <span class="no">UPLOAD_URL</span> <span class="o">=</span> <span class="s1">&#39;https://api.imgur.com/3/image&#39;</span>
</span><span class='line'>  <span class="no">CLIENT_ID</span> <span class="o">=</span> <span class="s1">&#39;YOUR_CLIENT_ID&#39;</span>
</span><span class='line'>  <span class="no">CLIENT_SE</span> <span class="o">=</span> <span class="s1">&#39;YOUR_CLIENT_SECRET_KEY&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@file_path</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="vi">@access_token</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@file_path</span> <span class="o">=</span> <span class="n">file_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setAccessToken</span><span class="p">(</span><span class="n">access_token</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@access_token</span> <span class="o">=</span> <span class="n">access_token</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">applyAccessToken</span>
</span><span class='line'>    <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:client_id</span> <span class="o">=&gt;</span> <span class="no">CLIENT_ID</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:response_type</span> <span class="o">=&gt;</span> <span class="s2">&quot;pin&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:state</span> <span class="o">=&gt;</span> <span class="s1">&#39;init&#39;</span>
</span><span class='line'>    <span class="p">}</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">=</span><span class="si">#{</span><span class="n">v</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">reduce</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">&amp;</span><span class="si">#{</span><span class="n">v</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">system</span><span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">,</span> <span class="no">AUTH_URL</span> <span class="o">+</span> <span class="s2">&quot;?&quot;</span> <span class="o">+</span> <span class="n">params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;input PIN here: &quot;</span>
</span><span class='line'>    <span class="n">mypin</span> <span class="o">=</span> <span class="no">STDIN</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">body</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:client_id</span> <span class="o">=&gt;</span> <span class="no">CLIENT_ID</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:client_secret</span> <span class="o">=&gt;</span> <span class="no">CLIENT_SE</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:grant_type</span> <span class="o">=&gt;</span> <span class="s2">&quot;pin&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:pin</span> <span class="o">=&gt;</span> <span class="n">mypin</span>
</span><span class='line'>    <span class="p">}</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">=</span><span class="si">#{</span><span class="n">v</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">reduce</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">&amp;</span><span class="si">#{</span><span class="n">v</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="no">HTTPClient</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@res</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="no">EXC_TOKEN_URL</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="vi">@res</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="vi">@res</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@access_token</span> <span class="o">=</span> <span class="n">result</span><span class="o">[</span><span class="s1">&#39;access_token&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;access_token: &quot;</span> <span class="o">+</span> <span class="vi">@access_token</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;access_token.tmp&quot;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="c1"># store access_token to local file,</span>
</span><span class='line'>      <span class="c1"># no need to authorize again if access_token is not expired</span>
</span><span class='line'>      <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="vi">@access_token</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">upload</span>
</span><span class='line'>    <span class="n">auth_header</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;Authorization&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Bearer &#39;</span> <span class="o">+</span> <span class="vi">@access_token</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="no">HTTPClient</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="vi">@file_path</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>      <span class="n">body</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;image&#39;</span> <span class="o">=&gt;</span> <span class="n">file</span> <span class="p">}</span>
</span><span class='line'>      <span class="vi">@res</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="no">UPLOAD_URL</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">auth_header</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="vi">@res</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="vi">@res</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'>      <span class="n">result</span><span class="o">[</span><span class="s1">&#39;status&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">ex</span><span class="o">.</span><span class="n">message</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;upload failed on Authorization&quot;</span>
</span><span class='line'>      <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;usage&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;ruby imgur.rb [image file path]&quot;</span>
</span><span class='line'>  <span class="nb">exit</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">uploader</span> <span class="o">=</span> <span class="no">ImgurUploader</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">chomp</span><span class="o">.</span><span class="n">strip</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;access_token.tmp&quot;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="c1"># read local access_token</span>
</span><span class='line'>    <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">uploader</span><span class="o">.</span><span class="n">setAccessToken</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">gets</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">uploader</span><span class="o">.</span><span class="n">upload</span> <span class="o">==</span> <span class="mi">200</span> <span class="c1"># if uploaded</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Upload ok&quot;</span>
</span><span class='line'>  <span class="k">else</span> <span class="c1"># if upload failed by expired token</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Upload failed, try to update access_token&quot;</span>
</span><span class='line'>    <span class="n">uploader</span><span class="o">.</span><span class="n">applyAccessToken</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">uploader</span><span class="o">.</span><span class="n">upload</span> <span class="o">==</span> <span class="mi">200</span> <span class="c1"># upload again</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Upload ok&quot;</span>
</span><span class='line'>    <span class="k">else</span> <span class="c1"># still fails</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Upload failed, need detail check&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">ex</span> <span class="c1"># local file not exists, apply for access_token and upload</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">ex</span><span class="o">.</span><span class="n">message</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;No access_token is stored. Do Authorization again.&quot;</span>
</span><span class='line'>  <span class="n">uploader</span><span class="o">.</span><span class="n">applyAccessToken</span>
</span><span class='line'>  <span class="n">uploader</span><span class="o">.</span><span class="n">upload</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upload Pics by Imgur Api on Android]]></title>
    <link href="http://zh-wang.github.io/blog/2015/01/28/upload-image-with-imgur-api-on-android/"/>
    <updated>2015-01-28T16:29:13+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/01/28/upload-image-with-imgur-api-on-android</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This an example android application which use Imgur&rsquo;s api to upload image, with OAuth2 authorization.</p>

<h2>Steps</h2>

<ol>
<li>You need an account on Imgur. Then create an app from &ldquo;Settings -> Applications&rdquo;. The redirect link should set to <code>YOUR_APP_IDENTIFIER://callback</code> or something else you like, but must match <code>scheme</code> in step 5.</li>
<li>Get your app&rsquo;s client id.</li>
<li>Replace it with <code>CLIENT_ID</code> in the source code.</li>
<li>Create an sample android project with an activity with the source code below.</li>
<li><p>Add following lines to <code>AndroidManifest.xml</code>, under Activity <code>OAuthTestActivity</code>. This allows transition from authorization page to your android app.</p>

<pre><code> &lt;intent-filter&gt;
     &lt;action android:name="android.intent.action.VIEW" /&gt;
     &lt;category android:name="android.intent.category.DEFAULT" /&gt;
     &lt;category android:name="android.intent.category.BROWSABLE" /&gt;
     &lt;data android:scheme="YOUR_APP_IDENTIFIER" android:host="callback" /&gt;
 &lt;/intent-filter&gt;
</code></pre></li>
<li><p>Build and Run.</p></li>
<li>Authorize with your imgur&rsquo;s account with your web browser.
<img src="http://zh-wang.github.io/images/2015_01_28_image04.png" title="Authorize with your imgur's account" alt="Image A" /></li>
<li>Choose an image to upload.
<img src="http://zh-wang.github.io/images/2015_01_28_image01.png" title="Choose an image" alt="Image B" /></li>
<li>Upload.
<img src="http://zh-wang.github.io/images/2015_01_28_image02.png" title="Upload" alt="Image C" /></li>
<li>Check the uploaded image in your web browser.
<img src="http://zh-wang.github.io/images/2015_01_28_image03.png" title="Open browser" alt="Image D" /></li>
</ol>


<h2>Source Code</h2>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OAuthTestActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">REQUEST_CODE_PICK_IMAGE</span> <span class="o">=</span> <span class="mi">1001</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">AUTHORIZATION_URL</span> <span class="o">=</span> <span class="s">&quot;https://api.imgur.com/oauth2/authorize&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">CLIENT_ID</span> <span class="o">=</span> <span class="s">&quot;CLIENT_ID&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">LinearLayout</span> <span class="n">rootView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">accessToken</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">refreshToken</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">picturePath</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Button</span> <span class="n">send</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">uploadedImageUrl</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">rootView</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">LinearLayout</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="n">rootView</span><span class="o">.</span><span class="na">setOrientation</span><span class="o">(</span><span class="n">LinearLayout</span><span class="o">.</span><span class="na">VERTICAL</span><span class="o">);</span>
</span><span class='line'>        <span class="n">TextView</span> <span class="n">tv</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TextView</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="n">LinearLayout</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">llp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinearLayout</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">(</span>
</span><span class='line'>                <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">,</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">);</span>
</span><span class='line'>        <span class="n">tv</span><span class="o">.</span><span class="na">setLayoutParams</span><span class="o">(</span><span class="n">llp</span><span class="o">);</span>
</span><span class='line'>        <span class="n">rootView</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">tv</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">rootView</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">action</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">().</span><span class="na">getAction</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">action</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">action</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_VIEW</span><span class="o">))</span> <span class="o">{</span> <span class="c1">// We need access token to use Imgur&#39;s api</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">tv</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Start OAuth Authorization&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Uri</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">AUTHORIZATION_URL</span><span class="o">).</span><span class="na">buildUpon</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">appendQueryParameter</span><span class="o">(</span><span class="s">&quot;client_id&quot;</span><span class="o">,</span> <span class="n">CLIENT_ID</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">appendQueryParameter</span><span class="o">(</span><span class="s">&quot;response_type&quot;</span><span class="o">,</span> <span class="s">&quot;token&quot;</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">appendQueryParameter</span><span class="o">(</span><span class="s">&quot;state&quot;</span><span class="o">,</span> <span class="s">&quot;init&quot;</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">();</span>
</span><span class='line'>            <span class="n">intent</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">uri</span><span class="o">);</span>
</span><span class='line'>            <span class="n">intent</span><span class="o">.</span><span class="na">setFlags</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">FLAG_ACTIVITY_NEW_TASK</span><span class="o">);</span>
</span><span class='line'>            <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>            <span class="n">finish</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="c1">// Now we have the token, can do the upload</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">tv</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Got Access Token&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Uri</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">().</span><span class="na">getData</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;Got imgur&#39;s access token&quot;</span><span class="o">,</span> <span class="n">uri</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">uriString</span> <span class="o">=</span> <span class="n">uri</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">paramsString</span> <span class="o">=</span> <span class="s">&quot;http://callback?&quot;</span> <span class="o">+</span> <span class="n">uriString</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">uriString</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;#&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;tag&quot;</span><span class="o">,</span> <span class="n">paramsString</span><span class="o">);</span>
</span><span class='line'>            <span class="n">List</span><span class="o">&lt;</span><span class="n">NameValuePair</span><span class="o">&gt;</span> <span class="n">params</span> <span class="o">=</span> <span class="n">URLEncodedUtils</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">paramsString</span><span class="o">),</span> <span class="s">&quot;utf-8&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;tag&quot;</span><span class="o">,</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">NameValuePair</span><span class="o">[</span><span class="mi">0</span><span class="o">])));</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="n">NameValuePair</span> <span class="n">pair</span> <span class="o">:</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">pair</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;access_token&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">accessToken</span> <span class="o">=</span> <span class="n">pair</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">pair</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;refresh_token&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">refreshToken</span> <span class="o">=</span> <span class="n">pair</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;tag&quot;</span><span class="o">,</span> <span class="s">&quot;access_token = &quot;</span> <span class="o">+</span> <span class="n">accessToken</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;tag&quot;</span><span class="o">,</span> <span class="s">&quot;refresh_token = &quot;</span> <span class="o">+</span> <span class="n">refreshToken</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Button</span> <span class="n">chooseImage</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Button</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>            <span class="n">rootView</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">chooseImage</span><span class="o">);</span>
</span><span class='line'>            <span class="n">chooseImage</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Choose an image&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">chooseImage</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_PICK</span><span class="o">,</span> <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">Media</span><span class="o">.</span><span class="na">EXTERNAL_CONTENT_URI</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">startActivityForResult</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span> <span class="n">REQUEST_CODE_PICK_IMAGE</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">send</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Button</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>            <span class="n">rootView</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">send</span><span class="o">);</span>
</span><span class='line'>            <span class="n">send</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;send to imgur&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">send</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">picturePath</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">picturePath</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                            <span class="n">accessToken</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">accessToken</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="o">(</span><span class="k">new</span> <span class="nf">UploadToImgurTask</span><span class="o">()).</span><span class="na">execute</span><span class="o">(</span><span class="n">picturePath</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onResume</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">send</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">picturePath</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">picturePath</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">send</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">GONE</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">send</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onActivityResult</span><span class="o">(</span><span class="kt">int</span> <span class="n">requestCode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">resultCode</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;tag&quot;</span><span class="o">,</span> <span class="s">&quot;request code : &quot;</span> <span class="o">+</span> <span class="n">requestCode</span> <span class="o">+</span> <span class="s">&quot;, result code : &quot;</span> <span class="o">+</span> <span class="n">resultCode</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">data</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;tag&quot;</span> <span class="o">,</span> <span class="s">&quot;data is null&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">resultCode</span> <span class="o">==</span> <span class="n">Activity</span><span class="o">.</span><span class="na">RESULT_OK</span> <span class="o">&amp;&amp;</span> <span class="n">requestCode</span> <span class="o">==</span> <span class="n">REQUEST_CODE_PICK_IMAGE</span> <span class="o">&amp;&amp;</span> <span class="kc">null</span> <span class="o">!=</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Uri</span> <span class="n">selectedImage</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span>
</span><span class='line'>            <span class="n">String</span><span class="o">[]</span> <span class="n">filePathColumn</span> <span class="o">=</span> <span class="o">{</span> <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">Media</span><span class="o">.</span><span class="na">DATA</span> <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Cursor</span> <span class="n">cursor</span> <span class="o">=</span> <span class="n">getContentResolver</span><span class="o">().</span><span class="na">query</span><span class="o">(</span><span class="n">selectedImage</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">filePathColumn</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>            <span class="n">cursor</span><span class="o">.</span><span class="na">moveToFirst</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">int</span> <span class="n">columnIndex</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="n">filePathColumn</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>            <span class="n">picturePath</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">columnIndex</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;tag&quot;</span><span class="o">,</span> <span class="s">&quot;image path : &quot;</span> <span class="o">+</span> <span class="n">picturePath</span><span class="o">);</span>
</span><span class='line'>            <span class="n">cursor</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onActivityResult</span><span class="o">(</span><span class="n">requestCode</span><span class="o">,</span> <span class="n">resultCode</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Here is the upload task</span>
</span><span class='line'>    <span class="kd">class</span> <span class="nc">UploadToImgurTask</span> <span class="kd">extends</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Void</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="n">Boolean</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">String</span> <span class="n">upload_to</span> <span class="o">=</span> <span class="s">&quot;https://api.imgur.com/3/upload&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">HttpClient</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DefaultHttpClient</span><span class="o">();</span>
</span><span class='line'>            <span class="n">HttpContext</span> <span class="n">localContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BasicHttpContext</span><span class="o">();</span>
</span><span class='line'>            <span class="n">HttpPost</span> <span class="n">httpPost</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpPost</span><span class="o">(</span><span class="n">upload_to</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">HttpEntity</span> <span class="n">entity</span> <span class="o">=</span> <span class="n">MultipartEntityBuilder</span><span class="o">.</span><span class="na">create</span><span class="o">()</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">addPart</span><span class="o">(</span><span class="s">&quot;image&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">FileBody</span><span class="o">(</span><span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">params</span><span class="o">[</span><span class="mi">0</span><span class="o">])))</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">httpPost</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">&quot;Authorization&quot;</span><span class="o">,</span> <span class="s">&quot;Bearer &quot;</span> <span class="o">+</span> <span class="n">accessToken</span><span class="o">);</span>
</span><span class='line'>                <span class="n">httpPost</span><span class="o">.</span><span class="na">setEntity</span><span class="o">(</span><span class="n">entity</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">final</span> <span class="n">HttpResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">httpPost</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">localContext</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">final</span> <span class="n">String</span> <span class="n">response_string</span> <span class="o">=</span> <span class="n">EntityUtils</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">response</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">getEntity</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">final</span> <span class="n">JSONObject</span> <span class="n">json</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">JSONObject</span><span class="o">(</span><span class="n">response_string</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;tag&quot;</span><span class="o">,</span> <span class="n">json</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">JSONObject</span> <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="na">optJSONObject</span><span class="o">(</span><span class="s">&quot;data&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">uploadedImageUrl</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">optString</span><span class="o">(</span><span class="s">&quot;link&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;tag&quot;</span><span class="o">,</span> <span class="s">&quot;uploaded image url : &quot;</span> <span class="o">+</span> <span class="n">uploadedImageUrl</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPostExecute</span><span class="o">(</span><span class="n">Boolean</span> <span class="n">aBoolean</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">onPostExecute</span><span class="o">(</span><span class="n">aBoolean</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">aBoolean</span><span class="o">.</span><span class="na">booleanValue</span><span class="o">())</span> <span class="o">{</span> <span class="c1">// after sucessful uploading, show the image in web browser</span>
</span><span class='line'>                <span class="n">Button</span> <span class="n">openBrowser</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Button</span><span class="o">(</span><span class="n">OAuthTestActivity</span><span class="o">.</span><span class="na">this</span><span class="o">);</span>
</span><span class='line'>                <span class="n">rootView</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">openBrowser</span><span class="o">);</span>
</span><span class='line'>                <span class="n">openBrowser</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Open Browser&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">openBrowser</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">();</span>
</span><span class='line'>                        <span class="n">intent</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">uploadedImageUrl</span><span class="o">));</span>
</span><span class='line'>                        <span class="n">intent</span><span class="o">.</span><span class="na">setFlags</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">FLAG_ACTIVITY_NEW_TASK</span><span class="o">);</span>
</span><span class='line'>                        <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">});</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Swift Part 13 - ARC]]></title>
    <link href="http://zh-wang.github.io/blog/2015/01/08/learning-swift-part-13/"/>
    <updated>2015-01-08T10:13:30+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/01/08/learning-swift-part-13</id>
    <content type="html"><![CDATA[<h2>===== Full Notes =====</h2>

<h3>Automatic Reference Counting</h3>

<ul>
<li><p>Swift uses Automatic Reference Counting (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you do not need to think about memory management yourself.</p></li>
<li><p>Reference counting only applies to instances of classes. Structures and enumerations are value types, not reference types, and are not stored and passed by reference.</p></li>
<li><p>How ARC Works</p>

<p>  To make this possible, whenever you assign a class instance to a property, constant, or variable, that property, constant, or variable makes a strong reference to the instance. The reference is called a “strong“ reference because it keeps a firm hold on that instance, and does not allow it to be deallocated for as long as that strong reference remains.</p></li>
<li><p>ARC in Action</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>    <span class="k">class</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>        <span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(name) is being initialized&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">deinit</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(name) is being deinitialized&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The next code snippet defines three variables of type Person?, which are used to set up multiple references to a new Person instance in subsequent code snippets. Because these variables are of an optional type (Person?, not Person), they are automatically initialized with a value of nil, and do not currently reference a Person instance.</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">reference1</span><span class="p">:</span> <span class="n">Person</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">reference2</span><span class="p">:</span> <span class="n">Person</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">reference3</span><span class="p">:</span> <span class="n">Person</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">reference2</span> <span class="o">=</span> <span class="n">reference1</span>
</span><span class='line'>    <span class="n">reference3</span> <span class="o">=</span> <span class="n">reference1</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">reference1</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="n">reference2</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">reference3</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="c1">// prints &quot;John Appleseed is being deinitialized&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<ul>
<li><p>Strong Reference Cycles Between Class Instances</p>

<p>  It is possible to write code in which an instance of a class never gets to a point where it has zero strong references. This can happen if two class instances hold a strong reference to each other, such that each instance keeps the other alive. This is known as a strong reference cycle.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>    <span class="k">class</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>        <span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span> <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">var</span> <span class="nl">apartment</span><span class="p">:</span> <span class="n">Apartment</span><span class="o">?</span>
</span><span class='line'>        <span class="k">deinit</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(name) is being deinitialized&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="n">Apartment</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">number</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>        <span class="k">init</span><span class="p">(</span><span class="nl">number</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span> <span class="nb">self</span><span class="p">.</span><span class="n">number</span> <span class="o">=</span> <span class="n">number</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">var</span> <span class="nl">tenant</span><span class="p">:</span> <span class="n">Person</span><span class="o">?</span>
</span><span class='line'>        <span class="k">deinit</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Apartment #\(number) is being deinitialized&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">john</span><span class="p">:</span> <span class="n">Person</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">number73</span><span class="p">:</span> <span class="n">Apartment</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">john</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;John Appleseed&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">number73</span> <span class="o">=</span> <span class="n">Apartment</span><span class="p">(</span><span class="nl">number</span><span class="p">:</span> <span class="mi">73</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">john</span><span class="o">!</span><span class="p">.</span><span class="n">apartment</span> <span class="o">=</span> <span class="n">number73</span>
</span><span class='line'>    <span class="n">number73</span><span class="o">!</span><span class="p">.</span><span class="n">tenant</span> <span class="o">=</span> <span class="n">john</span>
</span><span class='line'>    <span class="c1">// The strong references between the Person instance and the Apartment instance remain and cannot be broken.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Resolving Strong Reference Cycles Between Class Instances</p>

<p>  Swift provides two ways to resolve strong reference cycles when you work with properties of class type: weak references and unowned references. Use a weak reference whenever it is valid for that reference to become nil at some point during its lifetime. Conversely, use an unowned reference when you know that the reference will never be nil once it has been set during initialization.</p></li>
<li><p>Weak References</p>

<p>  Weak references must be declared as variables, to indicate that their value can change at runtime. A weak reference cannot be declared as a constant.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>    <span class="k">class</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>        <span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span> <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">var</span> <span class="nl">apartment</span><span class="p">:</span> <span class="n">Apartment</span><span class="o">?</span>
</span><span class='line'>        <span class="k">deinit</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(name) is being deinitialized&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="n">Apartment</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">number</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>        <span class="k">init</span><span class="p">(</span><span class="nl">number</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span> <span class="nb">self</span><span class="p">.</span><span class="n">number</span> <span class="o">=</span> <span class="n">number</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">weak</span> <span class="k">var</span> <span class="nl">tenant</span><span class="p">:</span> <span class="n">Person</span><span class="o">?</span>
</span><span class='line'>        <span class="k">deinit</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Apartment #\(number) is being deinitialized&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">john</span><span class="p">:</span> <span class="n">Person</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">number73</span><span class="p">:</span> <span class="n">Apartment</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">john</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;John Appleseed&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">number73</span> <span class="o">=</span> <span class="n">Apartment</span><span class="p">(</span><span class="nl">number</span><span class="p">:</span> <span class="mi">73</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">john</span><span class="o">!</span><span class="p">.</span><span class="n">apartment</span> <span class="o">=</span> <span class="n">number73</span>
</span><span class='line'>    <span class="n">number73</span><span class="o">!</span><span class="p">.</span><span class="n">tenant</span> <span class="o">=</span> <span class="n">john</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">john</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="c1">// prints &quot;John Appleseed is being deinitialized&quot;</span>
</span><span class='line'>    <span class="c1">// The Person instance still has a strong reference to the Apartment instance, but the Apartment instance now has a weak reference to the Person instance. This means that when you break the strong reference held by the john variables, there are no more strong references to the Person instance.</span>
</span><span class='line'>    <span class="c1">// Because there are no more strong references to the Person instance, it is deallocated.</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">number73</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="c1">// prints &quot;Apartment #73 is being deinitialized&quot;</span>
</span><span class='line'>    <span class="c1">// The only remaining strong reference to the Apartment instance is from the number73 variable. If you break that strong reference, there are no more strong references to the Apartment instance.</span>
</span><span class='line'>    <span class="c1">// Because there are no more strong references to the Apartment instance, it too is deallocated.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Unowned References</p>

<p>  Like weak references, an unowned reference does not keep a strong hold on the instance it refers to. Unlike a weak reference, however, an unowned reference is assumed to always have a value. Because of this, an unowned reference is always defined as a non-optional type. You indicate an unowned reference by placing the unowned keyword before a property or variable declaration.</p>

<p>  Because an unowned reference is non-optional, you don’t need to unwrap the unowned reference each time it is used. An unowned reference can always be accessed directly. However, ARC cannot set the reference to nil when the instance it refers to is deallocated, because variables of a non-optional type cannot be set to nil.</p>

<p>  If you try to access an unowned reference after the instance that it references is deallocated, you will trigger a runtime error. Use unowned references only when you are sure that the reference will always refer to an instance.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>    <span class="k">class</span> <span class="n">Customer</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>        <span class="k">var</span> <span class="nl">card</span><span class="p">:</span> <span class="n">CreditCard</span><span class="o">?</span>
</span><span class='line'>        <span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">deinit</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(name) is being deinitialized&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="n">CreditCard</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">number</span><span class="p">:</span> <span class="n">UInt64</span>
</span><span class='line'>        <span class="kr">unowned</span> <span class="k">let</span> <span class="nl">customer</span><span class="p">:</span> <span class="n">Customer</span>
</span><span class='line'>        <span class="k">init</span><span class="p">(</span><span class="nl">number</span><span class="p">:</span> <span class="n">UInt64</span><span class="p">,</span> <span class="nl">customer</span><span class="p">:</span> <span class="n">Customer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">number</span> <span class="o">=</span> <span class="n">number</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">customer</span> <span class="o">=</span> <span class="n">customer</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">deinit</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Card #\(number) is being deinitialized&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">john</span><span class="p">:</span> <span class="n">Customer</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">john</span> <span class="o">=</span> <span class="n">Customer</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;John Appleseed&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">john</span><span class="o">!</span><span class="p">.</span><span class="n">card</span> <span class="o">=</span> <span class="n">CreditCard</span><span class="p">(</span><span class="nl">number</span><span class="p">:</span> <span class="mi">1234</span><span class="n">_5678_9012_3456</span><span class="p">,</span> <span class="nl">customer</span><span class="p">:</span> <span class="n">john</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">john</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="c1">// prints &quot;John Appleseed is being deinitialized&quot;</span>
</span><span class='line'>    <span class="c1">// prints &quot;Card #1234567890123456 is being deinitialized&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Unowned References and Implicitly Unwrapped Optional Properties</p>

<p>  The <em>Person</em> and <em>Apartment</em> example shows a situation where two properties, both of which are allowed to be nil, have the potential to cause a strong reference cycle. This scenario is best resolved with a weak reference.</p>

<p>  The <em>Customer</em> and <em>CreditCard</em> example shows a situation where one property that is allowed to be nil and another property that cannot be nil have the potential to cause a strong reference cycle. This scenario is best resolved with an unowned reference.</p>

<p>  However, there is a third scenario, in which both properties should always have a value, and neither property should ever be nil once initialization is complete. In this scenario, it is useful to combine an unowned property on one class with an implicitly unwrapped optional property on the other class.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>    <span class="k">class</span> <span class="n">Country</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">capitalCity</span><span class="p">:</span> <span class="n">City</span><span class="o">!</span>
</span><span class='line'>        <span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">capitalName</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">capitalCity</span> <span class="o">=</span> <span class="n">City</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">capitalName</span><span class="p">,</span> <span class="nl">country</span><span class="p">:</span> <span class="nb">self</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="n">City</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>        <span class="kr">unowned</span> <span class="k">let</span> <span class="nl">country</span><span class="p">:</span> <span class="n">Country</span>
</span><span class='line'>        <span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">country</span><span class="p">:</span> <span class="n">Country</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">country</span> <span class="o">=</span> <span class="n">country</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="n">country</span> <span class="o">=</span> <span class="n">Country</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;Canada&quot;</span><span class="p">,</span> <span class="nl">capitalName</span><span class="p">:</span> <span class="s">&quot;Ottawa&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(country.name)&#39;s capital city is called \(country.capitalCity.name)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// prints &quot;Canada&#39;s capital city is called Ottawa&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Strong Reference Cycles for Closures</p>

<p>  A strong reference cycle can also occur if you assign a closure to a property of a class instance, and the body of that closure captures the instance. This capture might occur because the closure’s body accesses a property of the instance, such as self.someProperty, or because the closure calls a method on the instance, such as self.someMethod(). In either case, these accesses cause the closure to “capture” self, creating a strong reference cycle.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>    <span class="c1">// The example below shows how you can create a strong reference cycle when using a closure that references self. This example defines a class called HTMLElement, which provides a simple model for an individual element within an HTML document:</span>
</span><span class='line'>    <span class="k">class</span> <span class="n">HTMLElement</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">text</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// The asHTML property is declared as a lazy property, because it is only needed if and when the element actually needs to be rendered as a string value for some HTML output target. The fact that asHTML is a lazy property means that you can refer to self within the default closure, because the lazy property will not be accessed until after initialization has been completed and self is known to exist.</span>
</span><span class='line'>        <span class="n">lazy</span> <span class="k">var</span> <span class="nl">asHTML</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="k">let</span> <span class="n">text</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">text</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="s">&quot;&lt;\(self.name)&gt;\(text)&lt;/\(self.name)&gt;&quot;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="s">&quot;&lt;\(self.name) /&gt;&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">text</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">deinit</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(name) is being deinitialized&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The paragraph variable above is defined as an optional HTMLElement, so that it can be set to nil below to demonstrate the presence of a strong reference cycle.</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">paragraph</span><span class="p">:</span> <span class="n">HTMLElement</span><span class="o">?</span> <span class="o">=</span> <span class="n">HTMLElement</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;p&quot;</span><span class="p">,</span> <span class="nl">text</span><span class="p">:</span> <span class="s">&quot;hello, world&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">paragraph</span><span class="o">!</span><span class="p">.</span><span class="n">asHTML</span><span class="p">())</span>
</span><span class='line'>    <span class="c1">// prints &quot;&lt;p&gt;hello, world&lt;/p&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>Unfortunately, the HTMLElement class, as written above, creates a strong reference cycle between an HTMLElement instance and the closure used for its default asHTML. ( Even though the closure refers to self multiple times, it only captures one strong reference to the HTMLElement instance. )
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>    <span class="n">paragraph</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="c1">// If you set the paragraph variable to nil and break its strong reference to the HTMLElement instance, neither the HTMLElement instance nor its closure are deallocated, because of the strong reference cycle</span>
</span><span class='line'>    <span class="c1">// Note that the message in the HTMLElement deinitializer is not printed, which shows that the HTMLElement instance is not deallocated.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Resolving Strong Reference Cycles for Closures</p>

<p>  You resolve a strong reference cycle between a closure and a class instance by defining a capture list as part of the closure’s definition. A capture list defines the rules to use when capturing one or more reference types within the closure’s body. As with strong reference cycles between two class instances, you declare each captured reference to be a weak or unowned reference rather than a strong reference. The appropriate choice of weak or unowned depends on the relationships between the different parts of your code.</p>

<p>  * Swift requires you to write self.someProperty or self.someMethod (rather than just someProperty or someMethod) whenever you refer to a member of self within a closure. This helps you remember that it’s possible to capture self by accident.</p></li>
<li><p>Defining a Capture List</p>

<p>  Each item in a capture list is a pairing of the weak or unowned keyword with a reference to a class instance (such as self or someInstance). These pairings are written within a pair of square braces, separated by commas.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>    <span class="n">lazy</span> <span class="k">var</span> <span class="nl">someClosure</span><span class="p">:</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="kr">unowned</span> <span class="nb">self</span><span class="p">]</span> <span class="p">(</span><span class="nl">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">stringToProcess</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="k">in</span>
</span><span class='line'>        <span class="c1">// closure body goes here</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">If</span> <span class="n">a</span> <span class="n">closure</span> <span class="n">does</span> <span class="n">not</span> <span class="n">specify</span> <span class="n">a</span> <span class="n">parameter</span> <span class="n">list</span> <span class="n">or</span> <span class="k">return</span> <span class="n">type</span> <span class="n">because</span> <span class="n">they</span> <span class="n">can</span> <span class="n">be</span> <span class="n">inferred</span> <span class="n">from</span> <span class="n">context</span><span class="p">,</span> <span class="n">place</span> <span class="n">the</span> <span class="n">capture</span> <span class="n">list</span> <span class="n">at</span> <span class="n">the</span> <span class="n">very</span> <span class="n">start</span> <span class="n">of</span> <span class="n">the</span> <span class="n">closure</span><span class="p">,</span> <span class="n">followed</span> <span class="n">by</span> <span class="n">the</span> <span class="k">in</span> <span class="nl">keyword</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">lazy</span> <span class="k">var</span> <span class="nl">someClosure</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="kr">unowned</span> <span class="nb">self</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>        <span class="c1">// closure body goes here</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Weak and Unowned References

<ul>
<li>Define a capture in a closure as an unowned reference when the closure and the instance it captures will always refer to each other, and will always be deallocated at the same time.</li>
<li>Conversely, define a capture as a weak reference when the captured reference may become nil at some point in the future. Weak references are always of an optional type, and automatically become nil when the instance they reference is deallocated. This enables you to check for their existence within the closure’s body.</li>
<li>If the captured reference will never become nil, it should always be captured as an unowned reference, rather than a weak reference.</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>    <span class="k">class</span> <span class="n">HTMLElement</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">text</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">lazy</span> <span class="k">var</span> <span class="nl">asHTML</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="kr">unowned</span> <span class="nb">self</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">if</span> <span class="k">let</span> <span class="n">text</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">text</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="s">&quot;&lt;\(self.name)&gt;\(text)&lt;/\(self.name)&gt;&quot;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="s">&quot;&lt;\(self.name) /&gt;&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">text</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">deinit</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(name) is being deinitialized&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">paragraph</span><span class="p">:</span> <span class="n">HTMLElement</span><span class="o">?</span> <span class="o">=</span> <span class="n">HTMLElement</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;p&quot;</span><span class="p">,</span> <span class="nl">text</span><span class="p">:</span> <span class="s">&quot;hello, world&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">paragraph</span><span class="o">!</span><span class="p">.</span><span class="n">asHTML</span><span class="p">())</span>
</span><span class='line'>    <span class="c1">// prints &quot;&lt;p&gt;hello, world&lt;/p&gt;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">paragraph</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="c1">// prints &quot;p is being deinitialized&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Swift Part 12 - Deinitialization]]></title>
    <link href="http://zh-wang.github.io/blog/2015/01/06/learning-swift-part-12/"/>
    <updated>2015-01-06T19:34:40+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/01/06/learning-swift-part-12</id>
    <content type="html"><![CDATA[<h2>===== Full Notes =====</h2>

<h3>Deinitialization</h3>

<ul>
<li><p>How Deinitialization Works</p>

<p>  Swift automatically deallocates your instances when they are no longer needed, to free up resources. Swift handles the memory management of instances through automatic reference counting (ARC), as described in Automatic Reference Counting.</p></li>
<li><p>Deinitializers in Action, a sample of Bank operations</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Bank</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">var</span> <span class="n">coinsInBank</span> <span class="o">=</span> <span class="mi">10</span><span class="n">_000</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">func</span> <span class="n">vendCoins</span><span class="p">(</span><span class="k">var</span> <span class="nl">numberOfCoinsToVend</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">numberOfCoinsToVend</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">numberOfCoinsToVend</span><span class="p">,</span> <span class="n">coinsInBank</span><span class="p">)</span>
</span><span class='line'>        <span class="n">coinsInBank</span> <span class="o">-=</span> <span class="n">numberOfCoinsToVend</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">numberOfCoinsToVend</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">func</span> <span class="n">receiveCoins</span><span class="p">(</span><span class="nl">coins</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">coinsInBank</span> <span class="o">+=</span> <span class="n">coins</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="n">Player</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">coinsInPurse</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">coins</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">coinsInPurse</span> <span class="o">=</span> <span class="n">Bank</span><span class="p">.</span><span class="n">vendCoins</span><span class="p">(</span><span class="n">coins</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">winCoins</span><span class="p">(</span><span class="nl">coins</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">coinsInPurse</span> <span class="o">+=</span> <span class="n">Bank</span><span class="p">.</span><span class="n">vendCoins</span><span class="p">(</span><span class="n">coins</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">deinit</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Bank</span><span class="p">.</span><span class="n">receiveCoins</span><span class="p">(</span><span class="n">coinsInPurse</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="nl">playerOne</span><span class="p">:</span> <span class="n">Player</span><span class="o">?</span> <span class="o">=</span> <span class="n">Player</span><span class="p">(</span><span class="nl">coins</span><span class="p">:</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;A new player has joined the game with \(playerOne!.coinsInPurse) coins&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// prints &quot;A new player has joined the game with 100 coins&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;There are now \(Bank.coinsInBank) coins left in the bank&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// prints &quot;There are now 9900 coins left in the bank&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">playerOne</span><span class="o">!</span><span class="p">.</span><span class="n">winCoins</span><span class="p">(</span><span class="mi">2</span><span class="n">_000</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;PlayerOne won 2000 coins &amp; now has \(playerOne!.coinsInPurse) coins&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// prints &quot;PlayerOne won 2000 coins &amp; now has 2100 coins&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;The bank now only has \(Bank.coinsInBank) coins left&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// prints &quot;The bank now only has 7900 coins left&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">playerOne</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;PlayerOne has left the game&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// prints &quot;PlayerOne has left the game&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;The bank now has \(Bank.coinsInBank) coins&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// prints &quot;The bank now has 10000 coins&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AsyncTask同士は非同期実行]]></title>
    <link href="http://zh-wang.github.io/blog/2014/12/19/android-asynctask-parallelexcution/"/>
    <updated>2014-12-19T12:25:51+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/12/19/android-asynctask-parallelexcution</id>
    <content type="html"><![CDATA[<h2>AsyncTaskはなに？</h2>

<p><a href="http://developer.android.com/reference/android/os/AsyncTask.html">http://developer.android.com/reference/android/os/AsyncTask.html</a></p>

<ul>
<li>AsyncTask enables proper and easy use of the UI thread. This class allows to perform background operations and publish results on the UI thread without having to manipulate threads and/or handlers.</li>
</ul>


<h2>ほんとに非同期なの？</h2>

<p>AsyncTaskはUIThreadと非同期処理を行うが、AsyncTask同士の間ではデフォルトで<strong>同期</strong>的に行っているみたいね。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">private</span> <span class="kd">class</span> <span class="nc">TestTask</span> <span class="kd">extends</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">,</span> <span class="n">Void</span><span class="o">,</span> <span class="n">Void</span><span class="o">&gt;</span> <span class="cm">/* Params, Progress, Result */</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">duration</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TestTask</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="kt">int</span> <span class="n">duration</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">id</span>       <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">duration</span> <span class="o">=</span> <span class="n">duration</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Void</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">Void</span><span class="o">...</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">taskExecutionNumber</span> <span class="o">=</span> <span class="n">executedTasksCount</span><span class="o">.</span><span class="na">incrementAndGet</span><span class="o">();</span>
</span><span class='line'>        <span class="n">log</span><span class="o">(</span><span class="s">&quot;doInBackground: entered, taskExecutionNumber = &quot;</span> <span class="o">+</span> <span class="n">taskExecutionNumber</span><span class="o">);</span>
</span><span class='line'>        <span class="n">SystemClock</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">duration</span><span class="o">);</span> <span class="c1">// emulates some job</span>
</span><span class='line'>        <span class="n">log</span><span class="o">(</span><span class="s">&quot;doInBackground: is about to finish, taskExecutionNumber = &quot;</span> <span class="o">+</span> <span class="n">taskExecutionNumber</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">log</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;TestTask #&quot;</span> <span class="o">+</span> <span class="n">id</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ===========================</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numberOfTasks</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">taskId</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">taskDuration</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span> <span class="c1">// 1000 ms</span>
</span><span class='line'>    <span class="n">TestTask</span> <span class="n">task</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TestTask</span><span class="o">(</span><span class="n">taskId</span><span class="o">,</span> <span class="n">taskDuration</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// デフォルトでは同期処理。</span>
</span><span class='line'>    <span class="c1">// task.executeOnExecutor(AsyncTask.SERIAL_EXECUTOR) が実行される。</span>
</span><span class='line'>    <span class="n">task</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果。順番待ちですね。</p>

<p><img src="http://zh-wang.github.io/images/2014_12_19_image01.png" title="結果1" alt="result_1" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numberOfTasks</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">taskId</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">taskDuration</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span> <span class="c1">// 1000 ms</span>
</span><span class='line'>    <span class="n">TestTask</span> <span class="n">task</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TestTask</span><span class="o">(</span><span class="n">taskId</span><span class="o">,</span> <span class="n">taskDuration</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// こう書くと、非同期実行になる</span>
</span><span class='line'>    <span class="c1">// ソース(sdk v.21)を見ると、並列実行ができるExecutorで処理されるぽい</span>
</span><span class='line'>    <span class="n">task</span><span class="o">.</span><span class="na">executeOnExecutor</span><span class="o">(</span><span class="n">AsyncTask</span><span class="o">.</span><span class="na">THREAD_POOL_EXECUTOR</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ========================</span>
</span><span class='line'><span class="c1">// 以下はAsyncTask.THREAD_POOL_EXECUTORの正体。</span>
</span><span class='line'><span class="c1">// androidのソースから抜いた</span>
</span><span class='line'><span class="c1">// ========================</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">CPU_COUNT</span> <span class="o">=</span> <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">availableProcessors</span><span class="o">();</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">CORE_POOL_SIZE</span> <span class="o">=</span> <span class="n">CPU_COUNT</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">MAXIMUM_POOL_SIZE</span> <span class="o">=</span> <span class="n">CPU_COUNT</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">KEEP_ALIVE</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ThreadFactory</span> <span class="n">sThreadFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ThreadFactory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AtomicInteger</span> <span class="n">mCount</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AtomicInteger</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Thread</span> <span class="nf">newThread</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="s">&quot;AsyncTask #&quot;</span> <span class="o">+</span> <span class="n">mCount</span><span class="o">.</span><span class="na">getAndIncrement</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">sPoolWorkQueue</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;(</span><span class="mi">128</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * An {@link Executor} that can be used to execute tasks in parallel.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Executor</span> <span class="n">THREAD_POOL_EXECUTOR</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">ThreadPoolExecutor</span><span class="o">(</span><span class="n">CORE_POOL_SIZE</span><span class="o">,</span> <span class="n">MAXIMUM_POOL_SIZE</span><span class="o">,</span> <span class="n">KEEP_ALIVE</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">,</span> <span class="n">sPoolWorkQueue</span><span class="o">,</span> <span class="n">sThreadFactory</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果。非同期になった！</p>

<p><img src="http://zh-wang.github.io/images/2014_12_19_image02.png" title="結果2" alt="結果2" /></p>

<p>因みに、同時に処理できるスレッドの数は、<code>CORE_POOL_SIZE</code>に定義されている。sdk v21の場合、CPUのコア数+1になっている。<br/>
私のテスト端末はクアッドコアなので、同時に５つ走らせる。</p>

<p>それ以上走らせると、やっはり順番待ちになるのね。</p>

<p><img src="http://zh-wang.github.io/images/2014_12_19_image03.png" title="結果3" alt="結果3" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim-quickrun Config]]></title>
    <link href="http://zh-wang.github.io/blog/2014/11/28/vim-quickrun-config/"/>
    <updated>2014-11-28T10:51:39+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/11/28/vim-quickrun-config</id>
    <content type="html"><![CDATA[<p>Vim-quickrunの設定を書いたので、一応メモする。</p>

<h3>必要なバンドル</h3>

<pre><code>" これがないと意味ないだろう
Bundle 'thinca/vim-quickrun'

" vimから非同期実行。quickrunが実行中でも、ファイル編集が出来るようになる。
Bundle 'Shougo/vimproc.git'

" hookが使えるようになる
Bundle 'osyo-manga/shabadou.vim'

" uniteのウィンドウにquickfixを開く"
Bundle 'osyo-manga/unite-quickfix'
</code></pre>

<p>まず以上のバンドルを入れる。</p>

<h3>設定</h3>

<pre><code>" 出力がないやエラーの場合はquickfixに出力。それ以外は普通にバッファへ。
" vimprocの非同期設定。
" ウィンドウのサイズなど
let g:quickrun_config = {
\   "_" : {
\       "hook/close_unite_quickfix/enable_hook_loaded" : 1,
\       "hook/unite_quickfix/enable_failure" : 1,
\       "hook/close_quickfix/enable_exit" : 1,
\       "hook/close_buffer/enable_failure" : 1,
\       "hook/close_buffer/enable_empty_data" : 1,
\       "runner" : "vimproc",
\       "runner/vimproc/updatetime" : 60,
\       "outputter" : "multi:buffer:quickfix",
\       "outputter/buffer/split" : ":botright 8sp",
\   },
\}

" quickrunを強制終了
nnoremap &lt;expr&gt;&lt;silent&gt; &lt;C-c&gt; quickrun#is_running() ? quickrun#sweep_sessions() : "\&lt;C-c&gt;"

" 簡単起動
cmap qr QuickRun
cmap QR QuickRun

" 簡単終了
command! -nargs=0 QC call CloseQuickRunWindow()
function! CloseQuickRunWindow()
    execute "normal \&lt;c-c&gt;\&lt;c-w&gt;jZZ"
endfunction
cmap qc QC
</code></pre>

<p>これで快適快適(・ω&lt;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyでcsvをいじる]]></title>
    <link href="http://zh-wang.github.io/blog/2014/11/25/ruby-csv/"/>
    <updated>2014-11-25T18:04:08+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/11/25/ruby-csv</id>
    <content type="html"><![CDATA[<p>仕事の関係で、Google Playからユーザーレビューをエクスポート（csvファイル）して、特定なレビューを収集するタスクがあった。rubyで割と簡単にできたので、一応手順をメモしようと思った。</p>

<h3>Google Play Developer Consoleからcsvをエクスポート</h3>

<p>こちらのリンクを参考した。 <br/>
<a href="http://qiita.com/punchdrunker/items/e97248428d19cfa7fb08">http://qiita.com/punchdrunker/items/e97248428d19cfa7fb08</a></p>

<pre><code>gsutil cp -r gs://&lt;バケットID&gt;/reviews/reviews_&lt;アプリのパッケージ名&gt;_2013\* /path/to/directory
gsutil cp -r gs://&lt;バケットID&gt;/reviews/reviews_&lt;アプリのパッケージ名&gt;_2014\* /path/to/directory
</code></pre>

<p>こんな感じで2013と2014年分のレビューをcsvファイルとしてエクスポートすることが出来た。</p>

<p>UTF-16でエンコーディングされたファイルなんで、一応処理しやすいためUTF-8にしながら、一つのファイルに合体した。</p>

<pre><code>iconv -f UTF-16 -t UTF-8 reviews_YOUR.PACKAGE.NAME_201308.csv &gt;&gt; 201308_201406_review.csv
iconv -f UTF-16 -t UTF-8 reviews_YOUR.PACKAGE.NAME_201308.csv &gt;&gt; 201308_201406_review.csv | sed -n '1!p' &gt;&gt; 201308_201406_review.csv # 一行目はcsvの項目なので要らない
...
</code></pre>

<ul>
<li>Google Playの仕様変更により、2014年半ばまでのデータには<strong>review_link</strong>という項目か見つからないかもしれないので、注意しよう。</li>
</ul>


<h3>rubyで読み込んで処理する</h3>

<pre><code>#!/usr/bin/ruby
require 'csv'

table = CSV.table('201308_201406_review.csv') # 読み込み
table.delete_if { |row| row[:star_rating] &gt;= 3 } # 処理する。ここでは★２つ以下のレビューをselect。
File.write("201308_201406_review_below_2stars.csv", table.to_csv) # 処理したデータをcsvといて書き出す。
</code></pre>

<p>意外と簡単だね。(・∀・)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Swift Part 11 - Inheritance]]></title>
    <link href="http://zh-wang.github.io/blog/2014/11/20/learning-swift-part-11/"/>
    <updated>2014-11-20T19:10:05+09:00</updated>
    <id>http://zh-wang.github.io/blog/2014/11/20/learning-swift-part-11</id>
    <content type="html"><![CDATA[<h2>===== Full Notes =====</h2>

<h3>Inheritance</h3>

<ul>
<li>A base class, Vehicle</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    class Vehicle {
</span><span class='line'>        var currentSpeed = 0.0
</span><span class='line'>        var description: String {
</span><span class='line'>                return "traveling at \(currentSpeed) miles per hour"
</span><span class='line'>        }
</span><span class='line'>        func makeNoise() {
</span><span class='line'>                // do nothing - an arbitrary vehicle doesn't necessarily make a noise
</span><span class='line'>        }
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Subclass, Bicycle and Tandem</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    class Bicycle: Vehicle {
</span><span class='line'>        var hasBasket = false
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    class Tandem: Bicycle {
</span><span class='line'>        var currentNumberOfPassengers = 0
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    let tandem = Tandem()
</span><span class='line'>    tandem.hasBasket = true
</span><span class='line'>    tandem.currentNumberOfPassengers = 2
</span><span class='line'>    tandem.currentSpeed = 22.0
</span><span class='line'>    println("Tandem: \(tandem.description)")
</span><span class='line'>    // Tandem: traveling at 22.0 miles per hour</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<ul>
<li><p>Overriding</p>

<ul>
<li>A subclass can provide its own custom implementation of an instance method, class method, instance property, class property, or subscript that it would otherwise inherit from a superclass. This is known as overriding.</li>
<li>To override a characteristic that would otherwise be inherited, you prefix your overriding definition with the override keyword. Doing so clarifies that you intend to provide an override and have not provided a matching definition by mistake. Overriding by accident can cause unexpected behavior, and any overrides without the override keyword are diagnosed as an error when your code is compiled.</li>
<li>The override keyword also prompts the Swift compiler to check that your overriding class’s superclass (or one of its parents) has a declaration that matches the one you provided for the override. This check ensures that your overriding definition is correct.</li>
</ul>
</li>
<li><p>Accessing Superclass Methods, Properties, and Subscripts</p>

<ul>
<li>An overridden method named someMethod can call the superclass version of someMethod by calling super.someMethod() within the overriding method implementation.</li>
<li>An overridden property called someProperty can access the superclass version of someProperty as super.someProperty within the overriding getter or setter implementation.</li>
<li>An overridden subscript for someIndex can access the superclass version of the same subscript as super[someIndex] from within the overriding subscript implementation.</li>
</ul>
</li>
<li><p>Overriding Methods</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    class Train: Vehicle {
</span><span class='line'>        override func makeNoise() {
</span><span class='line'>            println("Choo Choo")
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    let train = Train()
</span><span class='line'>    train.makeNoise()
</span><span class='line'>    // prints "Choo Choo"</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Overriding Properties</p>

<ul>
<li>You can override an inherited instance or class property to provide your own custom getter and setter for that property, or to add property observers to enable the overriding property to observe when the underlying property value changes.</li>
</ul>
</li>
<li><p>Overriding Property Getters and Setters</p>

<ul>
<li>You can present an inherited read-only property as a read-write property by providing both a getter and a setter in your subclass property override. You cannot, however, present an inherited read-write property as a read-only property.</li>
<li>If you provide a setter as part of a property override, you must also provide a getter for that override. If you don’t want to modify the inherited property’s value within the overriding getter, you can simply pass through the inherited value by returning super.someProperty from the getter, where someProperty is the name of the property you are overriding.</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    class Car: Vehicle {
</span><span class='line'>        var gear = 1
</span><span class='line'>        override var description: String {
</span><span class='line'>            return super.description + " in gear \(gear)"
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    let car = Car()
</span><span class='line'>    car.currentSpeed = 25.0
</span><span class='line'>    car.gear = 3
</span><span class='line'>    println("Car: \(car.description)")
</span><span class='line'>    // Car: traveling at 25.0 miles per hour in gear 3</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Overriding Property Observers</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    class AutomaticCar: Car {
</span><span class='line'>        override var currentSpeed: Double {
</span><span class='line'>            didSet {
</span><span class='line'>                gear = Int(currentSpeed / 10.0) + 1
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    let automatic = AutomaticCar()
</span><span class='line'>    automatic.currentSpeed = 35.0
</span><span class='line'>    println("AutomaticCar: \(automatic.description)")
</span><span class='line'>    // AutomaticCar: traveling at 35.0 miles per hour in gear 4</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Preventing Overrides

<ul>
<li>You can prevent a method, property, or subscript from being overridden by marking it as final. Do this by writing the final modifier before the method, property, or subscript’s introducer keyword (such as final var, final func, final class func, and final subscript).</li>
<li>Any attempt to override a final method, property, or subscript in a subclass is reported as a compile-time error. Methods, properties, or subscripts that you add to a class in an extension can also be marked as final within the extension’s definition.</li>
<li>You can mark an entire class as final by writing the final modifier before the class keyword in its class definition (final class). Any attempt to subclass a final class is reported as a compile-time error.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
