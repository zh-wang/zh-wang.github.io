<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Welcome to FutureAppLaboratory]]></title>
  <link href="http://zh-wang.github.io/atom.xml" rel="self"/>
  <link href="http://zh-wang.github.io/"/>
  <updated>2015-07-16T10:04:42+09:00</updated>
  <id>http://zh-wang.github.io/</id>
  <author>
    <name><![CDATA[viennakanon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Longest Increasing Subsequence]]></title>
    <link href="http://zh-wang.github.io/blog/2015/07/15/longest-increasing-subsequence/"/>
    <updated>2015-07-15T22:16:50+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/07/15/longest-increasing-subsequence</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>In computer science, the longest increasing subsequence problem is to find a subsequence of a given sequence in which the subsequence&rsquo;s elements are in sorted order, lowest to highest, and in which the subsequence is as long as possible.</p>

<p>For example, a longest increasing subsequence of <code>0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15</code> is <code>0, 2, 6, 9, 11, 15</code>.</p>

<h2>An O(N<sup>2</sup>) Solution</h2>

<p>We define a $dp$ table, which $dp[i]$ is the length of a longest subsequence which ends at $inputs[i]$.</p>

<p>For each $inputs[i]$, we search every inputs before it, and choose the longest possible $dp$ value from them, fill it in $dp[i]$.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">inputs</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">14</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">13</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">11</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">15</span><span class="o">};</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">128</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">dp</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>    <span class="n">dp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">inputs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">longest</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">inputs</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">inputs</span><span class="o">[</span><span class="n">j</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">longest</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">longest</span><span class="o">,</span> <span class="n">dp</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">longest</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">inputs</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>An O(N*Log(N)) Solution</h2>

<p>We define a $seq$ table, which $seq[i]$ is the ending number of subsequence whose length is $i$.</p>

<h4>Note that, $seq$ is always in increasing order.</h4>

<p>Because if these exist $i &lt; j$ and $seq[i] > seq[j]$, which means a longer subsequence end with a smaller number.</p>

<p>Then we could generate a new subsequence, which length is $i$, by removing $j - i$ numbers from tail of $j$-length subsequence. The ending number of the new subsequence will be smaller than $seq[i]$.</p>

<p>Therefore, we can use binary search in each iteration, to find the largest $seq[k]$ which is smaller than $inputs[i]$. If $k$ can be found ($k > -1$), then we update the number stored in $seq[k]$ with $inputs[i]$ if $inputs[i] &lt; seq[k]$.</p>

<p>This yields an <strong>O(N*Log(N))</strong> solution.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">seq</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">128</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution2</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">seq</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="n">seq</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">inputs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">longest</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">bestSeqLength</span> <span class="o">=</span> <span class="n">binarySearch</span><span class="o">(</span><span class="n">seq</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">inputs</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">bestSeqLength</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">longest</span> <span class="o">=</span> <span class="n">bestSeqLength</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">seq</span><span class="o">[</span><span class="n">longest</span><span class="o">]</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">seq</span><span class="o">[</span><span class="n">longest</span><span class="o">],</span> <span class="n">inputs</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">res</span><span class="o">,</span> <span class="n">longest</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">binarySearch</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">begin</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">begin</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">end</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="c1">// !!!</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">s</span> <span class="o">&lt;=</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">m</span> <span class="o">=</span> <span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="n">t</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">m</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">s</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="n">m</span><span class="o">;</span> <span class="c1">// result index, which array.get(result) is most close to &amp; less than target</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">m</span><span class="o">]</span> <span class="o">==</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">m</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">t</span> <span class="o">=</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift String Operations]]></title>
    <link href="http://zh-wang.github.io/blog/2015/07/02/swift-string-operation/"/>
    <updated>2015-07-02T16:24:46+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/07/02/swift-string-operation</id>
    <content type="html"><![CDATA[<p>String operations of Swift seems to be easy to handle, but we should take care of them in development.</p>

<p>For example, this is a common code snippet which stays on the top spot, by searching &lsquo;<strong>swift substring</strong>&rsquo; from <a href="www.google.co.jp">www.google.co.jp</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">func</span> <span class="n">substring</span><span class="p">(</span><span class="nl">location</span><span class="p">:</span><span class="n">Int</span><span class="p">,</span> <span class="nl">length</span><span class="p">:</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">!</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nb">self</span> <span class="kt">as</span> <span class="bp">NSString</span><span class="p">).</span><span class="n">substringWithRange</span><span class="p">(</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="n">location</span><span class="p">,</span> <span class="n">length</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But, it is not correct. <code>NSString</code>&rsquo;s implementation is based on UTF-16 and handing index for it is just confusing.</p>

<p>Take a look at the following test.</p>

<p><img src="http://zh-wang.github.io/images/2015_07_02_image01.png" title="Test Failed" alt="IMGAE_A" /></p>

<p>Because index in <code>NSString</code> format is different from index in <code>String</code> format. The text is counted as length 2 in <code>NSString</code>, but only 1 in <code>String</code>.</p>

<p>So using <code>substring</code> in <code>NSString</code> only get half of it, from its binary expression. Then certainly, it cannot be decoded correctly.</p>

<p><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/StringsAndCharacters.html">Swift Online Guide</a> has a detail explanation for this problem.</p>

<p>We should use <code>String.Index</code> to handle different byte length of each character, and also decomposed and precomposed characters.</p>

<p>Because <code>String</code> in Swift is implemented as <strong>Unicode Scalar</strong>, or <strong>UTF-32</strong>, is always 4-byte long for each character and it default behaviour can handle composed characters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="n">substring2</span><span class="p">(</span><span class="nl">location</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">length</span><span class="p">:</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">!</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">location</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&quot;OMG&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">location</span> <span class="o">+</span> <span class="n">length</span> <span class="o">&lt;=</span> <span class="n">count</span><span class="p">(</span><span class="nb">self</span><span class="p">),</span> <span class="s">&quot;OMG again&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">startIndex</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">startIndex</span>
</span><span class='line'>    <span class="n">startIndex</span> <span class="o">=</span> <span class="n">advance</span><span class="p">(</span><span class="n">startIndex</span><span class="p">,</span> <span class="n">location</span><span class="p">)</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">res</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">substringFromIndex</span><span class="p">(</span><span class="n">startIndex</span><span class="p">)</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">endIndex</span> <span class="o">=</span> <span class="n">advance</span><span class="p">(</span><span class="n">startIndex</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">res</span><span class="p">.</span><span class="n">substringToIndex</span><span class="p">(</span><span class="n">endIndex</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://zh-wang.github.io/images/2015_07_02_image02.png" title="Test Passed" alt="IMAGE_B" /></p>

<p>For further reading about encoding, I recommend this page. <a href="http://www.objc.io/issues/9-strings/unicode/#utf-8">http://www.objc.io/issues/9-strings/unicode/#utf-8</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Surrogate Support for Swift's String]]></title>
    <link href="http://zh-wang.github.io/blog/2015/07/02/surrogate-support-for-swifts-string/"/>
    <updated>2015-07-02T12:41:54+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/07/02/surrogate-support-for-swifts-string</id>
    <content type="html"><![CDATA[<p>String in Swift does not support UTF16 surrogate in default.</p>

<p>From <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/StringsAndCharacters.html">Swift Official Guide</a></p>

<blockquote><p>A Unicode scalar is any Unicode code point in the range U+0000 to U+D7FF inclusive or U+E000 to U+10FFFF inclusive. Unicode scalars do not include the Unicode surrogate pair code points, which are the code points in the range U+D800 to U+DFFF inclusive.</p></blockquote>

<p>Therefore, I wrote a support class for it. :)</p>

<hr />

<p><a href="https://github.com/zh-wang/SwiftySurrogate">SwiftSurrogate on Github</a></p>

<p>Now you can decode Swift String from UTF16 surrogate pair like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">emoji1</span> <span class="o">=</span> <span class="n">SwiftySurrogate</span><span class="p">.</span><span class="n">decodeFromSurrogatePair</span><span class="p">(</span><span class="nl">surrogatePair</span><span class="p">:</span> <span class="s">&quot;D83D:DCC9&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">var</span> <span class="n">emoji2</span> <span class="o">=</span> <span class="n">SwiftySurrogate</span><span class="p">.</span><span class="n">decodeFromSurrogatePair</span><span class="p">(</span><span class="nl">high</span><span class="p">:</span> <span class="mh">0xD83C</span><span class="p">,</span> <span class="nl">low</span><span class="p">:</span> <span class="mh">0xDF80</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generics Enum in Swift]]></title>
    <link href="http://zh-wang.github.io/blog/2015/05/20/generics-enum-in-swift/"/>
    <updated>2015-05-20T15:27:01+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/05/20/generics-enum-in-swift</id>
    <content type="html"><![CDATA[<p>If we want handle different data type, according to the result of calling some APIs. We may need the code like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">APIResponse</span><span class="o">&lt;</span><span class="n">JsonType</span><span class="p">,</span> <span class="n">ErrorMsgType</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Success</span><span class="p">(</span><span class="n">JsonType</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Fail</span><span class="p">(</span><span class="n">ErrorMsgType</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="c1">// compile error</span>
</span></code></pre></td></tr></table></div></figure>


<p>But the code above cannot be compiled.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// integer overflows when converted from &#39;Builtin.Int32&#39; to &#39;Builtin.Int8&#39;MyPlayground.playground:148:6: error: unimplemented IR generation feature non-fixed multi-payload enum layout</span>
</span><span class='line'><span class="c1">//     enum APIResponse&lt;JsonType, ErrorMsgType&gt; {</span>
</span></code></pre></td></tr></table></div></figure>


<h3>How can we actually do this</h3>

<p>We can use <code>Container Class</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">SuccessContainer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">init</span> <span class="p">(</span><span class="nl">t</span> <span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="n">ErrorContainer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">init</span> <span class="p">(</span><span class="nl">t</span> <span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">APIResponse</span><span class="o">&lt;</span><span class="n">JsonType</span><span class="p">,</span> <span class="n">ErrorMsgType</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Success</span><span class="p">(</span><span class="n">SuccessContainer</span><span class="o">&lt;</span><span class="n">JsonType</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Fail</span><span class="p">(</span><span class="n">ErrorContainer</span><span class="o">&lt;</span><span class="n">ErrorMsgType</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// usage</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">GenAPIResponseSuccess</span><span class="o">&lt;</span><span class="n">JsonType</span><span class="p">,</span> <span class="n">ErrorMsgType</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">json</span> <span class="p">:</span> <span class="n">JsonType</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">APIResponse</span><span class="o">&lt;</span><span class="n">JsonType</span><span class="p">,</span> <span class="n">ErrorMsgType</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="n">SuccessContainer</span><span class="o">&lt;</span><span class="n">JsonType</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">t</span><span class="p">:</span> <span class="n">json</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">GenAPIResponseFail</span><span class="o">&lt;</span><span class="n">JsonType</span><span class="p">,</span> <span class="n">ErrorMsgType</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">errorMsg</span> <span class="p">:</span> <span class="n">ErrorMsgType</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">APIResponse</span><span class="o">&lt;</span><span class="n">JsonType</span><span class="p">,</span> <span class="n">ErrorMsgType</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">.</span><span class="n">Fail</span><span class="p">(</span><span class="n">ErrorContainer</span><span class="o">&lt;</span><span class="n">ErrorMsgType</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">t</span><span class="p">:</span> <span class="n">errorMsg</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">callbackFromAPI</span><span class="p">(</span><span class="nl">response</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">APIResponse</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">hasPrefix</span><span class="p">(</span><span class="s">&quot;success&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">GenAPIResponseSuccess</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="c1">// can be parsed to json</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">GenAPIResponseFail</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="c1">// just a plain error msg</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">callbackFromAPI</span><span class="p">(</span><span class="s">&quot;success. I&#39;m Json&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">callbackFromAPI</span><span class="p">(</span><span class="s">&quot;404 or something else&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But it is awful to write bunch of code for creating container classes, for each type you need.</p>

<h3>Better Solution?</h3>

<p>Here is a very useful lib. <a href="https://github.com/robrix/Box">https://github.com/robrix/Box</a></p>

<p>It provide a container class called <code>Box</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="n">final</span> <span class="k">class</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;:</span> <span class="n">BoxType</span><span class="p">,</span> <span class="n">Printable</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">/// Initializes a `Box` with the given value.</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">init</span><span class="p">(</span><span class="n">_</span> <span class="nl">value</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Constructs a `Box` with the given `value`.</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">class</span> <span class="k">func</span> <span class="n">unit</span><span class="p">(</span><span class="nl">value</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Box</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// The (immutable) value wrapped by the receiver.</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">let</span> <span class="nl">value</span><span class="p">:</span> <span class="n">T</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Constructs a new Box by transforming `value` by `f`.</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">func</span> <span class="n">map</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span><span class="p">(@</span><span class="n">noescape</span> <span class="nl">f</span><span class="p">:</span> <span class="n">T</span> <span class="o">-&gt;</span> <span class="n">U</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Printable</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">description</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">toString</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Finally</h3>

<p>We can rewrite above code into this. Much more elegant.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">APIResponse2</span><span class="o">&lt;</span><span class="n">JsonType</span><span class="p">,</span> <span class="n">ErrorMsgType</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Success</span><span class="p">(</span><span class="n">Box</span><span class="o">&lt;</span><span class="n">JsonType</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Fail</span><span class="p">(</span><span class="n">Box</span><span class="o">&lt;</span><span class="n">ErrorMsgType</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">GenAPIResponseSuccess2</span><span class="o">&lt;</span><span class="n">JsonType</span><span class="p">,</span> <span class="n">ErrorMsgType</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">json</span> <span class="p">:</span> <span class="n">JsonType</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">APIResponse2</span><span class="o">&lt;</span><span class="n">JsonType</span><span class="p">,</span> <span class="n">ErrorMsgType</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="n">Box</span><span class="o">&lt;</span><span class="n">JsonType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">json</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">GenAPIResponseFail2</span><span class="o">&lt;</span><span class="n">JsonType</span><span class="p">,</span> <span class="n">ErrorMsgType</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">errorMsg</span> <span class="p">:</span> <span class="n">ErrorMsgType</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">APIResponse2</span><span class="o">&lt;</span><span class="n">JsonType</span><span class="p">,</span> <span class="n">ErrorMsgType</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">.</span><span class="n">Fail</span><span class="p">(</span><span class="n">Box</span><span class="o">&lt;</span><span class="n">ErrorMsgType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">errorMsg</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">callbackFromAPI2</span><span class="p">(</span><span class="nl">response</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">APIResponse2</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">hasPrefix</span><span class="p">(</span><span class="s">&quot;success&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">GenAPIResponseSuccess2</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="c1">// can be parsed to json</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">GenAPIResponseFail2</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="c1">// just a plain error msg</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">callbackFromAPI2</span><span class="p">(</span><span class="s">&quot;success. I&#39;m Json&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">callbackFromAPI2</span><span class="p">(</span><span class="s">&quot;404 or something else&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[checkstack.plを遊んでみた]]></title>
    <link href="http://zh-wang.github.io/blog/2015/05/14/check-stack-usage-of-cpp-code/"/>
    <updated>2015-05-14T15:45:31+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/05/14/check-stack-usage-of-cpp-code</id>
    <content type="html"><![CDATA[<p>偶には再帰メソッドの消費メモリーが気になるので、</p>

<p>どうやって調べるのを調べたら、Linux OSに付いている<code>checkstack.pl</code>を見つけた。</p>

<p>ソースをgistに上げました。<a href="https://gist.github.com/zh-wang/64ff3e65dbcab0096f92">checkstack.pl</a></p>

<p>ちなみに、154行目の<code>next if ($size &lt; 100);</code>をコメントアウト済み。</p>

<p>そうすれば、スタックサイズが100以下のメソッドもリストアップしてくれた。</p>

<h3>テスト用のソース</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Point</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">px</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">py</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Point</span><span class="p">(</span><span class="kt">float</span> <span class="n">_x</span><span class="p">,</span> <span class="kt">float</span> <span class="n">_y</span><span class="p">)</span><span class="o">:</span><span class="n">px</span><span class="p">(</span><span class="n">_x</span><span class="p">),</span><span class="n">py</span><span class="p">(</span><span class="n">_y</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">func_arr_int_1</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xFFFFFFFF</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">func_arr_int_2</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">func_arr_int_3</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">func_arr_int_4</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">func_point</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span><span class="p">();</span>
</span><span class='line'>    <span class="n">func_arr_int_1</span><span class="p">();</span>
</span><span class='line'>    <span class="n">func_arr_int_2</span><span class="p">();</span>
</span><span class='line'>    <span class="n">func_arr_int_3</span><span class="p">();</span>
</span><span class='line'>    <span class="n">func_arr_int_4</span><span class="p">();</span>
</span><span class='line'>    <span class="n">func_point</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使う</h3>

<p>macなのでobjdumpではなくgobjdumpを使う。homebrewでインストールすると便利</p>

<pre><code>g++ stack_test.cpp
gobjdump -d a.out | checkstack
</code></pre>

<h3>結果</h3>

<pre><code>0x000100000e14 __Z14func_arr_int_2v []:   16
0x000100000e33 __Z14func_arr_int_2v []:   16
0x000100000e44 __Z14func_arr_int_3v []:   32
0x000100000e63 __Z14func_arr_int_3v []:   32
0x000100000e74 __Z14func_arr_int_4v []:   32
0x000100000e93 __Z14func_arr_int_4v []:   32
0x000100000ea4 __Z10func_pointv []:   16
0x000100000ebe __Z10func_pointv []:   16
0x000100000ed4 _main []:    32
0x000100000f09 _main []:    32
0x000100000f14 __ZN5PointC1Eff []:   16
0x000100000f39 __ZN5PointC1Eff []:   16
</code></pre>

<p>今のコンパイラって結構やってくれるな。</p>

<p><code>func1</code>ではレジストで操作したからスタック消費はなし。</p>

<p><code>func_arr_int_1</code>がスタック消費がないのは驚いた。size = 1のarrayは最適化されてなくなったみたい。</p>

<p>x64マシンなので、メモリー最小単位は16byteになるのか？</p>

<p><code>func_arr_int_2</code>は16byte。<code>func_arr_int_3</code>は実際24byteだと思うが、スタックサイズは32byteになった。メモリーは２単位取ったね。</p>

<h3>checkstack.plの原理</h3>

<pre><code> elsif ($arch =~ /^x86(_64)?$/ || $arch =~ /^i[3456]86$/) {
    #c0105234:       81 ec ac 05 00 00       sub    $0x5ac,%esp
    # or
    #    2f60:    48 81 ec e8 05 00 00       sub    $0x5e8,%rsp
    $re = qr/^.*[as][du][db]    \$(0x$x{1,8}),\%(e|r)sp$/o;
    $dre = qr/^.*[as][du][db]    (%.*),\%(e|r)sp$/o;
}
</code></pre>

<p>逆コンパイルされたコードの中の<code>add</code>, <code>sub</code>, <code>esp</code>, <code>rsp</code>を探して、スタックサイズを計算するらしい。</p>

<p>参考：<a href="http://0xcc.net/blog/archives/000115.html">http://0xcc.net/blog/archives/000115.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Popcount in Ruby]]></title>
    <link href="http://zh-wang.github.io/blog/2015/05/13/popcount-in-ruby/"/>
    <updated>2015-05-13T16:14:27+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/05/13/popcount-in-ruby</id>
    <content type="html"><![CDATA[<h3>Source</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Assume v is 32-bit long</span>
</span><span class='line'><span class="k">def</span> <span class="nf">popcount</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>    <span class="n">v</span> <span class="o">=</span> <span class="n">v</span> <span class="o">-</span> <span class="p">((</span><span class="n">v</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x55555555</span><span class="p">)</span>
</span><span class='line'>    <span class="n">v</span> <span class="o">=</span> <span class="p">(</span><span class="n">v</span> <span class="o">&amp;</span> <span class="mh">0x33333333</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">v</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x33333333</span><span class="p">)</span>
</span><span class='line'>    <span class="p">((</span><span class="n">v</span> <span class="o">+</span> <span class="p">(</span><span class="n">v</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xF0F0F0F</span><span class="p">)</span> <span class="o">*</span> <span class="mh">0x1010101</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">popcount</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Analysis</h3>

<p>For example, let v = 01001110 (lowest 8 bits, others are all 0, in binary)</p>

<h4>Step 1</h4>

<pre><code>v = v - ((v &gt;&gt; 1) &amp; 0x55555555)
</code></pre>

<p>This step count 1&rsquo;s appearance in each 2bits.</p>

<pre><code>0x5 = 0101

In binary,
00 - 00 &amp; 01 = 00 (0 1s in 00)
01 - 00 &amp; 01 = 01 (1 1s in 01)
10 - 01 &amp; 01 = 01 (1 1s in 10)
11 - 01 &amp; 01 = 10 (2 1s in 11)

01001110 -&gt; 01001001
</code></pre>

<h4>Step 2</h4>

<pre><code>v = (v &amp; 0x33333333) + ((v &gt;&gt; 2) &amp; 0x33333333)
</code></pre>

<p>This step mask high 2 bits to 0 in each 4 bits, then add low 2 bits in each 4 bits.</p>

<pre><code>In binary,
0100 -&gt; 0000 + 0001 -&gt; 0001
1001 -&gt; 0001 + 0010 -&gt; 0011

01001110 -&gt; 00010011
</code></pre>

<h4>Step 3</h4>

<pre><code>((v + (v &gt;&gt; 4) &amp; 0xF0F0F0F) * 0x1010101) &gt;&gt; 24
</code></pre>

<p>This step <code>(v + (v &gt;&gt; 4) &amp; 0xF0F0F0F)</code> add high 4 bits to low 4 bits, then <code>&amp; 0xF0F0F0F</code> mask high 4 bit to 0 in each 8 bits.</p>

<p><code>* 0x1010101</code> can be treaded as <code>* (0x01000000 + 0x00010000 + 0x00000100 + 0x00000001)</code>.</p>

<p><code>* 0x0100000</code> means left shift 24 times.</p>

<p><code>* 0x0001000</code> means left shift 16 times.</p>

<p><code>* 0x0000010</code> means left shift 8 times.</p>

<p><code>* 0x0000000</code> do nothing.</p>

<p>Then we add them up. Now we have the sum of 1s&#8217; count in each 8 bits, stored in a 32-bits data&rsquo;s highest 8 bits.</p>

<p><code>&gt;&gt; 24</code> outputs the sum.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Swift Part 14 - Optional Chaining]]></title>
    <link href="http://zh-wang.github.io/blog/2015/05/12/learning-swift-part-14/"/>
    <updated>2015-05-12T12:20:35+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/05/12/learning-swift-part-14</id>
    <content type="html"><![CDATA[<h2>===== Full Notes =====</h2>

<h3>Optional Chaining</h3>

<ul>
<li><p><em>Optional chaining</em> is a process for querying and calling properties, methods, and subscripts on an optional that might currently be nil.</p>

<ul>
<li>If the optional contains a value, the property, method, or subscript call succeeds; if the optional is nil, the property, method, or subscript call returns nil.</li>
<li>Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is nil.</li>
<li>Optional chaining in Swift is similar to messaging nil in Objective-C, but in a way that works for any type, and that can be checked for success or failure.</li>
</ul>
</li>
<li><p>Optional Chaining as an Alternative to Forced Unwrapping</p>

<ul>
<li><p>Sample of Forced Unwarpping
        class Person {
            var residence: Residence?
        }</p>

<pre><code>    class Residence {
        var numberOfRooms = 1
    }

    let john = Persion()

    let roomCount = john.residence!.numberOfRooms
    // this triggers a runtime error, because residence maybe nil
</code></pre></li>
<li><p>Optional chaining provides an alternative way to access the value of numberOfRooms.</p>

<pre><code>    if let roomCount = john.residence?.numberOfRooms {
        println("John's residence has \(roomCount) room(s).")
    } else {
        println("Unable to retrieve the number of rooms.")
    }
    // prints "Unable to retrieve the number of rooms.

    // Even numberOfRooms is Int, optional chaining will always return it as Int?
</code></pre></li>
</ul>
</li>
<li><p>Defining Model Classes for Optional Chaining</p>

<pre><code>      class Residence {
          var rooms = Room[]()
          var numberOfRooms: Int {
          return rooms.count
          }
          subscript(i: Int) -&gt; Room {
              return rooms[i]
          }
          func printNumberOfRooms() {
              println("The number of rooms is \(numberOfRooms)")
          }
          var address: Address?
      }

      class Room {
          let name: String
          init(name: String) { self.name = name }
      }

      class Address {
          var buildingName: String?
          var buildingNumber: String?
          var street: String?
          func buildingIdentifier() -&gt; String? {
              if buildingName {
                  return buildingName
              } else if buildingNumber {
                  return buildingNumber
              } else {
                  return nil
              }
          }
      }
</code></pre></li>
</ul>


<!-- more -->


<ul>
<li><p>Calling Properties Through Optional Chaining</p>

<ul>
<li><p>It is the same as above</p>

<pre><code>    let john = Person()
    if let roomCount = john.residence?.numberOfRooms {
        println("John's residence has \(roomCount) room(s).")
    } else {
        println("Unable to retrieve the number of rooms.")
    }
</code></pre></li>
</ul>
</li>
<li><p>Calling Methods Through Optional Chaining</p>

<pre><code>      func printNumberOfRooms() {
          println("The number of rooms is \(numberOfRooms)")
      }

      “if john.residence?.printNumberOfRooms() {
          println("It was possible to print the number of rooms.")
      } else {
          println("It was not possible to print the number of rooms.")
      }
      // prints "It was not possible to print the number of rooms.
</code></pre></li>
<li><p>Calling Subscripts Through Optional Chaining</p>

<pre><code>      if let firstRoomName = john.residence?[0].name {
          println("The first room name is \(firstRoomName).")
      } else {
          println("Unable to retrieve the first room name.")
      }
      // prints "Unable to retrieve the first room name.
</code></pre></li>
<li><p>Linking Multiple Levels of Chaining</p>

<ul>
<li>If the type you are trying to retrieve is not optional, it will become optional because of the optional chaining.</li>
<li><p>If the type you are trying to retrieve is already optional, it will not become more optional because of the chaining.</p>

<pre><code>    “if let johnsStreet = john.residence?.address?.street {
        println("John's street name is \(johnsStreet).")
    } else {
        println("Unable to retrieve the address.")
    }
    // prints "Unable to retrieve the address.”
</code></pre></li>
</ul>
</li>
<li><p>Chaining on Methods With Optional Return Values</p>

<pre><code>      if let buildingIdentifier = john.residence?.address?.buildingIdentifier() {
          println("John's building identifier is \(buildingIdentifier).")
      }
      // prints "John's building identifier is The Larches.

      “if let upper = john.residence?.address?.buildingIdentifier()?.uppercaseString {
          println("John's uppercase building identifier is \(upper).")
      }
      // prints "John's uppercase building identifier is THE LARCHES.”
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FB HackerCup 2015 R1 40:CorporateGifting]]></title>
    <link href="http://zh-wang.github.io/blog/2015/04/03/fb-hackcup-2015-r1-40-corporategifting/"/>
    <updated>2015-04-03T23:48:59+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/04/03/fb-hackcup-2015-r1-40-corporategifting</id>
    <content type="html"><![CDATA[<p>Problem definition can be found <a href="https://www.facebook.com/hackercup/problems.php?pid=759650454070547&amp;round=344496159068801">here</a>.<br/>
Need some tricks on recursion.<br/>
And if keep dp size for about $\sqrt{N}$ will cause the program run too LONG!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;climits&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cassert&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;numeric&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utility&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iomanip&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stack&gt;</span>
</span><span class='line'><span class="cp">#include &lt;list&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="cp">#define PB push_back</span>
</span><span class='line'><span class="cp">#define MP make_pair</span>
</span><span class='line'><span class="cp">#define REP(i, n) for (int i(0); i &lt; n; ++i)</span>
</span><span class='line'><span class="cp">#define REP1(i, n) for (int i(1); i &lt; n; ++i)</span>
</span><span class='line'><span class="cp">#define REP1N(i, n) for (int i(1); i &lt;= n; ++i)</span>
</span><span class='line'><span class="cp">#define FOR(i, a, b) for (int i(a); i &lt;= b; ++i)</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">vll</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vi</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vi</span><span class="o">&gt;</span> <span class="n">vvi</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">vb</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vb</span><span class="o">&gt;</span> <span class="n">vvb</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">tc</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">parentIndex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">node</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">node</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">child</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">child</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">node</span> <span class="n">nodes</span><span class="p">[</span><span class="mi">200001</span><span class="p">];</span>
</span><span class='line'><span class="n">pii</span> <span class="n">best1</span><span class="p">[</span><span class="mi">200001</span><span class="p">];</span>
</span><span class='line'><span class="n">pii</span> <span class="n">best2</span><span class="p">[</span><span class="mi">200001</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">sort_bests</span><span class="p">(</span><span class="k">const</span> <span class="n">pii</span><span class="o">&amp;</span> <span class="n">left</span><span class="p">,</span> <span class="k">const</span> <span class="n">pii</span><span class="o">&amp;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">left</span><span class="p">.</span><span class="n">second</span> <span class="o">==</span> <span class="n">right</span><span class="p">.</span><span class="n">second</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">left</span><span class="p">.</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">left</span><span class="p">.</span><span class="n">second</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">solve</span><span class="p">(</span><span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rootIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">node</span><span class="o">*</span> <span class="n">root</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">nodes</span><span class="p">[</span><span class="n">rootIndex</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">csize</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>    <span class="n">REP</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">csize</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">solve</span><span class="p">(</span><span class="o">++</span><span class="n">depth</span><span class="p">,</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">maxColor</span> <span class="o">=</span> <span class="n">ceil</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">n</span><span class="p">));</span>
</span><span class='line'>    <span class="n">REP1N</span><span class="p">(</span><span class="n">rootColor</span><span class="p">,</span> <span class="n">maxColor</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// find color should be choosen for root</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">_res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// subtree sum of root, when picking rootColor</span>
</span><span class='line'>        <span class="n">REP</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">csize</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// for each child</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">childIndex</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>            <span class="n">node</span><span class="o">*</span> <span class="n">child</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">nodes</span><span class="p">[</span><span class="n">childIndex</span><span class="p">];</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">__res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">rootColor</span> <span class="o">==</span> <span class="n">best1</span><span class="p">[</span><span class="n">childIndex</span><span class="p">].</span><span class="n">first</span><span class="p">)</span>
</span><span class='line'>                <span class="n">__res</span> <span class="o">+=</span> <span class="n">best2</span><span class="p">[</span><span class="n">childIndex</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">__res</span> <span class="o">+=</span> <span class="n">best1</span><span class="p">[</span><span class="n">childIndex</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>            <span class="n">_res</span> <span class="o">+=</span> <span class="n">__res</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">_res</span> <span class="o">+=</span> <span class="n">rootColor</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pii</span> <span class="n">new_best</span> <span class="o">=</span> <span class="n">MP</span><span class="p">(</span><span class="n">rootColor</span><span class="p">,</span> <span class="n">_res</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">sort_bests</span><span class="p">(</span><span class="n">new_best</span><span class="p">,</span> <span class="n">best1</span><span class="p">[</span><span class="n">rootIndex</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">best2</span><span class="p">[</span><span class="n">rootIndex</span><span class="p">]</span> <span class="o">=</span> <span class="n">best1</span><span class="p">[</span><span class="n">rootIndex</span><span class="p">];</span>
</span><span class='line'>            <span class="n">best1</span><span class="p">[</span><span class="n">rootIndex</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_best</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">sort_bests</span><span class="p">(</span><span class="n">new_best</span><span class="p">,</span> <span class="n">best2</span><span class="p">[</span><span class="n">rootIndex</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">best2</span><span class="p">[</span><span class="n">rootIndex</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_best</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">tc</span><span class="p">;</span>
</span><span class='line'>    <span class="n">REP</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">tc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>        <span class="n">REP</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="mi">200001</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">nodes</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">node</span><span class="p">();</span>
</span><span class='line'>            <span class="n">best1</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">MP</span><span class="p">(</span><span class="n">INT_MAX</span><span class="p">,</span> <span class="n">INT_MAX</span><span class="p">);</span>
</span><span class='line'>            <span class="n">best2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">MP</span><span class="p">(</span><span class="n">INT_MAX</span><span class="p">,</span> <span class="n">INT_MAX</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">REP</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">parentIndex</span><span class="p">;</span>
</span><span class='line'>            <span class="n">nodes</span><span class="p">[</span><span class="n">parentIndex</span><span class="p">].</span><span class="n">child</span><span class="p">.</span><span class="n">PB</span><span class="p">(</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">solve</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">best1</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">second</span> <span class="o">&gt;</span> <span class="n">best2</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">second</span> <span class="o">?</span> <span class="n">best2</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nl">second</span> <span class="p">:</span> <span class="n">best1</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">res</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FB HackerCup 2015 R1 25:Autocomplete]]></title>
    <link href="http://zh-wang.github.io/blog/2015/04/02/fb-hackercup-2015-r1-25-autocomplete/"/>
    <updated>2015-04-02T18:16:03+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/04/02/fb-hackercup-2015-r1-25-autocomplete</id>
    <content type="html"><![CDATA[<p>Problem definition can be found <a href="https://www.facebook.com/hackercup/problems.php?pid=313229895540583&amp;round=344496159068801">here</a>.<br/>
This is a basic problem which can be solved directly by a Tri-tree.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;climits&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cassert&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;numeric&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utility&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iomanip&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stack&gt;</span>
</span><span class='line'><span class="cp">#include &lt;list&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="cp">#define PB push_back</span>
</span><span class='line'><span class="cp">#define MP make_pair</span>
</span><span class='line'><span class="cp">#define REP(i, n) for (int i(0); i &lt; n; ++i)</span>
</span><span class='line'><span class="cp">#define REP1(i, n) for (int i(1); i &lt; n; ++i)</span>
</span><span class='line'><span class="cp">#define FOR(i, a, b) for (int i(a); i &lt;= b; ++i)</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">node</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">node</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">childs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="o">*</span><span class="p">[</span><span class="mi">26</span><span class="p">];</span>
</span><span class='line'>        <span class="n">REP</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">26</span><span class="p">)</span> <span class="n">childs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">node</span><span class="o">**</span> <span class="n">childs</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">tc</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="n">string</span> <span class="n">word</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">findWordAndBuildTree</span><span class="p">(</span><span class="n">node</span><span class="o">*</span> <span class="n">root</span><span class="p">,</span> <span class="n">string</span> <span class="n">word</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">node</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">found</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="n">REP</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">word</span><span class="p">.</span><span class="n">length</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">childs</span><span class="p">[</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">found</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">res</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="n">found</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&gt;</span><span class="n">childs</span><span class="p">[</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">childs</span><span class="p">[</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">tc</span><span class="p">;</span>
</span><span class='line'>    <span class="n">REP</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">tc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>        <span class="n">node</span><span class="o">*</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">REP</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">word</span><span class="p">;</span>
</span><span class='line'>            <span class="n">res</span> <span class="o">+=</span> <span class="n">findWordAndBuildTree</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">word</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">res</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resize Gif by RMagick]]></title>
    <link href="http://zh-wang.github.io/blog/2015/03/25/resize-gif-by-rmagick/"/>
    <updated>2015-03-25T18:31:47+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/03/25/resize-gif-by-rmagick</id>
    <content type="html"><![CDATA[<p>Only source code :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;RMagick&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">img</span> <span class="o">=</span> <span class="no">Magick</span><span class="o">::</span><span class="no">ImageList</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;FILENAME.gif&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">img</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">frame</span><span class="o">|</span>
</span><span class='line'>  <span class="n">frame</span><span class="o">.</span><span class="n">resize!</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">img</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;FILENAME_s.gif&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enable Hide and Internal Classes in Android SDK]]></title>
    <link href="http://zh-wang.github.io/blog/2015/03/23/enable-hide-and-internal-classes-in-android-sdk/"/>
    <updated>2015-03-23T14:36:26+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/03/23/enable-hide-and-internal-classes-in-android-sdk</id>
    <content type="html"><![CDATA[<h2>Hide and Internal Classes</h2>

<p>During android development, you may need to access some method or classes which is not contained in official SDK.<br/>
For example, <code>dalvik.system.VMRuntime</code>, <code>com.android.internal.app.AlertController</code>, etc.<br/>
Although you can done with Java&rsquo;s reflection, it is not developer friendly.<br/>
Here is a more friendly way to do this.</p>

<h2>Preparation</h2>

<p>(I&rsquo;m working on a Mac. But I think procedure is similar if working on other OS.)</p>

<ol>
<li>Android&rsquo;s official SDK. We use android-17(4.2.2) here.</li>
<li>Android emulator.</li>
<li>Can run ruby.</li>
</ol>


<h2>Steps</h2>

<ol>
<li>Create an emulator for 4.2.2 OS. Name it as &ldquo;android422&rdquo;. (by command line or Eclipse)</li>
<li><p>Pull all framework libraries to working machine, which contains all hide and internal classes.</p>

<pre><code> emulator -avd android422
 adb pull /system/framework/* framework
</code></pre></li>
<li><p>Get decompiling tools for odex. Download <code>smali-2.0.3.jar</code> and <code>baksmali-2.0.3.jar</code>. <a href="https://code.google.com/p/smali/">https://code.google.com/p/smali/</a></p></li>
<li>Put them in same directory, run <code>./create_custom_sdk.rb</code></li>
<li>Then you use choose the created custom sdk from Eclipse.</li>
</ol>


<p><img src="http://zh-wang.github.io/images/2015_03_23_image01.png" title="Choose custom sdk" alt="Image A" /></p>

<h2>Source</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -- create_custom_sdk.rb --</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># clear &#39;out&#39; directory</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;rm -rf out&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;mkdir out&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="s2">&quot;out&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># core.odex(optimized dex) file -&gt; dex file</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;java -jar ../baksmali-2.0.3.jar -a 17 -d ../framework -x ../framework/core.odex -o internal_core_smali&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;java -jar ../smali-2.0.3.jar -x -o core.dex internal_core_smali&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># framework.odex(optimized dex) file -&gt; dex file</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;java -jar ../baksmali-2.0.3.jar -a 17 -d ../framework -x ../framework/framework.odex -o internal_framework_smali&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;java -jar ../smali-2.0.3.jar -x -o framework.dex internal_framework_smali&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># .dex -&gt; .class, which contains all symbols including hide and internal</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;dex2jar core.dex&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;unzip core_dex2jar.jar -d full-symbol-android&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;dex2jar framework.dex&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;unzip framework_dex2jar.jar -d full-symbol-android&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># copy offical sdk here</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;cp -r ~/sdk/android-sdk-macosx/platforms/android-17 android422&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># unzip offical android.jar, merge full-symbol-android into it</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;unzip android422/android.jar -d custom-android&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;cp -r full-symbol-android/* custom-android&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="s2">&quot;custom-android&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;zip -r9 internal-android.zip *&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="s2">&quot;..&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;mv custom-android/internal-android.zip android422/android.jar&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Fix some properties to enable custom sdk shown in Eclipse</span>
</span><span class='line'><span class="n">filename</span> <span class="o">=</span> <span class="s2">&quot;android422/build.prop&quot;</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/ro\.build\.id=.*/</span><span class="p">,</span> <span class="s2">&quot;ro.build.id=Custom422&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/ro\.build\.version\.sdk=17/</span><span class="p">,</span> <span class="s2">&quot;ro.build.version.sdk=422&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/ro\.build\.version\.release=.*/</span><span class="p">,</span> <span class="s2">&quot;ro.build.version.release=4.2.2.c&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="n">file</span> <span class="o">&lt;&lt;</span> <span class="nb">puts</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">filename</span> <span class="o">=</span> <span class="s2">&quot;android422/source.properties&quot;</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/AndroidVersion\.ApiLevel=17/</span><span class="p">,</span> <span class="s2">&quot;AndroidVersion.ApiLevel=422&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/Pkg\.Desc=Android SDK Platform 4\.2\.2/</span><span class="p">,</span> <span class="s2">&quot;Pkg.Desc=Android SDK Platform Custom422&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="n">file</span> <span class="o">&lt;&lt;</span> <span class="nb">puts</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Copy custom sdk to offical sdk&#39;s directory</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;cp -r android422 ~/sdk/android-sdk-macosx/platforms&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Done&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analysis of PROB Milking Cows]]></title>
    <link href="http://zh-wang.github.io/blog/2015/03/15/analysis-of-prob-milking-cows/"/>
    <updated>2015-03-15T21:14:14+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/03/15/analysis-of-prob-milking-cows</id>
    <content type="html"><![CDATA[<h2>Description</h2>

<p>(From train.usaco.org) Three farmers rise at 5 am each morning and head for the barn to milk three cows. The first farmer begins milking his cow at time 300 (measured in seconds after 5 am) and ends at time 1000. The second farmer begins at time 700 and ends at time 1200. The third farmer begins at time 1500 and ends at time 2100. The longest continuous time during which at least one farmer was milking a cow was 900 seconds (from 300 to 1200). The longest time no milking was done, between the beginning and the ending of all milking, was 300 seconds (1500 minus 1200).</p>

<p>Your job is to write a program that will examine a list of beginning and ending times for N (1 &lt;= N &lt;= 5000) farmers milking N cows and compute (in seconds):</p>

<p>The longest time interval at least one cow was milked.
The longest time interval (after milking starts) during which no cows were being milked.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SAMPLE INPUT (file milk2.in)
</span><span class='line'>3
</span><span class='line'>300 1000
</span><span class='line'>700 1200
</span><span class='line'>1500 2100</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SAMPLE OUTPUT (file milk2.out)
</span><span class='line'>900 300</span></code></pre></td></tr></table></div></figure>


<h2>Analysis</h2>

<p>A straight-forward, brute-force solution is to keep a large array $k$, with each element $k_i$ is a boolean value indicates whether at least one cow is being milked at time $i$. Then travel from the start to the end to get the answer.</p>

<!-- more -->


<h2>Source</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">ID: viennak1</span>
</span><span class='line'><span class="cm">PROB: milk2</span>
</span><span class='line'><span class="cm">LANG: C++</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Section 1.2 PROB Milking Cows</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;climits&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cassert&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;numeric&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utility&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iomanip&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stack&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">s</span><span class="p">[</span><span class="mi">5000</span><span class="p">],</span><span class="n">t</span><span class="p">[</span><span class="mi">5000</span><span class="p">];</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">k</span><span class="p">[</span><span class="mi">1000005</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">res1</span><span class="p">,</span><span class="n">res2</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">ofstream</span> <span class="n">fout</span> <span class="p">(</span><span class="s">&quot;milk2.out&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ifstream</span> <span class="n">fin</span> <span class="p">(</span><span class="s">&quot;milk2.in&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">fin</span><span class="o">&gt;&gt;</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">i</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="n">swap</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]),</span><span class="n">swap</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">t</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">==</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">t</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&lt;</span><span class="n">t</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="n">swap</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">t</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">last</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">last</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">last</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">last</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="n">k</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
</span><span class='line'>            <span class="n">last</span><span class="o">=</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="n">j</span><span class="o">&lt;</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="n">k</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
</span><span class='line'>            <span class="n">last</span><span class="o">=</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">mark</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">end</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">end</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">end</span><span class="p">,</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">start</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">500</span><span class="p">)</span> <span class="n">start</span><span class="o">=</span><span class="n">last</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span> <span class="n">res2</span><span class="o">=</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="mi">500</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">start</span><span class="o">=</span><span class="n">last</span><span class="o">=</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">mark</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">start</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">end</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">mark</span><span class="o">==</span><span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">mark</span><span class="p">)</span> <span class="n">res2</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">res2</span><span class="p">,</span><span class="n">i</span><span class="o">-</span><span class="n">last</span><span class="p">),</span> <span class="n">last</span><span class="o">=</span><span class="n">i</span><span class="p">,</span> <span class="n">mark</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span> <span class="n">res1</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">res1</span><span class="p">,</span><span class="n">i</span><span class="o">-</span><span class="n">last</span><span class="p">),</span> <span class="n">last</span><span class="o">=</span><span class="n">i</span><span class="p">,</span> <span class="n">mark</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">fout</span><span class="o">&lt;&lt;</span><span class="n">res1</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="o">&lt;&lt;</span><span class="n">res2</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//for(int i=0;i&lt;21;i++) cout&lt;&lt;k[i]&lt;&lt;&quot; &quot;;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIF View for Android]]></title>
    <link href="http://zh-wang.github.io/blog/2015/03/10/gif-view-for-android/"/>
    <updated>2015-03-10T23:25:52+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/03/10/gif-view-for-android</id>
    <content type="html"><![CDATA[<h2>Movie view does not work sometimes</h2>

<p>There are several ways to decode and show GIF format image on android.<br/>
I tried using framework&rsquo;s <code>Movie</code> class to decode GIF, but it crashes on device which runs 4.1 or later.<br/>
Don&rsquo;t know why that occurs but I need to show animated GIF on all OS version.<br/>
So I write a custom view to do that, and in a simple way.</p>

<p>Source can be found on <a href="https://github.com/zh-wang/AndroidGifView">Github</a>.</p>

<h2>Something Wired</h2>

<p>GIF&rsquo;s document says that it is encoded in little-endian<a href="http://www.w3.org/Graphics/GIF/spec-gif89a.txt">GIF Specification</a>.<br/>
But sometimes the HEADER part is in big-endian, like this.</p>

<p><img src="http://zh-wang.github.io/images/2015_03_10_image01.png" title="GIF image bytes in hex" alt="Image 01" /></p>

<p>The first 6 bytes <code>47 49 46 38 39 61</code> is <code>GIF89a</code>, in big-endian. But sometimes in little-endian.(Not confirmed but I found some open source libraries read them by little-endian).<br/>
Note that, the following image size sector <code>7c02 fa00</code> (width: 636, height: 250) is little-endian.<br/>
So I should read bytes first in <code>BIG_ENDIAN</code>, then turn byte order into <code>LITTLE_ENDIAN</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Reads GIF file header information.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">readHeader</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">id</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">rawData</span><span class="o">.</span><span class="na">order</span><span class="o">(</span><span class="n">ByteOrder</span><span class="o">.</span><span class="na">BIG_ENDIAN</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">id</span> <span class="o">+=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span> <span class="n">read</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">rawData</span><span class="o">.</span><span class="na">order</span><span class="o">(</span><span class="n">ByteOrder</span><span class="o">.</span><span class="na">LITTLE_ENDIAN</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">id</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;GIF&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">status</span> <span class="o">=</span> <span class="n">STATUS_FORMAT_ERROR</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">readLSD</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">gctFlag</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">err</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">gct</span> <span class="o">=</span> <span class="n">readColorTable</span><span class="o">(</span><span class="n">gctSize</span><span class="o">);</span>
</span><span class='line'>        <span class="n">bgColor</span> <span class="o">=</span> <span class="n">gct</span><span class="o">[</span><span class="n">bgIndex</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copy Screenshots Easier]]></title>
    <link href="http://zh-wang.github.io/blog/2015/03/02/copy-screenshot-easier/"/>
    <updated>2015-03-02T18:23:47+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/03/02/copy-screenshot-easier</id>
    <content type="html"><![CDATA[<p>When I need screenshot for blog post, I always use Mac&rsquo;s default shortcuts to take them.<br/>
It&rsquo;s super easy to do so. But Mac always store them on Desktop folder. So I have to copy it from Desktop folder to Octopress&rsquo;s image folder. And the default name for the screenshot is a bit complicated to be managed.<br/>
So I write some script to make it easier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Usage&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;1. ruby tools.rb cp_ss -&gt; (Copy screenshot on Desktop to source/images and named with prefix of newest post&#39;s date)&quot;</span>
</span><span class='line'>  <span class="nb">exit</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">prefix</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;source/_posts/*.*&quot;</span><span class="p">)</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/-/</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">2</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;_&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">desktop</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;HOME&#39;</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;/Desktop/&quot;</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">entries</span><span class="p">(</span><span class="n">desktop</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">path</span><span class="p">(</span><span class="n">file</span><span class="p">)</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s2">&quot;Screen Shot&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">origin</span> <span class="o">=</span> <span class="n">desktop</span> <span class="o">+</span> <span class="no">File</span><span class="o">.</span><span class="n">path</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>    <span class="n">index</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">while</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">target</span> <span class="o">=</span> <span class="s2">&quot;source/images/%s_image%02d.png&quot;</span> <span class="o">%</span> <span class="o">[</span><span class="n">prefix</span><span class="p">,</span> <span class="n">index</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Copy %s -&gt; source/images/\%s. Yes[Y] or No[N]&quot;</span> <span class="o">%</span> <span class="o">[</span><span class="n">origin</span><span class="p">,</span> <span class="n">target</span><span class="o">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="sr">/[yY]/</span> <span class="o">=~</span> <span class="no">STDIN</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span><span class="p">)</span>
</span><span class='line'>      <span class="no">FileUtils</span><span class="o">.</span><span class="n">mv</span><span class="p">(</span><span class="n">origin</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Done.&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Skip.&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macbook-proは外付けディスプレイの配置を忘れてしまう]]></title>
    <link href="http://zh-wang.github.io/blog/2015/02/26/macbook-pro-lost-external-moniters-arrangement/"/>
    <updated>2015-02-26T10:15:45+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/02/26/macbook-pro-lost-external-moniters-arrangement</id>
    <content type="html"><![CDATA[<p>最近Macbook-proを外付けディスプレイに接続した後、もともとトップ&amp;ダウンに設定されたディスプレイの配置は必ず左&amp;右になってしまう。最初は再起動したらなんとなく直るだろうと思ったので、一旦この問題を無視した。<br/>
しかし、なかなか直らないので、グーグル先生から解決方法を聞いた。</p>

<p><a href="http://apple.stackexchange.com/questions/85472/external-monitor-resolution-setting-is-lost-after-macbook-wakes-up-from-sleep">external-monitor-resolution-setting-is-lost-after-macbook-wakes-up-from-sleep</a></p>

<p>ちょっと違う問題なんですが、一応効く。要は再起動する時に[cmd] + [opt] + [P] + [R]でNVRAMをリセットするということです。</p>

<p>NVRAMに関する紹介はこちらにあります。<br/>
<a href="http://support.apple.com/en-us/HT204063">How to Reset NVRAM on your Mac</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analysis of PROB Broken Necklace]]></title>
    <link href="http://zh-wang.github.io/blog/2015/02/25/usaco-prob-broken-necklace/"/>
    <updated>2015-02-25T17:58:16+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/02/25/usaco-prob-broken-necklace</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This is an analysis of PROB Broken Necklace, one of USA Computer Olympiad&rsquo;s training problems.<br/>
Just doing some disposal on my old stuff.</p>

<h2>Description</h2>

<p>You have a necklace of N red, white, or blue beads (3&lt;=N&lt;=350) some of which are red, others blue, and others white, arranged at random. Here are two examples for n=29:</p>

<pre><code>            1 2                               1 2
        r b b r                           b r r b
      r         b                       b         b
     r           r                     b           r
    r             r                   w             r
   b               r                 w               w
  b                 b               r                 r
  b                 b               b                 b
  b                 b               r                 b
   r               r                 b               r
    b             r                   r             r
     b           r                     r           r
       r       r                         r       b
         r b r                             r r w
        Figure A                         Figure B
                    r red bead
                    b blue bead
                    w white bead
</code></pre>

<p>The beads considered first and second in the text that follows have been marked in the picture.</p>

<p>The configuration in Figure A may be represented as a string of b&rsquo;s and r&rsquo;s, where b represents a blue bead and r represents a red one, as follows: brbrrrbbbrrrrrbrrbbrbbbbrrrrb .</p>

<p>Suppose you are to break the necklace at some point, lay it out straight, and then collect beads of the same color from one end until you reach a bead of a different color, and do the same for the other end (which might not be of the same color as the beads collected before this).</p>

<p>Determine the point where the necklace should be broken so that the most number of beads can be collected.</p>

<!--more-->


<h2>Analysis</h2>

<p>Given an input string &lsquo;wwwbbrwrbrbrrbrbrwrwwrbwrwrrb&rsquo;, we concatenate it with itself, result in &lsquo;wwwbbrwrbrbrrbrbrwrwwrbwrwrrbwwwbbrwrbrbrrbrbrwrwwrbwrwrrb&rsquo;. This trick, working on handling minus or over-length index is easier.</p>

<ol>
<li><p>Brute force solution.</p>

<p> For each index $a_i$ as a start, if $a_{i+1}$ can be picked into the longest substring, we pick it then do this again on $a_{i+1}$. Note that, if $a_i$ is w, we must treat it as b and r, one by one. We do N times of picking attempt for each $a_i$. Therefore complexity is O(N<sup>2</sup>). Just a straight forward solution.</p></li>
<li><p>DP solution.</p>

<p> We denote substring composed by successive r, which <strong>ends</strong> at index $i$ to $t_{i,r}$.</p></li>
</ol>


<script type="math/tex; mode=display">
    t_{i,r} = \begin{cases}
        t_{i-1,r} + 1 & \text{if $a_i$ is r or w} \\
        0 & \text{if $a_i$ is b or $i$ > N}
    \end{cases}
</script>


<p>Similarly, we denote substring composed by successive b, which <strong>ends</strong> at index $i$ to $t_{i,b}$.</p>

<script type="math/tex; mode=display">
    t_{i,b} = \begin{cases}
        t_{i-1,b} + 1 & \text{if $a_i$ is b or w} \\
        0 & \text{if $a_i$ is r or $i$ > N}
    \end{cases}
</script>


<p>On the other hand, we denote substring composed by successive r, which <strong>starts</strong> at index $i$ to $s_{i,r}$.</p>

<script type="math/tex; mode=display">
    s_{i,r} = \begin{cases}
        s_{i+1,r} + 1 & \text{if $a_i$ is r or w} \\
        0 & \text{if $a_{i-1}$ is b or $i = 0$}
    \end{cases}
</script>


<p>And substring composed by successive b, which <strong>starts</strong> at index $i$ to $t_{i,b}$.</p>

<script type="math/tex; mode=display">
    s_{i,b} = \begin{cases}
        s_{i+1,b} + 1 & \text{if $a_i$ is b or w} \\
        0 & \text{if $a_{i-1}$ is r or $i = 0$}
    \end{cases}
</script>


<p>For each index $a_i$, $\max \{s_{i,r}, s_{i,b} \} + \max \{t_{i,r}, t_{i,b} \}$ is the length of longest substring if we break it at index $i$. We do this for N times, the greatest one is the answer. Complexity of this algorithm is O(n).</p>

<h2>Source Code of DP Solution</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">ID: viennak1</span>
</span><span class='line'><span class="cm">PROB: beads</span>
</span><span class='line'><span class="cm">LANG: C++</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Section 1.1 PROB Broken Necklace</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;climits&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cassert&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;numeric&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utility&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iomanip&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stack&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">ENDS</span><span class="p">[</span><span class="mi">700</span><span class="p">][</span><span class="mi">2</span><span class="p">],</span><span class="n">STARTS</span><span class="p">[</span><span class="mi">700</span><span class="p">][</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="n">string</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">ofstream</span> <span class="n">fout</span> <span class="p">(</span><span class="s">&quot;beads.out&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ifstream</span> <span class="n">fin</span> <span class="p">(</span><span class="s">&quot;beads.in&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span> <span class="n">fin</span><span class="o">&gt;&gt;</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">L</span><span class="o">=</span><span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>    <span class="n">s</span><span class="o">=</span><span class="n">s</span><span class="o">+</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;r&#39;</span><span class="p">)</span> <span class="n">ENDS</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;b&#39;</span><span class="p">)</span> <span class="n">ENDS</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">ENDS</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">ENDS</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">L</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;r&#39;</span><span class="p">)</span> <span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;b&#39;</span><span class="p">)</span> <span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;w&#39;</span><span class="p">)</span> <span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;r&#39;</span><span class="p">)</span> <span class="n">STARTS</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;b&#39;</span><span class="p">)</span> <span class="n">STARTS</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">STARTS</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">STARTS</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;r&#39;</span><span class="p">)</span> <span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;b&#39;</span><span class="p">)</span> <span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;w&#39;</span><span class="p">)</span> <span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">res</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">max</span><span class="p">(</span><span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span><span class="n">ENDS</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="n">max</span><span class="p">(</span><span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span><span class="n">STARTS</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]));</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">res</span><span class="o">&gt;</span><span class="n">L</span><span class="p">)</span> <span class="n">fout</span><span class="o">&lt;&lt;</span><span class="n">L</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">fout</span><span class="o">&lt;&lt;</span><span class="n">res</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto 'Set Paste' on Demand]]></title>
    <link href="http://zh-wang.github.io/blog/2015/02/17/auto-set-paste-on-demand/"/>
    <updated>2015-02-17T12:47:51+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/02/17/auto-set-paste-on-demand</id>
    <content type="html"><![CDATA[<p>Insertモードで編集している間にソースコードを貼付けたい時に、毎回&#8217;set paste&#8217;と&#8217;set nopaste&#8217;をやらないといけない、ちょっと面倒くさいです。<br/>
更に、&#8217;set paste&#8217;抜きで貼付けた場合、内容の長さによりvimが一時的にフリーズしちゃいますので大変です。<br/>
コマンドマッピングを導入しても、結局自分でコマンドを入れないといけないですね。</p>

<p>なので今日は移動的に&#8217;set paste&#8217;と&#8217;set nopaste&#8217;をしてくれる便利なプラグインを紹介します。</p>

<h2>Installation</h2>

<p>リポはこちらです。<a href="https://github.com/ConradIrwin/vim-bracketed-paste">https://github.com/ConradIrwin/vim-bracketed-paste</a><br/>
バンドル管理ツール経由でインストールします。私の環境では</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Bundle 'ConradIrwin/vim-bracketed-paste'</span></code></pre></td></tr></table></div></figure>


<h2>Make a step deeper</h2>

<p>基本的なアイディアはシステムのbracketed paste挙動を探知して、コマンドマッピングを自動で実行されます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if &term =~ "xterm.*"
</span><span class='line'>    let &t_ti = &t_ti . "\e[?2004h"                " alternate screenに入る時、bracketed pasteを有効にする( ESC[?2004h] )
</span><span class='line'>    let &t_te = "\e[?2004l" . &t_te                " alternate screenから戻る時、bracketed pasteを無効にする( ESC[?2004l] )
</span><span class='line'>
</span><span class='line'>    function XTermPasteBegin(ret)                  " mode change & set paste方法
</span><span class='line'>        set pastetoggle=&lt;Esc&gt;[201~                 " bracketed pasteを終了識別子を検出する時、pasteモードをtoggle
</span><span class='line'>        set paste                                  " mode changeする前に、set paste実行
</span><span class='line'>        return a:ret                               " パラメータでどのモードに入るのをコントロールする
</span><span class='line'>    endfunction
</span><span class='line'>    map &lt;expr&gt; &lt;Esc&gt;[200~ XTermPasteBegin("i")     " normal modeでbracketed pasteの開始識別子(ESC[200~])を検出する時、insert modeになる
</span><span class='line'>    imap &lt;expr&gt; &lt;Esc&gt;[200~ XTermPasteBegin("")     " insert modeならモードがそのまま
</span><span class='line'>    cmap &lt;Esc&gt;[200~ &lt;nop&gt;                          " command modeなら以上のコードを使うとおかしくなるので、回避
</span><span class='line'>    cmap &lt;Esc&gt;[201~ &lt;nop&gt;                          " 同じく回避
</span><span class='line'>endif</span></code></pre></td></tr></table></div></figure>


<h2>Reference</h2>

<ul>
<li>What is alternate screen? <a href="http://superuser.com/questions/321204/what-does-terminal-apps-show-alternate-screen-do-os-x">http://superuser.com/questions/321204/what-does-terminal-apps-show-alternate-screen-do-os-x</a></li>
</ul>


<p>以下はプラグインのソースから抜きました。</p>

<ul>
<li><a href="http://stackoverflow.com/questions/5585129/pasting-code-into-terminal-window-into-vim-on-mac-os-x">http://stackoverflow.com/questions/5585129/pasting-code-into-terminal-window-into-vim-on-mac-os-x</a></li>
<li><a href="https://coderwall.com/p/if9mda">https://coderwall.com/p/if9mda</a></li>
<li><a href="https://github.com/aaronjensen/vimfiles/blob/59a7019b1f2d08c70c28a41ef4e2612470ea0549/plugin/terminaltweaks.vim">https://github.com/aaronjensen/vimfiles/blob/59a7019b1f2d08c70c28a41ef4e2612470ea0549/plugin/terminaltweaks.vim</a> to fix the escape time problem with insert mode.</li>
<li>Docs on bracketed paste mode. <a href="http://www.xfree86.org/current/ctlseqs.html">http://www.xfree86.org/current/ctlseqs.html</a></li>
<li>Docs on mapping fast escape codes in vim. <a href="http://vim.wikia.com/wiki/Mapping_fast_keycodes_in_terminal_Vim">http://vim.wikia.com/wiki/Mapping_fast_keycodes_in_terminal_Vim</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sample Script of AWS Ruby Api]]></title>
    <link href="http://zh-wang.github.io/blog/2015/02/16/sample-script-of-aws-ruby-api/"/>
    <updated>2015-02-16T21:26:55+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/02/16/sample-script-of-aws-ruby-api</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Some ruby script working on AWS api.<br/>
I will integrate them with Imgur&rsquo;s ruby script to build a backend of gif sharing system later :)</p>

<h2>Source Code</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;AWS&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/all&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./StringColorize.rb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">GIF_TYPE_DEFAULT</span> <span class="o">=</span> <span class="s1">&#39;GIF_TYPE_DEFAULT&#39;</span>
</span><span class='line'><span class="no">GIF_TYPE_ANIMAL</span> <span class="o">=</span> <span class="s1">&#39;GIF_TYPE_ANIMAL&#39;</span>
</span><span class='line'><span class="no">GIF_TYPE_DOG</span> <span class="o">=</span> <span class="s1">&#39;GIF_TYPE_DOG&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">IMAGE_INFO_DOMAIN_NAME</span> <span class="o">=</span> <span class="s2">&quot;IMAGE_INFO_DOMAIN_NAME&quot;</span>
</span><span class='line'><span class="no">GROUP_INFO_DOMAIN_NAME</span> <span class="o">=</span> <span class="s2">&quot;GROUP_INFO_DOMAIN_NAME&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AWSUtils</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">ACCESS_KEY_ID</span> <span class="o">=</span> <span class="s1">&#39;MY_ACCESS_KEY_ID&#39;</span>
</span><span class='line'>  <span class="no">SECRET_ACCESS_KEY</span> <span class="o">=</span> <span class="s1">&#39;MY_SECRET_ACCESS_KEY&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareSDB</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareDomainSDB</span><span class="p">(</span><span class="no">IMAGE_INFO_DOMAIN_NAME</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareDomainSDB</span><span class="p">(</span><span class="no">GROUP_INFO_DOMAIN_NAME</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">listImageInfos</span>
</span><span class='line'>    <span class="n">imageDomain</span> <span class="o">=</span> <span class="n">getDomain</span><span class="p">(</span><span class="no">IMAGE_INFO_DOMAIN_NAME</span><span class="p">)</span>
</span><span class='line'>    <span class="n">list_item_by_domain_name</span><span class="p">(</span><span class="n">imageDomain</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>      <span class="n">list_attributes_by_item</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">listGroupInfos</span>
</span><span class='line'>    <span class="n">groupDomain</span> <span class="o">=</span> <span class="n">getDomain</span><span class="p">(</span><span class="no">GROUP_INFO_DOMAIN_NAME</span><span class="p">)</span>
</span><span class='line'>    <span class="n">list_item_by_domain_name</span><span class="p">(</span><span class="n">groupDomain</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>      <span class="n">list_attributes_by_item</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">regions</span><span class="p">()</span>
</span><span class='line'>    <span class="no">AWS</span><span class="o">::</span><span class="n">regions</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">region</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">region</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prepareSDB</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@sdb</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;===&gt; prepare sdb&quot;</span>
</span><span class='line'>      <span class="vi">@sdb</span> <span class="o">=</span> <span class="no">AWS</span><span class="o">::</span><span class="no">SimpleDB</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>        <span class="ss">:access_key_id</span> <span class="o">=&gt;</span> <span class="no">ACCESS_KEY_ID</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:secret_access_key</span> <span class="o">=&gt;</span> <span class="no">SECRET_ACCESS_KEY</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:region</span> <span class="o">=&gt;</span> <span class="s1">&#39;ap-northeast-1&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prepareDomainSDB</span><span class="p">(</span><span class="n">domain_name</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareSDB</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;===&gt; initialize domain &quot;</span> <span class="o">+</span> <span class="n">domain_name</span>
</span><span class='line'>    <span class="vi">@sdb</span><span class="o">.</span><span class="n">domains</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">domain_name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">getDomain</span><span class="p">(</span><span class="n">domain_name</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareSDB</span>
</span><span class='line'>    <span class="vi">@sdb</span><span class="o">.</span><span class="n">domains</span><span class="o">[</span><span class="n">domain_name</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ==== Deletion ====</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deleteEmptyDomain</span><span class="p">(</span><span class="n">domain</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareSDB</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">domain</span><span class="o">.</span><span class="n">name</span> <span class="o">+</span> <span class="s2">&quot; is deleted because empty&quot;</span>
</span><span class='line'>      <span class="n">domain</span><span class="o">.</span><span class="n">delete</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">domain</span><span class="o">.</span><span class="n">name</span> <span class="o">+</span> <span class="s2">&quot; delete error -&gt; &quot;</span> <span class="o">+</span> <span class="n">ex</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ==== List ====</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">listDomainSDB</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareSDB</span>
</span><span class='line'>    <span class="vi">@sdb</span><span class="o">.</span><span class="n">domains</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">domain</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;===&gt; listing domain: &quot;</span> <span class="o">+</span> <span class="n">domain</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>        <span class="k">unless</span> <span class="n">block</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>          <span class="k">yield</span> <span class="n">domain</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">list_item_by_domain_name</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareSDB</span>
</span><span class='line'>    <span class="c1">#domain = @sdb.domains.create(domain_name)</span>
</span><span class='line'><span class="c1">#    puts domain.items.collect(&amp;:name) # list name</span>
</span><span class='line'>    <span class="n">domain</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;===&gt; listing item: &quot;</span> <span class="o">+</span> <span class="n">item</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>      <span class="k">unless</span> <span class="n">block</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">item</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">list_attributes_by_item</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;===&gt; listing attributes: &quot;</span> <span class="o">+</span> <span class="n">item</span><span class="o">.</span><span class="n">attributes</span><span class="o">.</span><span class="n">to_h</span><span class="p">()</span><span class="o">.</span><span class="n">to_s</span><span class="p">()</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ==== Insert ====</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># item key -&gt; image&#39;s md5</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># followed by a hash contains</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># upload_time -&gt; ISO 8601 formatted time stamp</span>
</span><span class='line'>  <span class="c1"># title -&gt; [title_en, title_ja, ...]</span>
</span><span class='line'>  <span class="c1"># type -&gt; type string (Dog, Cat etc.)</span>
</span><span class='line'>  <span class="c1"># group -&gt; [group id 1, group id 2, ...], may be nil</span>
</span><span class='line'>  <span class="c1"># link -&gt; an Imgur link</span>
</span><span class='line'>  <span class="c1"># json -&gt; response of uploaded image</span>
</span><span class='line'>  <span class="c1"># comment -&gt; [], may be nil</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">insert_image_info_item</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="n">md5</span><span class="p">,</span> <span class="n">link</span><span class="p">,</span> <span class="n">json</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareSDB</span>
</span><span class='line'>    <span class="n">image_domain</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">getDomain</span><span class="p">(</span><span class="no">IMAGE_INFO_DOMAIN_NAME</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:upload_time</span> <span class="o">=&gt;</span> <span class="n">time2ISO8601</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">title</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">type</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="o">[]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:link</span> <span class="o">=&gt;</span> <span class="n">link</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="n">json</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:comment</span> <span class="o">=&gt;</span> <span class="o">[]</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;===&gt; inserting: </span><span class="si">#{</span><span class="n">md5</span><span class="si">}</span><span class="s2"> , </span><span class="si">#{</span><span class="nb">hash</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">image_domain</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">md5</span><span class="p">,</span> <span class="nb">hash</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;===&gt; ok&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># item key -&gt; group id, this is auto-generated</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># followed by a hash contains</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># upload_time -&gt; ISO 8601 formatted time stamp</span>
</span><span class='line'>  <span class="c1"># title -&gt; [title_en, title_ja, ...]</span>
</span><span class='line'>  <span class="c1"># images_md5 -&gt; [md5_1, md5_2, ...]</span>
</span><span class='line'>  <span class="c1"># type -&gt; type string (Dog, Cat etc.)</span>
</span><span class='line'>  <span class="c1"># comment -&gt; [], may be nil</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">insert_group_info_item</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">images_md5</span><span class="p">,</span> <span class="n">type</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">prepareSDB</span>
</span><span class='line'>    <span class="n">group_domian</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">getDomain</span><span class="p">(</span><span class="no">GROUP_INFO_DOMAIN_NAME</span><span class="p">)</span>
</span><span class='line'>    <span class="n">uniq_id</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="p">(</span><span class="mi">65</span> <span class="o">+</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">26</span><span class="p">))</span><span class="o">.</span><span class="n">chr</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'>    <span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:upload_time</span> <span class="o">=&gt;</span> <span class="n">time2ISO8601</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">title</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:images_md5</span> <span class="o">=&gt;</span> <span class="n">images_md5</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="n">type</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:comment</span> <span class="o">=&gt;</span> <span class="o">[]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;===&gt; inserting: </span><span class="si">#{</span><span class="n">uniq_id</span><span class="si">}</span><span class="s2"> , </span><span class="si">#{</span><span class="nb">hash</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">group_domian</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">uniq_id</span><span class="p">,</span> <span class="nb">hash</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">duplicated</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="o">!</span><span class="n">domain</span><span class="o">.</span><span class="n">items</span><span class="o">[</span><span class="n">key</span><span class="o">].</span><span class="n">attributes</span><span class="o">.</span><span class="n">to_h</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">duplicated_in_domain_name</span><span class="p">(</span><span class="n">domain_name</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="n">duplicated</span><span class="p">(</span><span class="n">getDomain</span><span class="p">(</span><span class="n">domain_name</span><span class="p">),</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">time2ISO8601</span>
</span><span class='line'>    <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">in_time_zone</span><span class="p">(</span><span class="s1">&#39;Asia/Tokyo&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">iso8601</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upload Pics by Imgur Api in Ruby]]></title>
    <link href="http://zh-wang.github.io/blog/2015/02/06/upload-pics-to-imgur-by-ruby/"/>
    <updated>2015-02-06T12:43:58+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/02/06/upload-pics-to-imgur-by-ruby</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Sample ruby script. Use Imgur&rsquo;s api to upload image, with OAuth2 authorization.</p>

<h2>Source Code</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;httpclient&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ImgurUploader</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">AUTH_URL</span> <span class="o">=</span> <span class="s1">&#39;https://api.imgur.com/oauth2/authorize&#39;</span>
</span><span class='line'>  <span class="no">EXC_TOKEN_URL</span> <span class="o">=</span> <span class="s1">&#39;https://api.imgur.com/oauth2/token&#39;</span>
</span><span class='line'>  <span class="no">UPLOAD_URL</span> <span class="o">=</span> <span class="s1">&#39;https://api.imgur.com/3/image&#39;</span>
</span><span class='line'>  <span class="no">CLIENT_ID</span> <span class="o">=</span> <span class="s1">&#39;YOUR_CLIENT_ID&#39;</span>
</span><span class='line'>  <span class="no">CLIENT_SE</span> <span class="o">=</span> <span class="s1">&#39;YOUR_CLIENT_SECRET_KEY&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@file_path</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="vi">@access_token</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@file_path</span> <span class="o">=</span> <span class="n">file_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setAccessToken</span><span class="p">(</span><span class="n">access_token</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@access_token</span> <span class="o">=</span> <span class="n">access_token</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">applyAccessToken</span>
</span><span class='line'>    <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:client_id</span> <span class="o">=&gt;</span> <span class="no">CLIENT_ID</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:response_type</span> <span class="o">=&gt;</span> <span class="s2">&quot;pin&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:state</span> <span class="o">=&gt;</span> <span class="s1">&#39;init&#39;</span>
</span><span class='line'>    <span class="p">}</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">=</span><span class="si">#{</span><span class="n">v</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">reduce</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">&amp;</span><span class="si">#{</span><span class="n">v</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">system</span><span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">,</span> <span class="no">AUTH_URL</span> <span class="o">+</span> <span class="s2">&quot;?&quot;</span> <span class="o">+</span> <span class="n">params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;input PIN here: &quot;</span>
</span><span class='line'>    <span class="n">mypin</span> <span class="o">=</span> <span class="no">STDIN</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">body</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:client_id</span> <span class="o">=&gt;</span> <span class="no">CLIENT_ID</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:client_secret</span> <span class="o">=&gt;</span> <span class="no">CLIENT_SE</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:grant_type</span> <span class="o">=&gt;</span> <span class="s2">&quot;pin&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:pin</span> <span class="o">=&gt;</span> <span class="n">mypin</span>
</span><span class='line'>    <span class="p">}</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">=</span><span class="si">#{</span><span class="n">v</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">reduce</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">&amp;</span><span class="si">#{</span><span class="n">v</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="no">HTTPClient</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@res</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="no">EXC_TOKEN_URL</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="vi">@res</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="vi">@res</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@access_token</span> <span class="o">=</span> <span class="n">result</span><span class="o">[</span><span class="s1">&#39;access_token&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;access_token: &quot;</span> <span class="o">+</span> <span class="vi">@access_token</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;access_token.tmp&quot;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="c1"># store access_token to local file,</span>
</span><span class='line'>      <span class="c1"># no need to authorize again if access_token is not expired</span>
</span><span class='line'>      <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="vi">@access_token</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">upload</span>
</span><span class='line'>    <span class="n">auth_header</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;Authorization&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Bearer &#39;</span> <span class="o">+</span> <span class="vi">@access_token</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="no">HTTPClient</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="vi">@file_path</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>      <span class="n">body</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;image&#39;</span> <span class="o">=&gt;</span> <span class="n">file</span> <span class="p">}</span>
</span><span class='line'>      <span class="vi">@res</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="no">UPLOAD_URL</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">auth_header</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="vi">@res</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="vi">@res</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'>      <span class="n">result</span><span class="o">[</span><span class="s1">&#39;status&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">ex</span><span class="o">.</span><span class="n">message</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;upload failed on Authorization&quot;</span>
</span><span class='line'>      <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;usage&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;ruby imgur.rb [image file path]&quot;</span>
</span><span class='line'>  <span class="nb">exit</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">uploader</span> <span class="o">=</span> <span class="no">ImgurUploader</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">chomp</span><span class="o">.</span><span class="n">strip</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;access_token.tmp&quot;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="c1"># read local access_token</span>
</span><span class='line'>    <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">uploader</span><span class="o">.</span><span class="n">setAccessToken</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">gets</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">uploader</span><span class="o">.</span><span class="n">upload</span> <span class="o">==</span> <span class="mi">200</span> <span class="c1"># if uploaded</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Upload ok&quot;</span>
</span><span class='line'>  <span class="k">else</span> <span class="c1"># if upload failed by expired token</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Upload failed, try to update access_token&quot;</span>
</span><span class='line'>    <span class="n">uploader</span><span class="o">.</span><span class="n">applyAccessToken</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">uploader</span><span class="o">.</span><span class="n">upload</span> <span class="o">==</span> <span class="mi">200</span> <span class="c1"># upload again</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Upload ok&quot;</span>
</span><span class='line'>    <span class="k">else</span> <span class="c1"># still fails</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Upload failed, need detail check&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">ex</span> <span class="c1"># local file not exists, apply for access_token and upload</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">ex</span><span class="o">.</span><span class="n">message</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;No access_token is stored. Do Authorization again.&quot;</span>
</span><span class='line'>  <span class="n">uploader</span><span class="o">.</span><span class="n">applyAccessToken</span>
</span><span class='line'>  <span class="n">uploader</span><span class="o">.</span><span class="n">upload</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upload Pics by Imgur Api on Android]]></title>
    <link href="http://zh-wang.github.io/blog/2015/01/28/upload-image-with-imgur-api-on-android/"/>
    <updated>2015-01-28T16:29:13+09:00</updated>
    <id>http://zh-wang.github.io/blog/2015/01/28/upload-image-with-imgur-api-on-android</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This an example android application which use Imgur&rsquo;s api to upload image, with OAuth2 authorization.</p>

<h2>Steps</h2>

<ol>
<li>You need an account on Imgur. Then create an app from &ldquo;Settings -> Applications&rdquo;. The redirect link should set to <code>YOUR_APP_IDENTIFIER://callback</code> or something else you like, but must match <code>scheme</code> in step 5.</li>
<li>Get your app&rsquo;s client id.</li>
<li>Replace it with <code>CLIENT_ID</code> in the source code.</li>
<li>Create an sample android project with an activity with the source code below.</li>
<li><p>Add following lines to <code>AndroidManifest.xml</code>, under Activity <code>OAuthTestActivity</code>. This allows transition from authorization page to your android app.</p>

<pre><code> &lt;intent-filter&gt;
     &lt;action android:name="android.intent.action.VIEW" /&gt;
     &lt;category android:name="android.intent.category.DEFAULT" /&gt;
     &lt;category android:name="android.intent.category.BROWSABLE" /&gt;
     &lt;data android:scheme="YOUR_APP_IDENTIFIER" android:host="callback" /&gt;
 &lt;/intent-filter&gt;
</code></pre></li>
<li><p>Build and Run.</p></li>
<li>Authorize with your imgur&rsquo;s account with your web browser.
<img src="http://zh-wang.github.io/images/2015_01_28_image04.png" title="Authorize with your imgur's account" alt="Image A" /></li>
<li>Choose an image to upload.
<img src="http://zh-wang.github.io/images/2015_01_28_image01.png" title="Choose an image" alt="Image B" /></li>
<li>Upload.
<img src="http://zh-wang.github.io/images/2015_01_28_image02.png" title="Upload" alt="Image C" /></li>
<li>Check the uploaded image in your web browser.
<img src="http://zh-wang.github.io/images/2015_01_28_image03.png" title="Open browser" alt="Image D" /></li>
</ol>


<h2>Source Code</h2>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OAuthTestActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">REQUEST_CODE_PICK_IMAGE</span> <span class="o">=</span> <span class="mi">1001</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">AUTHORIZATION_URL</span> <span class="o">=</span> <span class="s">&quot;https://api.imgur.com/oauth2/authorize&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">CLIENT_ID</span> <span class="o">=</span> <span class="s">&quot;CLIENT_ID&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">LinearLayout</span> <span class="n">rootView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">accessToken</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">refreshToken</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">picturePath</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Button</span> <span class="n">send</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">uploadedImageUrl</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">rootView</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">LinearLayout</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="n">rootView</span><span class="o">.</span><span class="na">setOrientation</span><span class="o">(</span><span class="n">LinearLayout</span><span class="o">.</span><span class="na">VERTICAL</span><span class="o">);</span>
</span><span class='line'>        <span class="n">TextView</span> <span class="n">tv</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TextView</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="n">LinearLayout</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">llp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinearLayout</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">(</span>
</span><span class='line'>                <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">,</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">);</span>
</span><span class='line'>        <span class="n">tv</span><span class="o">.</span><span class="na">setLayoutParams</span><span class="o">(</span><span class="n">llp</span><span class="o">);</span>
</span><span class='line'>        <span class="n">rootView</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">tv</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">rootView</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">action</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">().</span><span class="na">getAction</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">action</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">action</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_VIEW</span><span class="o">))</span> <span class="o">{</span> <span class="c1">// We need access token to use Imgur&#39;s api</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">tv</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Start OAuth Authorization&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Uri</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">AUTHORIZATION_URL</span><span class="o">).</span><span class="na">buildUpon</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">appendQueryParameter</span><span class="o">(</span><span class="s">&quot;client_id&quot;</span><span class="o">,</span> <span class="n">CLIENT_ID</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">appendQueryParameter</span><span class="o">(</span><span class="s">&quot;response_type&quot;</span><span class="o">,</span> <span class="s">&quot;token&quot;</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">appendQueryParameter</span><span class="o">(</span><span class="s">&quot;state&quot;</span><span class="o">,</span> <span class="s">&quot;init&quot;</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">();</span>
</span><span class='line'>            <span class="n">intent</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">uri</span><span class="o">);</span>
</span><span class='line'>            <span class="n">intent</span><span class="o">.</span><span class="na">setFlags</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">FLAG_ACTIVITY_NEW_TASK</span><span class="o">);</span>
</span><span class='line'>            <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>            <span class="n">finish</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="c1">// Now we have the token, can do the upload</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">tv</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Got Access Token&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Uri</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">().</span><span class="na">getData</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;Got imgur&#39;s access token&quot;</span><span class="o">,</span> <span class="n">uri</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">uriString</span> <span class="o">=</span> <span class="n">uri</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">paramsString</span> <span class="o">=</span> <span class="s">&quot;http://callback?&quot;</span> <span class="o">+</span> <span class="n">uriString</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">uriString</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;#&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;tag&quot;</span><span class="o">,</span> <span class="n">paramsString</span><span class="o">);</span>
</span><span class='line'>            <span class="n">List</span><span class="o">&lt;</span><span class="n">NameValuePair</span><span class="o">&gt;</span> <span class="n">params</span> <span class="o">=</span> <span class="n">URLEncodedUtils</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">paramsString</span><span class="o">),</span> <span class="s">&quot;utf-8&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;tag&quot;</span><span class="o">,</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">NameValuePair</span><span class="o">[</span><span class="mi">0</span><span class="o">])));</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="n">NameValuePair</span> <span class="n">pair</span> <span class="o">:</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">pair</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;access_token&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">accessToken</span> <span class="o">=</span> <span class="n">pair</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">pair</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;refresh_token&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">refreshToken</span> <span class="o">=</span> <span class="n">pair</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;tag&quot;</span><span class="o">,</span> <span class="s">&quot;access_token = &quot;</span> <span class="o">+</span> <span class="n">accessToken</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;tag&quot;</span><span class="o">,</span> <span class="s">&quot;refresh_token = &quot;</span> <span class="o">+</span> <span class="n">refreshToken</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Button</span> <span class="n">chooseImage</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Button</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>            <span class="n">rootView</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">chooseImage</span><span class="o">);</span>
</span><span class='line'>            <span class="n">chooseImage</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Choose an image&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">chooseImage</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_PICK</span><span class="o">,</span> <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">Media</span><span class="o">.</span><span class="na">EXTERNAL_CONTENT_URI</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">startActivityForResult</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span> <span class="n">REQUEST_CODE_PICK_IMAGE</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">send</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Button</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>            <span class="n">rootView</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">send</span><span class="o">);</span>
</span><span class='line'>            <span class="n">send</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;send to imgur&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">send</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">picturePath</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">picturePath</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                            <span class="n">accessToken</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">accessToken</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="o">(</span><span class="k">new</span> <span class="nf">UploadToImgurTask</span><span class="o">()).</span><span class="na">execute</span><span class="o">(</span><span class="n">picturePath</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onResume</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">send</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">picturePath</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">picturePath</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">send</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">GONE</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">send</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onActivityResult</span><span class="o">(</span><span class="kt">int</span> <span class="n">requestCode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">resultCode</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;tag&quot;</span><span class="o">,</span> <span class="s">&quot;request code : &quot;</span> <span class="o">+</span> <span class="n">requestCode</span> <span class="o">+</span> <span class="s">&quot;, result code : &quot;</span> <span class="o">+</span> <span class="n">resultCode</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">data</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;tag&quot;</span> <span class="o">,</span> <span class="s">&quot;data is null&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">resultCode</span> <span class="o">==</span> <span class="n">Activity</span><span class="o">.</span><span class="na">RESULT_OK</span> <span class="o">&amp;&amp;</span> <span class="n">requestCode</span> <span class="o">==</span> <span class="n">REQUEST_CODE_PICK_IMAGE</span> <span class="o">&amp;&amp;</span> <span class="kc">null</span> <span class="o">!=</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Uri</span> <span class="n">selectedImage</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span>
</span><span class='line'>            <span class="n">String</span><span class="o">[]</span> <span class="n">filePathColumn</span> <span class="o">=</span> <span class="o">{</span> <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">Media</span><span class="o">.</span><span class="na">DATA</span> <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Cursor</span> <span class="n">cursor</span> <span class="o">=</span> <span class="n">getContentResolver</span><span class="o">().</span><span class="na">query</span><span class="o">(</span><span class="n">selectedImage</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">filePathColumn</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>            <span class="n">cursor</span><span class="o">.</span><span class="na">moveToFirst</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">int</span> <span class="n">columnIndex</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="n">filePathColumn</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>            <span class="n">picturePath</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">columnIndex</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;tag&quot;</span><span class="o">,</span> <span class="s">&quot;image path : &quot;</span> <span class="o">+</span> <span class="n">picturePath</span><span class="o">);</span>
</span><span class='line'>            <span class="n">cursor</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onActivityResult</span><span class="o">(</span><span class="n">requestCode</span><span class="o">,</span> <span class="n">resultCode</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Here is the upload task</span>
</span><span class='line'>    <span class="kd">class</span> <span class="nc">UploadToImgurTask</span> <span class="kd">extends</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Void</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="n">Boolean</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">String</span> <span class="n">upload_to</span> <span class="o">=</span> <span class="s">&quot;https://api.imgur.com/3/upload&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">HttpClient</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DefaultHttpClient</span><span class="o">();</span>
</span><span class='line'>            <span class="n">HttpContext</span> <span class="n">localContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BasicHttpContext</span><span class="o">();</span>
</span><span class='line'>            <span class="n">HttpPost</span> <span class="n">httpPost</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpPost</span><span class="o">(</span><span class="n">upload_to</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">HttpEntity</span> <span class="n">entity</span> <span class="o">=</span> <span class="n">MultipartEntityBuilder</span><span class="o">.</span><span class="na">create</span><span class="o">()</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">addPart</span><span class="o">(</span><span class="s">&quot;image&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">FileBody</span><span class="o">(</span><span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">params</span><span class="o">[</span><span class="mi">0</span><span class="o">])))</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">httpPost</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">&quot;Authorization&quot;</span><span class="o">,</span> <span class="s">&quot;Bearer &quot;</span> <span class="o">+</span> <span class="n">accessToken</span><span class="o">);</span>
</span><span class='line'>                <span class="n">httpPost</span><span class="o">.</span><span class="na">setEntity</span><span class="o">(</span><span class="n">entity</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">final</span> <span class="n">HttpResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">httpPost</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">localContext</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">final</span> <span class="n">String</span> <span class="n">response_string</span> <span class="o">=</span> <span class="n">EntityUtils</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">response</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">getEntity</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">final</span> <span class="n">JSONObject</span> <span class="n">json</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">JSONObject</span><span class="o">(</span><span class="n">response_string</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;tag&quot;</span><span class="o">,</span> <span class="n">json</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">JSONObject</span> <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="na">optJSONObject</span><span class="o">(</span><span class="s">&quot;data&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">uploadedImageUrl</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">optString</span><span class="o">(</span><span class="s">&quot;link&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;tag&quot;</span><span class="o">,</span> <span class="s">&quot;uploaded image url : &quot;</span> <span class="o">+</span> <span class="n">uploadedImageUrl</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPostExecute</span><span class="o">(</span><span class="n">Boolean</span> <span class="n">aBoolean</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">onPostExecute</span><span class="o">(</span><span class="n">aBoolean</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">aBoolean</span><span class="o">.</span><span class="na">booleanValue</span><span class="o">())</span> <span class="o">{</span> <span class="c1">// after sucessful uploading, show the image in web browser</span>
</span><span class='line'>                <span class="n">Button</span> <span class="n">openBrowser</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Button</span><span class="o">(</span><span class="n">OAuthTestActivity</span><span class="o">.</span><span class="na">this</span><span class="o">);</span>
</span><span class='line'>                <span class="n">rootView</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">openBrowser</span><span class="o">);</span>
</span><span class='line'>                <span class="n">openBrowser</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Open Browser&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">openBrowser</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">();</span>
</span><span class='line'>                        <span class="n">intent</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">uploadedImageUrl</span><span class="o">));</span>
</span><span class='line'>                        <span class="n">intent</span><span class="o">.</span><span class="na">setFlags</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">FLAG_ACTIVITY_NEW_TASK</span><span class="o">);</span>
</span><span class='line'>                        <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">});</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
